{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src-docs/src/views/toggle/toggle_example.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src-docs/src/views/toggle/toggle_example.js","mtime":1565204169572},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ToggleExample = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactRouter = require(\"react-router\");\n\nvar _services = require(\"../../services\");\n\nvar _components = require(\"../../components\");\n\nvar _components2 = require(\"../../../../src/components\");\n\nvar _toggle = _interopRequireDefault(require(\"./toggle\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar toggleSource = require('!!raw-loader!./toggle');\n\nvar toggleHtml = (0, _services.renderToHtml)(_toggle.default);\nvar ToggleExample = {\n  title: 'Toggle',\n  sections: [{\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: toggleSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: toggleHtml\n    }],\n    text: _react.default.createElement(\"div\", null, _react.default.createElement(\"p\", null, \"The \", _react.default.createElement(_components2.EuiCode, null, \"EuiToggle\"), \" component is a very simplified utility for creating toggle-able elements. There is only an on/off (checked/unchecked) state. All this creates is a visibly hidden input (checkbox or radio) overtop of the children provided.\"), _react.default.createElement(\"p\", null, \"By default, the children will be wrapped in a block element. To change the display you can simply use one of the\", ' ', _react.default.createElement(_reactRouter.Link, {\n      to: \"/utilities/css-utility-classes\"\n    }, \"utility classes\"), ' ', \"like \", _react.default.createElement(_components2.EuiCode, null, \".eui-displayInlineBlock\"), \".\"), _react.default.createElement(_components2.EuiCallOut, {\n      title: \"Accessibility\"\n    }, _react.default.createElement(\"p\", null, \"This utility is just a helper component and comes with no inherit styles including no \", _react.default.createElement(_components2.EuiCode, null, \":hover\"), \" or\", ' ', _react.default.createElement(_components2.EuiCode, null, \":focus\"), \" states. If you use this utility directly, be sure to add these states. Otherwise, you may just want to utilize the\", ' ', _react.default.createElement(_reactRouter.Link, {\n      to: \"/navigation/button\"\n    }, \"EuiButtonToggle\"), \" component.\"))),\n    components: {\n      EuiToggle: _components2.EuiToggle\n    },\n    demo: _react.default.createElement(_toggle.default, null),\n    props: {\n      EuiToggle: _components2.EuiToggle\n    }\n  }]\n};\nexports.ToggleExample = ToggleExample;",{"version":3,"sources":["/Users/chanderprall/projects/eui/src-docs/src/views/toggle/toggle_example.js"],"names":["toggleSource","require","toggleHtml","Toggle","ToggleExample","title","sections","source","type","GuideSectionTypes","JS","code","HTML","text","components","EuiToggle","demo","props"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;;AACA,IAAMA,YAAY,GAAGC,OAAO,CAAC,uBAAD,CAA5B;;AACA,IAAMC,UAAU,GAAG,4BAAaC,eAAb,CAAnB;AAEO,IAAMC,aAAa,GAAG;AAC3BC,EAAAA,KAAK,EAAE,QADoB;AAE3BC,EAAAA,QAAQ,EAAE,CACR;AACEC,IAAAA,MAAM,EAAE,CACN;AACEC,MAAAA,IAAI,EAAEC,8BAAkBC,EAD1B;AAEEC,MAAAA,IAAI,EAAEX;AAFR,KADM,EAKN;AACEQ,MAAAA,IAAI,EAAEC,8BAAkBG,IAD1B;AAEED,MAAAA,IAAI,EAAET;AAFR,KALM,CADV;AAWEW,IAAAA,IAAI,EACF,0CACE,gDACM,6BAAC,oBAAD,oBADN,mOADF,EAOE,4JAEmD,GAFnD,EAGE,6BAAC,iBAAD;AAAM,MAAA,EAAE,EAAC;AAAT,yBAHF,EAGmE,GAHnE,WAIO,6BAAC,oBAAD,kCAJP,MAPF,EAaE,6BAAC,uBAAD;AAAY,MAAA,KAAK,EAAC;AAAlB,OACE,kIAEsB,6BAAC,oBAAD,iBAFtB,SAEmD,GAFnD,EAGE,6BAAC,oBAAD,iBAHF,yHAKsB,GALtB,EAME,6BAAC,iBAAD;AAAM,MAAA,EAAE,EAAC;AAAT,yBANF,gBADF,CAbF,CAZJ;AAqCEC,IAAAA,UAAU,EAAE;AAAEC,MAAAA,SAAS,EAATA;AAAF,KArCd;AAsCEC,IAAAA,IAAI,EAAE,6BAAC,eAAD,OAtCR;AAuCEC,IAAAA,KAAK,EAAE;AAAEF,MAAAA,SAAS,EAATA;AAAF;AAvCT,GADQ;AAFiB,CAAtB","sourcesContent":["import React from 'react';\n\nimport { Link } from 'react-router';\n\nimport { renderToHtml } from '../../services';\n\nimport { GuideSectionTypes } from '../../components';\n\nimport { EuiCode, EuiToggle, EuiCallOut } from '../../../../src/components';\n\nimport Toggle from './toggle';\nconst toggleSource = require('!!raw-loader!./toggle');\nconst toggleHtml = renderToHtml(Toggle);\n\nexport const ToggleExample = {\n  title: 'Toggle',\n  sections: [\n    {\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: toggleSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: toggleHtml,\n        },\n      ],\n      text: (\n        <div>\n          <p>\n            The <EuiCode>EuiToggle</EuiCode> component is a very simplified\n            utility for creating toggle-able elements. There is only an on/off\n            (checked/unchecked) state. All this creates is a visibly hidden\n            input (checkbox or radio) overtop of the children provided.\n          </p>\n          <p>\n            By default, the children will be wrapped in a block element. To\n            change the display you can simply use one of the{' '}\n            <Link to=\"/utilities/css-utility-classes\">utility classes</Link>{' '}\n            like <EuiCode>.eui-displayInlineBlock</EuiCode>.\n          </p>\n          <EuiCallOut title=\"Accessibility\">\n            <p>\n              This utility is just a helper component and comes with no inherit\n              styles including no <EuiCode>:hover</EuiCode> or{' '}\n              <EuiCode>:focus</EuiCode> states. If you use this utility\n              directly, be sure to add these states. Otherwise, you may just\n              want to utilize the{' '}\n              <Link to=\"/navigation/button\">EuiButtonToggle</Link> component.\n            </p>\n          </EuiCallOut>\n        </div>\n      ),\n      components: { EuiToggle },\n      demo: <Toggle />,\n      props: { EuiToggle },\n    },\n  ],\n};\n"]}]}