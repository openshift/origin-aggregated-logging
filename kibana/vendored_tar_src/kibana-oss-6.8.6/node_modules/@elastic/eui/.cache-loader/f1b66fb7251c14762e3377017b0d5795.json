{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/drag_and_drop/services.ts","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/drag_and_drop/services.ts","mtime":1565204169680},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.copy = exports.move = exports.reorder = void 0;\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.string.iterator\");\n\nrequire(\"core-js/modules/es6.array.from\");\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar reorder = function reorder(list, startIndex, endIndex) {\n  var result = Array.from(list);\n\n  var _result$splice = result.splice(startIndex, 1),\n      _result$splice2 = _slicedToArray(_result$splice, 1),\n      removed = _result$splice2[0];\n\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nexports.reorder = reorder;\n\nvar move = function move(sourceList, destinationList, dropResultSource, dropResultDestination) {\n  var _ref;\n\n  var sourceClone = _toConsumableArray(sourceList);\n\n  var destClone = _toConsumableArray(destinationList);\n\n  var _sourceClone$splice = sourceClone.splice(dropResultSource.index, 1),\n      _sourceClone$splice2 = _slicedToArray(_sourceClone$splice, 1),\n      removed = _sourceClone$splice2[0];\n\n  destClone.splice(dropResultDestination.index, 0, removed);\n  return _ref = {}, _defineProperty(_ref, dropResultSource.droppableId, sourceClone), _defineProperty(_ref, dropResultDestination.droppableId, destClone), _ref;\n};\n\nexports.move = move;\n\nvar copy = function copy(sourceList, destinationList, dropResultSource, dropResultDestination, idModification) {\n  var _ref2;\n\n  var sourceClone = _toConsumableArray(sourceList);\n\n  var destClone = _toConsumableArray(destinationList);\n\n  destClone.splice(dropResultDestination.index, 0, _objectSpread({}, sourceList[dropResultSource.index], _defineProperty({}, idModification.property, idModification.modifier())));\n  return _ref2 = {}, _defineProperty(_ref2, dropResultSource.droppableId, sourceClone), _defineProperty(_ref2, dropResultDestination.droppableId, destClone), _ref2;\n};\n\nexports.copy = copy;",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/drag_and_drop/services.ts"],"names":["reorder","list","startIndex","endIndex","result","Array","from","splice","removed","move","sourceList","destinationList","dropResultSource","dropResultDestination","sourceClone","destClone","index","droppableId","copy","idModification","property","modifier"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMO,IAAMA,OAAO,GAAG,SAAVA,OAAU,CACrBC,IADqB,EAErBC,UAFqB,EAGrBC,QAHqB,EAIP;AACd,MAAMC,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAWL,IAAX,CAAf;;AADc,uBAEIG,MAAM,CAACG,MAAP,CAAcL,UAAd,EAA0B,CAA1B,CAFJ;AAAA;AAAA,MAEPM,OAFO;;AAGdJ,EAAAA,MAAM,CAACG,MAAP,CAAcJ,QAAd,EAAwB,CAAxB,EAA2BK,OAA3B;AAEA,SAAOJ,MAAP;AACD,CAVM;;;;AAYA,IAAMK,IAAI,GAAG,SAAPA,IAAO,CAClBC,UADkB,EAElBC,eAFkB,EAGlBC,gBAHkB,EAIlBC,qBAJkB,EAKH;AAAA;;AACf,MAAMC,WAAW,sBAAOJ,UAAP,CAAjB;;AACA,MAAMK,SAAS,sBAAOJ,eAAP,CAAf;;AAFe,4BAGGG,WAAW,CAACP,MAAZ,CAAmBK,gBAAgB,CAACI,KAApC,EAA2C,CAA3C,CAHH;AAAA;AAAA,MAGRR,OAHQ;;AAKfO,EAAAA,SAAS,CAACR,MAAV,CAAiBM,qBAAqB,CAACG,KAAvC,EAA8C,CAA9C,EAAiDR,OAAjD;AAEA,0CACGI,gBAAgB,CAACK,WADpB,EACkCH,WADlC,yBAEGD,qBAAqB,CAACI,WAFzB,EAEuCF,SAFvC;AAID,CAhBM;;;;AAkBA,IAAMG,IAAI,GAAG,SAAPA,IAAO,CAClBR,UADkB,EAElBC,eAFkB,EAGlBC,gBAHkB,EAIlBC,qBAJkB,EASlBM,cATkB,EAaH;AAAA;;AACf,MAAML,WAAW,sBAAOJ,UAAP,CAAjB;;AACA,MAAMK,SAAS,sBAAOJ,eAAP,CAAf;;AAEAI,EAAAA,SAAS,CAACR,MAAV,CAAiBM,qBAAqB,CAACG,KAAvC,EAA8C,CAA9C,oBACKN,UAAU,CAACE,gBAAgB,CAACI,KAAlB,CADf,sBAEGG,cAAc,CAACC,QAFlB,EAE6BD,cAAc,CAACE,QAAf,EAF7B;AAKA,4CACGT,gBAAgB,CAACK,WADpB,EACkCH,WADlC,0BAEGD,qBAAqB,CAACI,WAFzB,EAEuCF,SAFvC;AAID,CA1BM","sourcesContent":["import { DraggableLocation } from 'react-beautiful-dnd';\n\ninterface DropResult {\n  [droppableId: string]: any[];\n}\n\nexport const reorder = (\n  list: [],\n  startIndex: number,\n  endIndex: number\n): Array<{}> => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nexport const move = (\n  sourceList: any[],\n  destinationList: any[],\n  dropResultSource: DraggableLocation,\n  dropResultDestination: DraggableLocation\n): DropResult => {\n  const sourceClone = [...sourceList];\n  const destClone = [...destinationList];\n  const [removed] = sourceClone.splice(dropResultSource.index, 1);\n\n  destClone.splice(dropResultDestination.index, 0, removed);\n\n  return {\n    [dropResultSource.droppableId]: sourceClone,\n    [dropResultDestination.droppableId]: destClone,\n  };\n};\n\nexport const copy = (\n  sourceList: any[],\n  destinationList: any[],\n  dropResultSource: DraggableLocation,\n  dropResultDestination: DraggableLocation,\n  /* Each EuiDraggable needs a unique ID, otherwise subsequent drag attempts on the to-be-copied\n   * element may result instead in dragging a previously created duplicate of that Draggable.\n   * `idModification` gives implementers better control over creating unique IDs when copying.\n   */\n  idModification: {\n    property: string | number;\n    modifier: () => string | number;\n  }\n): DropResult => {\n  const sourceClone = [...sourceList];\n  const destClone = [...destinationList];\n\n  destClone.splice(dropResultDestination.index, 0, {\n    ...sourceList[dropResultSource.index],\n    [idModification.property]: idModification.modifier(),\n  });\n\n  return {\n    [dropResultSource.droppableId]: sourceClone,\n    [dropResultDestination.droppableId]: destClone,\n  };\n};\n"]}]}