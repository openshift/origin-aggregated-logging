{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/form/form_row/form_row.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/form/form_row/form_row.js","mtime":1565204169727},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EuiFormRow = void 0;\n\nrequire(\"core-js/modules/es6.object.assign\");\n\nrequire(\"core-js/modules/es6.string.iterator\");\n\nrequire(\"core-js/modules/es6.array.from\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.object.set-prototype-of\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _objects = require(\"../../../services/objects\");\n\nvar _with_required_prop = require(\"../../../utils/prop_types/with_required_prop\");\n\nvar _form_help_text = require(\"../form_help_text\");\n\nvar _form_error_text = require(\"../form_error_text\");\n\nvar _form_label = require(\"../form_label\");\n\nvar _flex = require(\"../../flex\");\n\nvar _make_id = _interopRequireDefault(require(\"./make_id\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nvar EuiFormRow =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EuiFormRow, _Component);\n\n  function EuiFormRow(props) {\n    var _this;\n\n    _classCallCheck(this, EuiFormRow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EuiFormRow).call(this, props));\n    _this.state = {\n      isFocused: false,\n      id: props.id || (0, _make_id.default)()\n    };\n    _this.onFocus = _this.onFocus.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onBlur = _this.onBlur.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(EuiFormRow, [{\n    key: \"onFocus\",\n    value: function onFocus() {\n      // Doing this to allow onFocus to be called correctly from the child input element as this component overrides it\n      var onChildFocus = (0, _objects.get)(this.props, 'children.props.onFocus');\n\n      if (onChildFocus) {\n        onChildFocus.apply(void 0, arguments);\n      }\n\n      this.setState({\n        isFocused: true\n      });\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur() {\n      // Doing this to allow onBlur to be called correctly from the child input element as this component overrides it\n      var onChildBlur = (0, _objects.get)(this.props, 'children.props.onBlur');\n\n      if (onChildBlur) {\n        onChildBlur.apply(void 0, arguments);\n      }\n\n      this.setState({\n        isFocused: false\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          helpText = _this$props.helpText,\n          isInvalid = _this$props.isInvalid,\n          error = _this$props.error,\n          label = _this$props.label,\n          labelType = _this$props.labelType,\n          labelAppend = _this$props.labelAppend,\n          hasEmptyLabelSpace = _this$props.hasEmptyLabelSpace,\n          fullWidth = _this$props.fullWidth,\n          className = _this$props.className,\n          describedByIds = _this$props.describedByIds,\n          compressed = _this$props.compressed,\n          displayOnly = _this$props.displayOnly,\n          rest = _objectWithoutProperties(_this$props, [\"children\", \"helpText\", \"isInvalid\", \"error\", \"label\", \"labelType\", \"labelAppend\", \"hasEmptyLabelSpace\", \"fullWidth\", \"className\", \"describedByIds\", \"compressed\", \"displayOnly\"]);\n\n      var id = this.state.id;\n      var classes = (0, _classnames.default)('euiFormRow', {\n        'euiFormRow--hasEmptyLabelSpace': hasEmptyLabelSpace,\n        'euiFormRow--fullWidth': fullWidth,\n        'euiFormRow--compressed': compressed\n      }, className);\n      var optionalHelpText;\n\n      if (helpText) {\n        optionalHelpText = _react.default.createElement(_form_help_text.EuiFormHelpText, {\n          id: \"\".concat(id, \"-help\"),\n          className: \"euiFormRow__text\"\n        }, helpText);\n      }\n\n      var optionalErrors;\n\n      if (error && isInvalid) {\n        var errorTexts = Array.isArray(error) ? error : [error];\n        optionalErrors = errorTexts.map(function (error, i) {\n          var key = typeof error === 'string' ? error : i;\n          return _react.default.createElement(_form_error_text.EuiFormErrorText, {\n            key: key,\n            id: \"\".concat(id, \"-error-\").concat(i),\n            className: \"euiFormRow__text\"\n          }, error);\n        });\n      }\n\n      var optionalLabel;\n      var isLegend = label && labelType === 'legend' ? true : false;\n      var labelID = isLegend ? \"\".concat(id, \"-\").concat(labelType) : undefined;\n\n      if (label) {\n        optionalLabel = // Outer div ensures the label is inline-block (only takes up as much room as it needs)\n        _react.default.createElement(\"div\", null, _react.default.createElement(_form_label.EuiFormLabel, {\n          isFocused: !isLegend && this.state.isFocused,\n          isInvalid: isInvalid,\n          \"aria-invalid\": isInvalid,\n          htmlFor: !isLegend ? id : undefined,\n          type: labelType,\n          id: labelID\n        }, label));\n      }\n\n      if (labelAppend) {\n        optionalLabel = _react.default.createElement(_flex.EuiFlexGroup, {\n          responsive: false,\n          wrap: true,\n          gutterSize: \"xs\",\n          justifyContent: \"spaceBetween\"\n        }, _react.default.createElement(_flex.EuiFlexItem, {\n          grow: false\n        }, optionalLabel), _react.default.createElement(_flex.EuiFlexItem, {\n          grow: false\n        }, labelAppend));\n      }\n\n      var optionalProps = {};\n\n      var describingIds = _toConsumableArray(describedByIds);\n\n      if (optionalHelpText) {\n        describingIds.push(optionalHelpText.props.id);\n      }\n\n      if (optionalErrors) {\n        optionalErrors.forEach(function (error) {\n          return describingIds.push(error.props.id);\n        });\n      }\n\n      if (describingIds.length > 0) {\n        optionalProps['aria-describedby'] = describingIds.join(' ');\n      }\n\n      var field = (0, _react.cloneElement)(_react.Children.only(children), _objectSpread({\n        id: id,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        compressed: compressed\n      }, optionalProps));\n\n      if (displayOnly) {\n        field = _react.default.createElement(\"div\", {\n          className: \"euiFormRow__displayOnlyWrapper\"\n        }, field);\n      }\n\n      var Element = labelType === 'legend' ? 'fieldset' : 'div';\n      return _react.default.createElement(Element, _extends({\n        className: classes\n      }, rest, {\n        id: \"\".concat(id, \"-row\"),\n        \"aria-labelledby\": labelID // Only renders a string if label type is 'legend'\n\n      }), optionalLabel, field, optionalErrors, optionalHelpText);\n    }\n  }]);\n\n  return EuiFormRow;\n}(_react.Component);\n\nexports.EuiFormRow = EuiFormRow;\nEuiFormRow.propTypes = {\n  children: _propTypes.default.element.isRequired,\n  className: _propTypes.default.string,\n  label: _propTypes.default.node,\n\n  /**\n   * Sets the type of html element the label should be based\n   * on the form row contents. For instance checkbox groups\n   * should use 'legend' instead of the default 'label'\n   */\n  labelType: _propTypes.default.oneOf(['label', 'legend']),\n\n  /**\n   * Adds an extra node to the right of the form label without\n   * being contained inside the form label. Good for things\n   * like documentation links.\n   */\n  labelAppend: (0, _with_required_prop.withRequiredProp)(_propTypes.default.node, 'label', 'appending to the label requires that the label also exists'),\n  id: _propTypes.default.string,\n  isInvalid: _propTypes.default.bool,\n  error: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.arrayOf(_propTypes.default.node)]),\n  helpText: _propTypes.default.node,\n  hasEmptyLabelSpace: _propTypes.default.bool,\n  fullWidth: _propTypes.default.bool,\n\n  /**\n   * IDs of additional elements that should be part of children's `aria-describedby`\n   */\n  describedByIds: _propTypes.default.array,\n\n  /**\n   * Tightens up the spacing and sends down the\n   * compressed prop to the input\n   */\n  compressed: _propTypes.default.bool,\n\n  /**\n   * Vertically centers non-input style content so it aligns\n   * better with input style content.\n   */\n  displayOnly: _propTypes.default.bool\n};\nEuiFormRow.defaultProps = {\n  hasEmptyLabelSpace: false,\n  fullWidth: false,\n  describedByIds: [],\n  labelType: 'label'\n};\nEuiFormRow.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [{\n    \"name\": \"onFocus\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"...args\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"onBlur\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"...args\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }],\n  \"displayName\": \"EuiFormRow\",\n  \"props\": {\n    \"hasEmptyLabelSpace\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"fullWidth\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"describedByIds\": {\n      \"defaultValue\": {\n        \"value\": \"[]\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": false,\n      \"description\": \"IDs of additional elements that should be part of children's `aria-describedby`\"\n    },\n    \"labelType\": {\n      \"defaultValue\": {\n        \"value\": \"'label'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"'label'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'legend'\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Sets the type of html element the label should be based\\non the form row contents. For instance checkbox groups\\nshould use 'legend' instead of the default 'label'\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"element\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"className\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"labelAppend\": {\n      \"type\": {\n        \"name\": \"custom\",\n        \"raw\": \"withRequiredProp(\\n  PropTypes.node,\\n  'label',\\n  'appending to the label requires that the label also exists'\\n)\"\n      },\n      \"required\": false,\n      \"description\": \"Adds an extra node to the right of the form label without\\nbeing contained inside the form label. Good for things\\nlike documentation links.\"\n    },\n    \"id\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"isInvalid\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"union\",\n        \"value\": [{\n          \"name\": \"node\"\n        }, {\n          \"name\": \"arrayOf\",\n          \"value\": {\n            \"name\": \"node\"\n          }\n        }]\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"helpText\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"compressed\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Tightens up the spacing and sends down the\\ncompressed prop to the input\"\n    },\n    \"displayOnly\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Vertically centers non-input style content so it aligns\\nbetter with input style content.\"\n    }\n  }\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/form/form_row/form_row.js"],"names":["EuiFormRow","props","state","isFocused","id","onFocus","bind","onBlur","onChildFocus","setState","onChildBlur","children","helpText","isInvalid","error","label","labelType","labelAppend","hasEmptyLabelSpace","fullWidth","className","describedByIds","compressed","displayOnly","rest","classes","optionalHelpText","optionalErrors","errorTexts","Array","isArray","map","i","key","optionalLabel","isLegend","labelID","undefined","optionalProps","describingIds","push","forEach","length","join","field","Children","only","Element","Component","propTypes","PropTypes","element","isRequired","string","node","oneOf","bool","oneOfType","arrayOf","array","defaultProps"],"mappings":"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","sourcesContent":["import React, { cloneElement, Component, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport { get } from '../../../services/objects';\nimport { withRequiredProp } from '../../../utils/prop_types/with_required_prop';\n\nimport { EuiFormHelpText } from '../form_help_text';\nimport { EuiFormErrorText } from '../form_error_text';\nimport { EuiFormLabel } from '../form_label';\nimport { EuiFlexGroup, EuiFlexItem } from '../../flex';\n\nimport makeId from './make_id';\n\nexport class EuiFormRow extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isFocused: false,\n      id: props.id || makeId(),\n    };\n\n    this.onFocus = this.onFocus.bind(this);\n    this.onBlur = this.onBlur.bind(this);\n  }\n\n  onFocus(...args) {\n    // Doing this to allow onFocus to be called correctly from the child input element as this component overrides it\n    const onChildFocus = get(this.props, 'children.props.onFocus');\n    if (onChildFocus) {\n      onChildFocus(...args);\n    }\n\n    this.setState({\n      isFocused: true,\n    });\n  }\n\n  onBlur(...args) {\n    // Doing this to allow onBlur to be called correctly from the child input element as this component overrides it\n    const onChildBlur = get(this.props, 'children.props.onBlur');\n    if (onChildBlur) {\n      onChildBlur(...args);\n    }\n\n    this.setState({\n      isFocused: false,\n    });\n  }\n\n  render() {\n    const {\n      children,\n      helpText,\n      isInvalid,\n      error,\n      label,\n      labelType,\n      labelAppend,\n      hasEmptyLabelSpace,\n      fullWidth,\n      className,\n      describedByIds,\n      compressed,\n      displayOnly,\n      ...rest\n    } = this.props;\n\n    const { id } = this.state;\n\n    const classes = classNames(\n      'euiFormRow',\n      {\n        'euiFormRow--hasEmptyLabelSpace': hasEmptyLabelSpace,\n        'euiFormRow--fullWidth': fullWidth,\n        'euiFormRow--compressed': compressed,\n      },\n      className\n    );\n\n    let optionalHelpText;\n\n    if (helpText) {\n      optionalHelpText = (\n        <EuiFormHelpText id={`${id}-help`} className=\"euiFormRow__text\">\n          {helpText}\n        </EuiFormHelpText>\n      );\n    }\n\n    let optionalErrors;\n\n    if (error && isInvalid) {\n      const errorTexts = Array.isArray(error) ? error : [error];\n      optionalErrors = errorTexts.map((error, i) => {\n        const key = typeof error === 'string' ? error : i;\n        return (\n          <EuiFormErrorText\n            key={key}\n            id={`${id}-error-${i}`}\n            className=\"euiFormRow__text\">\n            {error}\n          </EuiFormErrorText>\n        );\n      });\n    }\n\n    let optionalLabel;\n    const isLegend = label && labelType === 'legend' ? true : false;\n    const labelID = isLegend ? `${id}-${labelType}` : undefined;\n\n    if (label) {\n      optionalLabel = (\n        // Outer div ensures the label is inline-block (only takes up as much room as it needs)\n        <div>\n          <EuiFormLabel\n            isFocused={!isLegend && this.state.isFocused}\n            isInvalid={isInvalid}\n            aria-invalid={isInvalid}\n            htmlFor={!isLegend ? id : undefined}\n            type={labelType}\n            id={labelID}>\n            {label}\n          </EuiFormLabel>\n        </div>\n      );\n    }\n\n    if (labelAppend) {\n      optionalLabel = (\n        <EuiFlexGroup\n          responsive={false}\n          wrap={true}\n          gutterSize=\"xs\"\n          justifyContent=\"spaceBetween\">\n          <EuiFlexItem grow={false}>{optionalLabel}</EuiFlexItem>\n          <EuiFlexItem grow={false}>{labelAppend}</EuiFlexItem>\n        </EuiFlexGroup>\n      );\n    }\n\n    const optionalProps = {};\n    const describingIds = [...describedByIds];\n\n    if (optionalHelpText) {\n      describingIds.push(optionalHelpText.props.id);\n    }\n\n    if (optionalErrors) {\n      optionalErrors.forEach(error => describingIds.push(error.props.id));\n    }\n\n    if (describingIds.length > 0) {\n      optionalProps['aria-describedby'] = describingIds.join(' ');\n    }\n\n    let field = cloneElement(Children.only(children), {\n      id,\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      compressed: compressed,\n      ...optionalProps,\n    });\n\n    if (displayOnly) {\n      field = <div className=\"euiFormRow__displayOnlyWrapper\">{field}</div>;\n    }\n\n    const Element = labelType === 'legend' ? 'fieldset' : 'div';\n\n    return (\n      <Element\n        className={classes}\n        {...rest}\n        id={`${id}-row`}\n        aria-labelledby={labelID} // Only renders a string if label type is 'legend'\n      >\n        {optionalLabel}\n        {field}\n        {optionalErrors}\n        {optionalHelpText}\n      </Element>\n    );\n  }\n}\n\nEuiFormRow.propTypes = {\n  children: PropTypes.element.isRequired,\n  className: PropTypes.string,\n  label: PropTypes.node,\n  /**\n   * Sets the type of html element the label should be based\n   * on the form row contents. For instance checkbox groups\n   * should use 'legend' instead of the default 'label'\n   */\n  labelType: PropTypes.oneOf(['label', 'legend']),\n  /**\n   * Adds an extra node to the right of the form label without\n   * being contained inside the form label. Good for things\n   * like documentation links.\n   */\n  labelAppend: withRequiredProp(\n    PropTypes.node,\n    'label',\n    'appending to the label requires that the label also exists'\n  ),\n  id: PropTypes.string,\n  isInvalid: PropTypes.bool,\n  error: PropTypes.oneOfType([\n    PropTypes.node,\n    PropTypes.arrayOf(PropTypes.node),\n  ]),\n  helpText: PropTypes.node,\n  hasEmptyLabelSpace: PropTypes.bool,\n  fullWidth: PropTypes.bool,\n  /**\n   * IDs of additional elements that should be part of children's `aria-describedby`\n   */\n  describedByIds: PropTypes.array,\n  /**\n   * Tightens up the spacing and sends down the\n   * compressed prop to the input\n   */\n  compressed: PropTypes.bool,\n  /**\n   * Vertically centers non-input style content so it aligns\n   * better with input style content.\n   */\n  displayOnly: PropTypes.bool,\n};\n\nEuiFormRow.defaultProps = {\n  hasEmptyLabelSpace: false,\n  fullWidth: false,\n  describedByIds: [],\n  labelType: 'label',\n};\n"]}]}