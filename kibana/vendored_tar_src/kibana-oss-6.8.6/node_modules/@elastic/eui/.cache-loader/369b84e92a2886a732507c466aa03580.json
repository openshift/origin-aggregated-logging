{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src-docs/src/views/tool_tip/tool_tip_example.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src-docs/src/views/tool_tip/tool_tip_example.js","mtime":1565204169573},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ToolTipExample = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _services = require(\"../../services\");\n\nvar _components = require(\"../../components\");\n\nvar _components2 = require(\"../../../../src/components\");\n\nvar _tool_tip = _interopRequireDefault(require(\"./tool_tip\"));\n\nvar _icon_tip = _interopRequireDefault(require(\"./icon_tip\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nvar toolTipSource = require('!!raw-loader!./tool_tip');\n\nvar toolTipHtml = (0, _services.renderToHtml)(_tool_tip.default);\n\nvar infoTipSource = require('!!raw-loader!./icon_tip');\n\nvar infoTipHtml = (0, _services.renderToHtml)(_icon_tip.default);\nvar ToolTipExample = {\n  title: 'ToolTip',\n  intro: _react.default.createElement(_react.Fragment, null, _react.default.createElement(_components2.EuiCallOut, {\n    title: \"EuiToolTip only applies to inline elements\"\n  }, _react.default.createElement(\"p\", null, \"EuiToolTip wraps its children in a span element, so if you pass in a block-level child (e.g. a div) the resulting DOM will be in violation of the HTML5 spec.\")), _react.default.createElement(_components2.EuiSpacer, {\n    size: \"l\"\n  }), _react.default.createElement(_components2.EuiText, null, \"Wrap \", _react.default.createElement(_components2.EuiCode, null, \"EuiToolTip\"), \" around any item that you need a tooltip for. The \", _react.default.createElement(_components2.EuiCode, null, \"position\"), \" prop will take a suggested position, but will change it if the tooltip gets too close to the edge of the screen. You can use the \", _react.default.createElement(_components2.EuiCode, null, \"clickOnly\"), \" prop to tell the tooltip to only appear on click rather than on hover.\"), _react.default.createElement(_components2.EuiSpacer, {\n    size: \"l\"\n  }), _react.default.createElement(_components2.EuiTitle, {\n    size: \"xs\"\n  }, _react.default.createElement(\"h2\", null, \"Applying tooltips to custom components\")), _react.default.createElement(_components2.EuiSpacer, {\n    size: \"s\"\n  }), _react.default.createElement(_components2.EuiText, null, \"Internally, \", _react.default.createElement(\"code\", null, \"EuiToolTip\"), \" applies \", _react.default.createElement(\"code\", null, \"onFocus\"), \",\", ' ', _react.default.createElement(\"code\", null, \"onBlur\"), \", \", _react.default.createElement(\"code\", null, \"onMouseOver\"), \", and\", ' ', _react.default.createElement(\"code\", null, \"onMouseOut\"), \" props to whatever you pass as\", ' ', _react.default.createElement(\"code\", null, \"children\"), \". If you pass in a custom component, then you\\u2019ll need to make sure these props are applied to the root element rendered by your component. The best way to do that is to follow\", ' ', _react.default.createElement(\"a\", {\n    href: \"https://github.com/elastic/eui/blob/master/wiki/component-design.md#pass-through-props\"\n  }, \"EUI\\u2019s guidelines on pass-through props\"), \".\"), _react.default.createElement(_components2.EuiSpacer, {\n    size: \"l\"\n  })),\n  sections: [{\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: toolTipSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: toolTipHtml\n    }],\n    props: {\n      EuiToolTip: _components2.EuiToolTip\n    },\n    demo: _react.default.createElement(_tool_tip.default, null)\n  }, {\n    title: 'IconTip',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: infoTipSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: infoTipHtml\n    }],\n    text: _react.default.createElement(_react.Fragment, null, _react.default.createElement(\"p\", null, \"You can use \", _react.default.createElement(_components2.EuiCode, null, \"EuiIconTip\"), \" to explain options, other controls, or entire parts of the user interface. When possible, surface explanations inline within the UI, and only hide them behind a \", _react.default.createElement(_components2.EuiCode, null, \"EuiIconTip\"), \" as a last resort.\"), _react.default.createElement(\"p\", null, \"It accepts all the same props as \", _react.default.createElement(_components2.EuiCode, null, \"EuiToolTip\"), \". For convenience, you can also specify optional icon\", ' ', _react.default.createElement(_components2.EuiCode, null, \"size\"), \", \", _react.default.createElement(_components2.EuiCode, null, \"type\"), \", and\", _react.default.createElement(_components2.EuiCode, null, \"color\"), \" props.\")),\n    props: {\n      EuiToolTip: _components2.EuiToolTip,\n      EuiIconTip: _components2.EuiIconTip\n    },\n    demo: _react.default.createElement(_icon_tip.default, null)\n  }]\n};\nexports.ToolTipExample = ToolTipExample;",{"version":3,"sources":["/Users/chanderprall/projects/eui/src-docs/src/views/tool_tip/tool_tip_example.js"],"names":["toolTipSource","require","toolTipHtml","ToolTip","infoTipSource","infoTipHtml","IconTip","ToolTipExample","title","intro","sections","source","type","GuideSectionTypes","JS","code","HTML","props","EuiToolTip","demo","text","EuiIconTip"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;;AAEA;;AAUA;;AAIA;;;;;;AAHA,IAAMA,aAAa,GAAGC,OAAO,CAAC,yBAAD,CAA7B;;AACA,IAAMC,WAAW,GAAG,4BAAaC,iBAAb,CAApB;;AAGA,IAAMC,aAAa,GAAGH,OAAO,CAAC,yBAAD,CAA7B;;AACA,IAAMI,WAAW,GAAG,4BAAaC,iBAAb,CAApB;AAEO,IAAMC,cAAc,GAAG;AAC5BC,EAAAA,KAAK,EAAE,SADqB;AAE5BC,EAAAA,KAAK,EACH,6BAAC,eAAD,QACE,6BAAC,uBAAD;AAAY,IAAA,KAAK,EAAC;AAAlB,KACE,wMADF,CADF,EASE,6BAAC,sBAAD;AAAW,IAAA,IAAI,EAAC;AAAhB,IATF,EAWE,6BAAC,oBAAD,iBACO,6BAAC,oBAAD,qBADP,wDAEmB,6BAAC,oBAAD,mBAFnB,wIAIiC,6BAAC,oBAAD,oBAJjC,4EAXF,EAmBE,6BAAC,sBAAD;AAAW,IAAA,IAAI,EAAC;AAAhB,IAnBF,EAqBE,6BAAC,qBAAD;AAAU,IAAA,IAAI,EAAC;AAAf,KACE,kFADF,CArBF,EAyBE,6BAAC,sBAAD;AAAW,IAAA,IAAI,EAAC;AAAhB,IAzBF,EA2BE,6BAAC,oBAAD,wBACc,wDADd,eAC8C,qDAD9C,OACoE,GADpE,EAEE,oDAFF,QAEuB,yDAFvB,WAEqD,GAFrD,EAGE,wDAHF,oCAGwD,GAHxD,EAIE,sDAJF,0LAM2E,GAN3E,EAOE;AAAG,IAAA,IAAI,EAAC;AAAR,mDAPF,MA3BF,EAwCE,6BAAC,sBAAD;AAAW,IAAA,IAAI,EAAC;AAAhB,IAxCF,CAH0B;AA8C5BC,EAAAA,QAAQ,EAAE,CACR;AACEC,IAAAA,MAAM,EAAE,CACN;AACEC,MAAAA,IAAI,EAAEC,8BAAkBC,EAD1B;AAEEC,MAAAA,IAAI,EAAEf;AAFR,KADM,EAKN;AACEY,MAAAA,IAAI,EAAEC,8BAAkBG,IAD1B;AAEED,MAAAA,IAAI,EAAEb;AAFR,KALM,CADV;AAWEe,IAAAA,KAAK,EAAE;AAAEC,MAAAA,UAAU,EAAVA;AAAF,KAXT;AAYEC,IAAAA,IAAI,EAAE,6BAAC,iBAAD;AAZR,GADQ,EAeR;AACEX,IAAAA,KAAK,EAAE,SADT;AAEEG,IAAAA,MAAM,EAAE,CACN;AACEC,MAAAA,IAAI,EAAEC,8BAAkBC,EAD1B;AAEEC,MAAAA,IAAI,EAAEX;AAFR,KADM,EAKN;AACEQ,MAAAA,IAAI,EAAEC,8BAAkBG,IAD1B;AAEED,MAAAA,IAAI,EAAEV;AAFR,KALM,CAFV;AAYEe,IAAAA,IAAI,EACF,6BAAC,eAAD,QACE,wDACc,6BAAC,oBAAD,qBADd,wKAII,6BAAC,oBAAD,qBAJJ,uBADF,EAOE,6EACmC,6BAAC,oBAAD,qBADnC,2DAEkD,GAFlD,EAGE,6BAAC,oBAAD,eAHF,QAG2B,6BAAC,oBAAD,eAH3B,WAIE,6BAAC,oBAAD,gBAJF,YAPF,CAbJ;AA4BEH,IAAAA,KAAK,EAAE;AAAEC,MAAAA,UAAU,EAAVA,uBAAF;AAAcG,MAAAA,UAAU,EAAVA;AAAd,KA5BT;AA6BEF,IAAAA,IAAI,EAAE,6BAAC,iBAAD;AA7BR,GAfQ;AA9CkB,CAAvB","sourcesContent":["import React, { Fragment } from 'react';\n\nimport { renderToHtml } from '../../services';\n\nimport { GuideSectionTypes } from '../../components';\n\nimport {\n  EuiCallOut,\n  EuiCode,\n  EuiToolTip,\n  EuiIconTip,\n  EuiSpacer,\n  EuiText,\n  EuiTitle,\n} from '../../../../src/components';\n\nimport ToolTip from './tool_tip';\nconst toolTipSource = require('!!raw-loader!./tool_tip');\nconst toolTipHtml = renderToHtml(ToolTip);\n\nimport IconTip from './icon_tip';\nconst infoTipSource = require('!!raw-loader!./icon_tip');\nconst infoTipHtml = renderToHtml(IconTip);\n\nexport const ToolTipExample = {\n  title: 'ToolTip',\n  intro: (\n    <Fragment>\n      <EuiCallOut title=\"EuiToolTip only applies to inline elements\">\n        <p>\n          EuiToolTip wraps its children in a span element, so if you pass in a\n          block-level child (e.g. a div) the resulting DOM will be in violation\n          of the HTML5 spec.\n        </p>\n      </EuiCallOut>\n\n      <EuiSpacer size=\"l\" />\n\n      <EuiText>\n        Wrap <EuiCode>EuiToolTip</EuiCode> around any item that you need a\n        tooltip for. The <EuiCode>position</EuiCode> prop will take a suggested\n        position, but will change it if the tooltip gets too close to the edge\n        of the screen. You can use the <EuiCode>clickOnly</EuiCode> prop to tell\n        the tooltip to only appear on click rather than on hover.\n      </EuiText>\n\n      <EuiSpacer size=\"l\" />\n\n      <EuiTitle size=\"xs\">\n        <h2>Applying tooltips to custom components</h2>\n      </EuiTitle>\n\n      <EuiSpacer size=\"s\" />\n\n      <EuiText>\n        Internally, <code>EuiToolTip</code> applies <code>onFocus</code>,{' '}\n        <code>onBlur</code>, <code>onMouseOver</code>, and{' '}\n        <code>onMouseOut</code> props to whatever you pass as{' '}\n        <code>children</code>. If you pass in a custom component, then\n        you&rsquo;ll need to make sure these props are applied to the root\n        element rendered by your component. The best way to do that is to follow{' '}\n        <a href=\"https://github.com/elastic/eui/blob/master/wiki/component-design.md#pass-through-props\">\n          EUI&rsquo;s guidelines on pass-through props\n        </a>\n        .\n      </EuiText>\n\n      <EuiSpacer size=\"l\" />\n    </Fragment>\n  ),\n  sections: [\n    {\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: toolTipSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: toolTipHtml,\n        },\n      ],\n      props: { EuiToolTip },\n      demo: <ToolTip />,\n    },\n    {\n      title: 'IconTip',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: infoTipSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: infoTipHtml,\n        },\n      ],\n      text: (\n        <Fragment>\n          <p>\n            You can use <EuiCode>EuiIconTip</EuiCode> to explain options, other\n            controls, or entire parts of the user interface. When possible,\n            surface explanations inline within the UI, and only hide them behind\n            a <EuiCode>EuiIconTip</EuiCode> as a last resort.\n          </p>\n          <p>\n            It accepts all the same props as <EuiCode>EuiToolTip</EuiCode>. For\n            convenience, you can also specify optional icon{' '}\n            <EuiCode>size</EuiCode>, <EuiCode>type</EuiCode>, and\n            <EuiCode>color</EuiCode> props.\n          </p>\n        </Fragment>\n      ),\n      props: { EuiToolTip, EuiIconTip },\n      demo: <IconTip />,\n    },\n  ],\n};\n"]}]}