{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/button/button_group/button_group.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/button/button_group/button_group.js","mtime":1567534071238},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EuiButtonGroup = void 0;\n\nrequire(\"core-js/modules/es6.object.assign\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _accessibility = require(\"../../accessibility\");\n\nvar _button_toggle = require(\"../button_toggle\");\n\nvar _toggle = require(\"../../toggle\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nvar EuiButtonGroup = function EuiButtonGroup(_ref) {\n  var className = _ref.className,\n      buttonSize = _ref.buttonSize,\n      color = _ref.color,\n      idSelected = _ref.idSelected,\n      idToSelectedMap = _ref.idToSelectedMap,\n      isDisabled = _ref.isDisabled,\n      isFullWidth = _ref.isFullWidth,\n      isIconOnly = _ref.isIconOnly,\n      name = _ref.name,\n      legend = _ref.legend,\n      _onChange = _ref.onChange,\n      options = _ref.options,\n      type = _ref.type,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"buttonSize\", \"color\", \"idSelected\", \"idToSelectedMap\", \"isDisabled\", \"isFullWidth\", \"isIconOnly\", \"name\", \"legend\", \"onChange\", \"options\", \"type\"]);\n\n  var classes = (0, _classnames.default)('euiButtonGroup', {\n    'euiButtonGroup--fullWidth': isFullWidth\n  }, className);\n  var legendNode;\n\n  if (legend) {\n    legendNode = _react.default.createElement(_accessibility.EuiScreenReaderOnly, null, _react.default.createElement(\"legend\", null, legend));\n  }\n\n  return _react.default.createElement(\"fieldset\", null, legendNode, _react.default.createElement(\"div\", _extends({\n    className: classes\n  }, rest), options.map(function (option, index) {\n    var isSelectedState;\n\n    if (type === 'multi') {\n      isSelectedState = idToSelectedMap[option.id] || false;\n    } else {\n      isSelectedState = option.id === idSelected;\n    }\n\n    return _react.default.createElement(_button_toggle.EuiButtonToggle, {\n      className: \"euiButtonGroup__button\",\n      color: color,\n      fill: isSelectedState,\n      iconSide: option.iconSide,\n      iconType: option.iconType,\n      id: option.id,\n      isDisabled: isDisabled || option.isDisabled,\n      isIconOnly: isIconOnly,\n      isSelected: isSelectedState,\n      key: index,\n      label: option.label,\n      name: option.name || name,\n      onChange: function onChange() {\n        return _onChange(option.id, option.value);\n      },\n      size: buttonSize,\n      toggleClassName: \"euiButtonGroup__toggle\",\n      type: type,\n      value: option.value\n    });\n  })));\n};\n\nexports.EuiButtonGroup = EuiButtonGroup;\nEuiButtonGroup.propTypes = {\n  options: _propTypes.default.arrayOf(_propTypes.default.shape({\n    id: _propTypes.default.string.isRequired,\n    label: _propTypes.default.string.isRequired,\n    isDisabled: _propTypes.default.bool\n  })).isRequired,\n  onChange: _propTypes.default.func.isRequired,\n\n  /**\n   * See `EuiButton`\n   */\n  color: _propTypes.default.string,\n\n  /**\n   * Most button groups should be the small button size,\n   * but if you NEED to bump it to regular, change this to 'm'\n   */\n  buttonSize: _propTypes.default.string,\n\n  /**\n   * Hides the label from the button content and only displays the icon\n   */\n  isIconOnly: _propTypes.default.bool,\n  isDisabled: _propTypes.default.bool,\n\n  /**\n   * Makes the whole group 100% of its parent\n   */\n  isFullWidth: _propTypes.default.bool,\n\n  /**\n   * Can only a \"single\" option be selected or \"multi\"ple?\n   */\n  type: _propTypes.default.oneOf(_toggle.TOGGLE_TYPES),\n\n  /**\n   * Id of selected option for `type=\"single\"`\n   */\n  idSelected: _propTypes.default.string,\n\n  /**\n   * Map of ids of selected options for `type=\"multi\"`\n   */\n  idToSelectedMap: _propTypes.default.objectOf(_propTypes.default.bool),\n\n  /**\n   * Adds a hidden legend to the group for accessiblity\n   */\n  legend: _propTypes.default.string\n};\nEuiButtonGroup.defaultProps = {\n  buttonSize: 's',\n  color: 'text',\n  idToSelectedMap: {},\n  options: [],\n  type: 'single'\n};\nEuiButtonGroup.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"EuiButtonGroup\",\n  \"props\": {\n    \"buttonSize\": {\n      \"defaultValue\": {\n        \"value\": \"'s'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Most button groups should be the small button size,\\nbut if you NEED to bump it to regular, change this to 'm'\"\n    },\n    \"color\": {\n      \"defaultValue\": {\n        \"value\": \"'text'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"See `EuiButton`\"\n    },\n    \"idToSelectedMap\": {\n      \"defaultValue\": {\n        \"value\": \"{}\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"objectOf\",\n        \"value\": {\n          \"name\": \"bool\"\n        }\n      },\n      \"required\": false,\n      \"description\": \"Map of ids of selected options for `type=\\\"multi\\\"`\"\n    },\n    \"options\": {\n      \"defaultValue\": {\n        \"value\": \"[]\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"arrayOf\",\n        \"value\": {\n          \"name\": \"shape\",\n          \"value\": {\n            \"id\": {\n              \"name\": \"string\",\n              \"required\": true\n            },\n            \"label\": {\n              \"name\": \"string\",\n              \"required\": true\n            },\n            \"isDisabled\": {\n              \"name\": \"bool\",\n              \"required\": false\n            }\n          }\n        }\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"type\": {\n      \"defaultValue\": {\n        \"value\": \"'single'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"enum\",\n        \"computed\": true,\n        \"value\": \"TOGGLE_TYPES\"\n      },\n      \"required\": false,\n      \"description\": \"Can only a \\\"single\\\" option be selected or \\\"multi\\\"ple?\"\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"isIconOnly\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Hides the label from the button content and only displays the icon\"\n    },\n    \"isDisabled\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"isFullWidth\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Makes the whole group 100% of its parent\"\n    },\n    \"idSelected\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Id of selected option for `type=\\\"single\\\"`\"\n    },\n    \"legend\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Adds a hidden legend to the group for accessiblity\"\n    }\n  }\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/button/button_group/button_group.js"],"names":["EuiButtonGroup","className","buttonSize","color","idSelected","idToSelectedMap","isDisabled","isFullWidth","isIconOnly","name","legend","onChange","options","type","rest","classes","legendNode","map","option","index","isSelectedState","id","iconSide","iconType","label","value","propTypes","PropTypes","arrayOf","shape","string","isRequired","bool","func","oneOf","TOGGLE_TYPES","objectOf","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport { EuiScreenReaderOnly } from '../../accessibility';\nimport { EuiButtonToggle } from '../button_toggle';\nimport { TOGGLE_TYPES } from '../../toggle';\n\nexport const EuiButtonGroup = ({\n  className,\n  buttonSize,\n  color,\n  idSelected,\n  idToSelectedMap,\n  isDisabled,\n  isFullWidth,\n  isIconOnly,\n  name,\n  legend,\n  onChange,\n  options,\n  type,\n  ...rest\n}) => {\n  const classes = classNames(\n    'euiButtonGroup',\n    {\n      'euiButtonGroup--fullWidth': isFullWidth,\n    },\n    className\n  );\n\n  let legendNode;\n  if (legend) {\n    legendNode = (\n      <EuiScreenReaderOnly>\n        <legend>{legend}</legend>\n      </EuiScreenReaderOnly>\n    );\n  }\n\n  return (\n    <fieldset>\n      {legendNode}\n\n      <div className={classes} {...rest}>\n        {options.map((option, index) => {\n          let isSelectedState;\n          if (type === 'multi') {\n            isSelectedState = idToSelectedMap[option.id] || false;\n          } else {\n            isSelectedState = option.id === idSelected;\n          }\n\n          return (\n            <EuiButtonToggle\n              className=\"euiButtonGroup__button\"\n              color={color}\n              fill={isSelectedState}\n              iconSide={option.iconSide}\n              iconType={option.iconType}\n              id={option.id}\n              isDisabled={isDisabled || option.isDisabled}\n              isIconOnly={isIconOnly}\n              isSelected={isSelectedState}\n              key={index}\n              label={option.label}\n              name={option.name || name}\n              onChange={() => onChange(option.id, option.value)}\n              size={buttonSize}\n              toggleClassName=\"euiButtonGroup__toggle\"\n              type={type}\n              value={option.value}\n            />\n          );\n        })}\n      </div>\n    </fieldset>\n  );\n};\n\nEuiButtonGroup.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      label: PropTypes.string.isRequired,\n      isDisabled: PropTypes.bool,\n    })\n  ).isRequired,\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * See `EuiButton`\n   */\n  color: PropTypes.string,\n\n  /**\n   * Most button groups should be the small button size,\n   * but if you NEED to bump it to regular, change this to 'm'\n   */\n  buttonSize: PropTypes.string,\n\n  /**\n   * Hides the label from the button content and only displays the icon\n   */\n  isIconOnly: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n\n  /**\n   * Makes the whole group 100% of its parent\n   */\n  isFullWidth: PropTypes.bool,\n\n  /**\n   * Can only a \"single\" option be selected or \"multi\"ple?\n   */\n  type: PropTypes.oneOf(TOGGLE_TYPES),\n\n  /**\n   * Id of selected option for `type=\"single\"`\n   */\n  idSelected: PropTypes.string,\n\n  /**\n   * Map of ids of selected options for `type=\"multi\"`\n   */\n  idToSelectedMap: PropTypes.objectOf(PropTypes.bool),\n\n  /**\n   * Adds a hidden legend to the group for accessiblity\n   */\n  legend: PropTypes.string,\n};\n\nEuiButtonGroup.defaultProps = {\n  buttonSize: 's',\n  color: 'text',\n  idToSelectedMap: {},\n  options: [],\n  type: 'single',\n};\n"]}]}