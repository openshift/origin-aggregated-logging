{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src-docs/src/views/button/button_example.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src-docs/src/views/button/button_example.js","mtime":1565204169436},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ButtonExample = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactRouter = require(\"react-router\");\n\nvar _services = require(\"../../services\");\n\nvar _components = require(\"../../components\");\n\nvar _components2 = require(\"../../../../src/components\");\n\nvar _button = _interopRequireDefault(require(\"./button\"));\n\nvar _button_with_icon = _interopRequireDefault(require(\"./button_with_icon\"));\n\nvar _button_empty = _interopRequireDefault(require(\"./button_empty\"));\n\nvar _button_empty_flush = _interopRequireDefault(require(\"./button_empty_flush\"));\n\nvar _button_icon = _interopRequireDefault(require(\"./button_icon\"));\n\nvar _button_ghost = _interopRequireDefault(require(\"./button_ghost\"));\n\nvar _button_as_link = _interopRequireDefault(require(\"./button_as_link\"));\n\nvar _button_loading = _interopRequireDefault(require(\"./button_loading\"));\n\nvar _button_toggle = _interopRequireDefault(require(\"./button_toggle\"));\n\nvar _button_group = _interopRequireDefault(require(\"./button_group\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar buttonSource = require('!!raw-loader!./button');\n\nvar buttonHtml = (0, _services.renderToHtml)(_button.default);\nvar buttonSnippet = [\"<EuiButton><!-- Primary button --></EuiButton>\\n\", \"<EuiButton fill><!-- Filled button --></EuiButton>\\n\", \"<EuiButton size=\\\"s\\\"><!-- Small button --></EuiButton>\\n\", \"<EuiButton size=\\\"s\\\" fill><!-- Small and filled button --></EuiButton>\\n\"];\n\nvar buttonWithIconSource = require('!!raw-loader!./button_with_icon');\n\nvar buttonWithIconHtml = (0, _services.renderToHtml)(_button.default);\nvar buttonWithIconSnippet = \"<EuiButton iconType={icon}><!-- Button text --></EuiButton>\\n\";\n\nvar buttonOptionSource = require('!!raw-loader!./button_empty');\n\nvar buttonOptionHtml = (0, _services.renderToHtml)(_button_empty.default);\nvar buttonOptionSnippet = \"<EuiButtonEmpty>\\n  <!-- Button text -->\\n</EuiButtonEmpty>\";\n\nvar buttonOptionFlushSource = require('!!raw-loader!./button_empty_flush');\n\nvar buttonOptionFlushHtml = (0, _services.renderToHtml)(_button_empty_flush.default);\nvar buttonOptionFlushSnippet = \"<EuiButtonEmpty flush=\\\"left\\\"><!-- Button text --></EuiButtonEmpty>\\n\";\n\nvar buttonIconSource = require('!!raw-loader!./button_icon');\n\nvar buttonIconHtml = (0, _services.renderToHtml)(_button_icon.default);\nvar buttonIconSnippet = \"<EuiButtonIcon\\n  iconType={icon}\\n/>\";\n\nvar buttonGhostSource = require('!!raw-loader!./button_ghost');\n\nvar buttonGhostHtml = (0, _services.renderToHtml)(_button_ghost.default);\nvar buttonGhostSnippet = \"<EuiButton color=\\\"ghost\\\">\\n  <!-- Button text -->\\n</EuiButton>\";\n\nvar buttonAsLinkSource = require('!!raw-loader!./button_as_link');\n\nvar buttonAsLinkHtml = (0, _services.renderToHtml)(_button_as_link.default);\nvar buttonAsLinkSnippet = \"<EuiButton href={someUrl}><!-- Button text --></EuiButton>\\n\";\n\nvar buttonLoadingSource = require('!!raw-loader!./button_loading');\n\nvar buttonLoadingHtml = (0, _services.renderToHtml)(_button_loading.default);\nvar buttonLoadingSnippet = \"<EuiButton isLoading={true}>\\n  <!-- Button text -->\\n</EuiButton>\";\n\nvar buttonToggleSource = require('!!raw-loader!./button_toggle');\n\nvar buttonToggleHtml = (0, _services.renderToHtml)(_button_toggle.default);\nvar buttonToggleSnippet = \"<EuiButtonToggle\\n  label={label}\\n  iconType={this.state.toggleOn ? onIcon : offIcon}\\n  onChange={this.onToggleChange}\\n  isSelected={this.state.toggleOn}\\n/>\";\n\nvar buttonGroupSource = require('!!raw-loader!./button_group');\n\nvar buttonGroupHtml = (0, _services.renderToHtml)(_button_group.default);\nvar buttonGroupSnippet = [\"<EuiButtonGroup\\n  legend={legend}\\n  options={this.toggleButtons}\\n  idSelected={this.state.toggleIdSelected}\\n  onChange={this.onChange}\\n/>\", \"<EuiButtonGroup\\n  legend={legend}\\n  options={this.toggleButtonsIconsMulti}\\n  idToSelectedMap={this.state.toggleIconIdToSelectedMap}\\n  onChange={this.onChangeIconsMulti}\\n  type=\\\"multi\\\"\\n  isIconOnly\\n/>\"];\nvar ButtonExample = {\n  title: 'Button',\n  sections: [{\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: buttonSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: buttonHtml\n    }],\n    props: {\n      EuiButton: _components2.EuiButton\n    },\n    snippet: buttonSnippet,\n    demo: _react.default.createElement(_button.default, null)\n  }, {\n    title: 'Buttons can also be links',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: buttonAsLinkSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: buttonAsLinkHtml\n    }],\n    text: _react.default.createElement(\"p\", null, \"Buttons will use an \", _react.default.createElement(_components2.EuiCode, null, '<a>'), \" tag if there is a\", ' ', _react.default.createElement(_components2.EuiCode, null, \"href\"), \" prop present.\"),\n    snippet: buttonAsLinkSnippet,\n    demo: _react.default.createElement(_button_as_link.default, null)\n  }, {\n    title: 'Button with Icon',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: buttonWithIconSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: buttonWithIconHtml\n    }],\n    text: _react.default.createElement(\"p\", null, \"The passed icon needs to come from our list of svg icons. Can be flipped\", ' ', ' ', \"to the other side by passing\", ' ', _react.default.createElement(_components2.EuiCode, null, \"iconSide=\\\"right\\\"\"), \".\"),\n    snippet: buttonWithIconSnippet,\n    demo: _react.default.createElement(_button_with_icon.default, null)\n  }, {\n    title: 'Loading state',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: buttonLoadingSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: buttonLoadingHtml\n    }],\n    text: _react.default.createElement(\"p\", null, \"Setting the \", _react.default.createElement(_components2.EuiCode, null, \"isLoading\"), \" prop to true will add the loading spinner or swap the existing icon for the loading spinner and set the button to disabled. It is good practice to also rename the button to \\\"Loading\\u2026\\\".\"),\n    snippet: buttonLoadingSnippet,\n    demo: _react.default.createElement(_button_loading.default, null)\n  }, {\n    title: 'ButtonEmpty',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: buttonOptionSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: buttonOptionHtml\n    }],\n    text: _react.default.createElement(\"p\", null, _react.default.createElement(_components2.EuiCode, null, \"EuiButtonEmpty\"), \" is used when you want to make a button look like a regular link, but still want to align it to the rest of the buttons.\"),\n    props: {\n      EuiButtonEmpty: _components2.EuiButtonEmpty\n    },\n    snippet: buttonOptionSnippet,\n    demo: _react.default.createElement(_button_empty.default, null)\n  }, {\n    title: 'Flush ButtonEmpty',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: buttonOptionFlushSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: buttonOptionFlushHtml\n    }],\n    text: _react.default.createElement(\"p\", null, \"When aligning \", _react.default.createElement(_components2.EuiCode, null, \"EuiButtonEmpty\"), \" components to the left or the right, you should make sure they\\u2019re flush with the edge of their container, so that they\\u2019re horizontally aligned with the other content in the container.\"),\n    snippet: buttonOptionFlushSnippet,\n    demo: _react.default.createElement(_button_empty_flush.default, null)\n  }, {\n    title: 'Button Icon',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: buttonIconSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: buttonIconHtml\n    }],\n    text: _react.default.createElement(\"p\", null, \"Button icons are buttons that only contain an icon (no text).\"),\n    props: {\n      EuiButtonIcon: _components2.EuiButtonIcon\n    },\n    snippet: buttonIconSnippet,\n    demo: _react.default.createElement(_button_icon.default, null)\n  }, {\n    title: 'Toggle buttons',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: buttonToggleSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: buttonToggleHtml\n    }],\n    text: _react.default.createElement(\"div\", null, _react.default.createElement(\"p\", null, \"This is a specialized component that combines\", ' ', _react.default.createElement(_components2.EuiCode, null, \"EuiButton\"), \" and \", _react.default.createElement(_components2.EuiCode, null, \"EuiToggle\"), \" to create a button with an on/off state. You can pass all the same parameters to it as you can to \", _react.default.createElement(_components2.EuiCode, null, \"EuiButton\"), \". The main difference is that, it does not accept any children, but a\", ' ', _react.default.createElement(_components2.EuiCode, null, \"label\"), \" prop instead. This is for the handling of accessibility with the \", _react.default.createElement(_components2.EuiCode, null, \"EuiToggle\"), \".\"), _react.default.createElement(\"p\", null, \"The \", _react.default.createElement(_components2.EuiCode, null, \"EuiButtonToggle\"), \" does not have any inherit visual state differences. These you must apply in your implementation.\")),\n    demo: _react.default.createElement(_button_toggle.default, null),\n    snippet: buttonToggleSnippet,\n    props: {\n      EuiButtonToggle: _components2.EuiButtonToggle\n    }\n  }, {\n    title: 'Groups',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: buttonGroupSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: buttonGroupHtml\n    }],\n    text: _react.default.createElement(\"div\", null, _react.default.createElement(\"p\", null, \"Button groups are handled similarly to the way checkbox and radio groups are handled but made to look like buttons. They group multiple \", _react.default.createElement(_components2.EuiCode, null, \"EuiButtonToggle\"), \"s and utilize the\", ' ', _react.default.createElement(_components2.EuiCode, null, \"type=\\\"single\\\"\"), \" or\", ' ', _react.default.createElement(_components2.EuiCode, null, \"\\\"multi\\\"\"), \" prop to determine whether multiple or only single selections are allowed per group.\"), _react.default.createElement(\"p\", null, \"Stylistically, all button groups are the size of small buttons, do not stretch to fill the container, and typically should only be\", ' ', _react.default.createElement(_components2.EuiCode, null, \"color=\\\"text\\\"\"), \" (default) or\", ' ', _react.default.createElement(_components2.EuiCode, null, \"\\\"primary\\\"\"), \". If you're just displaying a group of icons, add the prop\", ' ', _react.default.createElement(_components2.EuiCode, null, \"isIconOnly\"), \".\"), _react.default.createElement(_components2.EuiCallOut, {\n      title: \"Accessibility\"\n    }, _react.default.createElement(\"p\", null, \"In order for groups to be properly read as groups with a title, add the \", _react.default.createElement(_components2.EuiCode, null, \"legend\"), \" prop. This is only for accessibility, however, so it will be visibly hidden.\"))),\n    demo: _react.default.createElement(_button_group.default, null),\n    snippet: buttonGroupSnippet,\n    props: {\n      EuiButtonGroup: _components2.EuiButtonGroup\n    }\n  }, {\n    title: 'Ghost',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: buttonGhostSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: buttonGhostHtml\n    }],\n    text: _react.default.createElement(\"p\", null, \"For buttons on dark color backgrounds, you can pass\", ' ', _react.default.createElement(_components2.EuiCode, null, \"color='ghost'\"), \" to any of the button styles on this page. These should be used extremely rarely, and are only for placing buttons on top of dark or image-based backgrounds. A good example of their use is in the\", ' ', _react.default.createElement(_reactRouter.Link, {\n      to: \"/layout/bottom-bar\"\n    }, \"EuiBottomBar\"), \" component.\"),\n    snippet: buttonGhostSnippet,\n    demo: _react.default.createElement(_button_ghost.default, null)\n  }]\n};\nexports.ButtonExample = ButtonExample;",{"version":3,"sources":["/Users/chanderprall/projects/eui/src-docs/src/views/button/button_example.js"],"names":["buttonSource","require","buttonHtml","Button","buttonSnippet","buttonWithIconSource","buttonWithIconHtml","buttonWithIconSnippet","buttonOptionSource","buttonOptionHtml","ButtonOption","buttonOptionSnippet","buttonOptionFlushSource","buttonOptionFlushHtml","ButtonOptionFlush","buttonOptionFlushSnippet","buttonIconSource","buttonIconHtml","ButtonIcon","buttonIconSnippet","buttonGhostSource","buttonGhostHtml","ButtonGhost","buttonGhostSnippet","buttonAsLinkSource","buttonAsLinkHtml","ButtonAsLink","buttonAsLinkSnippet","buttonLoadingSource","buttonLoadingHtml","ButtonLoading","buttonLoadingSnippet","buttonToggleSource","buttonToggleHtml","ButtonToggle","buttonToggleSnippet","buttonGroupSource","buttonGroupHtml","ButtonGroup","buttonGroupSnippet","ButtonExample","title","sections","source","type","GuideSectionTypes","JS","code","HTML","props","EuiButton","snippet","demo","text","EuiButtonEmpty","EuiButtonIcon","EuiButtonToggle","EuiButtonGroup"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { Link } from 'react-router';\n\nimport { renderToHtml } from '../../services';\n\nimport { GuideSectionTypes } from '../../components';\n\nimport {\n  EuiButton,\n  EuiButtonEmpty,\n  EuiButtonIcon,\n  EuiCode,\n  EuiButtonGroup,\n  EuiButtonToggle,\n  EuiCallOut,\n} from '../../../../src/components';\n\nimport Button from './button';\nconst buttonSource = require('!!raw-loader!./button');\nconst buttonHtml = renderToHtml(Button);\nconst buttonSnippet = [\n  `<EuiButton><!-- Primary button --></EuiButton>\n`,\n  `<EuiButton fill><!-- Filled button --></EuiButton>\n`,\n  `<EuiButton size=\"s\"><!-- Small button --></EuiButton>\n`,\n  `<EuiButton size=\"s\" fill><!-- Small and filled button --></EuiButton>\n`,\n];\n\nimport ButtonWithIcon from './button_with_icon';\nconst buttonWithIconSource = require('!!raw-loader!./button_with_icon');\nconst buttonWithIconHtml = renderToHtml(Button);\nconst buttonWithIconSnippet = `<EuiButton iconType={icon}><!-- Button text --></EuiButton>\n`;\n\nimport ButtonOption from './button_empty';\nconst buttonOptionSource = require('!!raw-loader!./button_empty');\nconst buttonOptionHtml = renderToHtml(ButtonOption);\nconst buttonOptionSnippet = `<EuiButtonEmpty>\n  <!-- Button text -->\n</EuiButtonEmpty>`;\n\nimport ButtonOptionFlush from './button_empty_flush';\nconst buttonOptionFlushSource = require('!!raw-loader!./button_empty_flush');\nconst buttonOptionFlushHtml = renderToHtml(ButtonOptionFlush);\nconst buttonOptionFlushSnippet = `<EuiButtonEmpty flush=\"left\"><!-- Button text --></EuiButtonEmpty>\n`;\n\nimport ButtonIcon from './button_icon';\nconst buttonIconSource = require('!!raw-loader!./button_icon');\nconst buttonIconHtml = renderToHtml(ButtonIcon);\nconst buttonIconSnippet = `<EuiButtonIcon\n  iconType={icon}\n/>`;\n\nimport ButtonGhost from './button_ghost';\nconst buttonGhostSource = require('!!raw-loader!./button_ghost');\nconst buttonGhostHtml = renderToHtml(ButtonGhost);\nconst buttonGhostSnippet = `<EuiButton color=\"ghost\">\n  <!-- Button text -->\n</EuiButton>`;\n\nimport ButtonAsLink from './button_as_link';\nconst buttonAsLinkSource = require('!!raw-loader!./button_as_link');\nconst buttonAsLinkHtml = renderToHtml(ButtonAsLink);\nconst buttonAsLinkSnippet = `<EuiButton href={someUrl}><!-- Button text --></EuiButton>\n`;\n\nimport ButtonLoading from './button_loading';\nconst buttonLoadingSource = require('!!raw-loader!./button_loading');\nconst buttonLoadingHtml = renderToHtml(ButtonLoading);\nconst buttonLoadingSnippet = `<EuiButton isLoading={true}>\n  <!-- Button text -->\n</EuiButton>`;\n\nimport ButtonToggle from './button_toggle';\nconst buttonToggleSource = require('!!raw-loader!./button_toggle');\nconst buttonToggleHtml = renderToHtml(ButtonToggle);\nconst buttonToggleSnippet = `<EuiButtonToggle\n  label={label}\n  iconType={this.state.toggleOn ? onIcon : offIcon}\n  onChange={this.onToggleChange}\n  isSelected={this.state.toggleOn}\n/>`;\n\nimport ButtonGroup from './button_group';\nconst buttonGroupSource = require('!!raw-loader!./button_group');\nconst buttonGroupHtml = renderToHtml(ButtonGroup);\nconst buttonGroupSnippet = [\n  `<EuiButtonGroup\n  legend={legend}\n  options={this.toggleButtons}\n  idSelected={this.state.toggleIdSelected}\n  onChange={this.onChange}\n/>`,\n  `<EuiButtonGroup\n  legend={legend}\n  options={this.toggleButtonsIconsMulti}\n  idToSelectedMap={this.state.toggleIconIdToSelectedMap}\n  onChange={this.onChangeIconsMulti}\n  type=\"multi\"\n  isIconOnly\n/>`,\n];\n\nexport const ButtonExample = {\n  title: 'Button',\n  sections: [\n    {\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: buttonSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: buttonHtml,\n        },\n      ],\n      props: { EuiButton },\n      snippet: buttonSnippet,\n      demo: <Button />,\n    },\n    {\n      title: 'Buttons can also be links',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: buttonAsLinkSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: buttonAsLinkHtml,\n        },\n      ],\n      text: (\n        <p>\n          Buttons will use an <EuiCode>{'<a>'}</EuiCode> tag if there is a{' '}\n          <EuiCode>href</EuiCode> prop present.\n        </p>\n      ),\n      snippet: buttonAsLinkSnippet,\n      demo: <ButtonAsLink />,\n    },\n    {\n      title: 'Button with Icon',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: buttonWithIconSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: buttonWithIconHtml,\n        },\n      ],\n      text: (\n        <p>\n          The passed icon needs to come from our list of svg icons. Can be\n          flipped{' '}\n          {\n            // eslint-disable-next-line react/no-unescaped-entities\n          }{' '}\n          to the other side by passing{' '}\n          <EuiCode>iconSide=&quot;right&quot;</EuiCode>.\n        </p>\n      ),\n      snippet: buttonWithIconSnippet,\n      demo: <ButtonWithIcon />,\n    },\n    {\n      title: 'Loading state',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: buttonLoadingSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: buttonLoadingHtml,\n        },\n      ],\n      text: (\n        <p>\n          Setting the <EuiCode>isLoading</EuiCode> prop to true will add the\n          loading spinner or swap the existing icon for the loading spinner and\n          set the button to disabled. It is good practice to also rename the\n          button to &quot;Loading&hellip;&quot;.\n        </p>\n      ),\n      snippet: buttonLoadingSnippet,\n      demo: <ButtonLoading />,\n    },\n    {\n      title: 'ButtonEmpty',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: buttonOptionSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: buttonOptionHtml,\n        },\n      ],\n      text: (\n        <p>\n          <EuiCode>EuiButtonEmpty</EuiCode> is used when you want to make a\n          button look like a regular link, but still want to align it to the\n          rest of the buttons.\n        </p>\n      ),\n      props: { EuiButtonEmpty },\n      snippet: buttonOptionSnippet,\n      demo: <ButtonOption />,\n    },\n    {\n      title: 'Flush ButtonEmpty',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: buttonOptionFlushSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: buttonOptionFlushHtml,\n        },\n      ],\n      text: (\n        <p>\n          When aligning <EuiCode>EuiButtonEmpty</EuiCode> components to the left\n          or the right, you should make sure they&rsquo;re flush with the edge\n          of their container, so that they&rsquo;re horizontally aligned with\n          the other content in the container.\n        </p>\n      ),\n      snippet: buttonOptionFlushSnippet,\n      demo: <ButtonOptionFlush />,\n    },\n    {\n      title: 'Button Icon',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: buttonIconSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: buttonIconHtml,\n        },\n      ],\n      text: (\n        <p>Button icons are buttons that only contain an icon (no text).</p>\n      ),\n      props: { EuiButtonIcon },\n      snippet: buttonIconSnippet,\n      demo: <ButtonIcon />,\n    },\n    {\n      title: 'Toggle buttons',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: buttonToggleSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: buttonToggleHtml,\n        },\n      ],\n      text: (\n        <div>\n          <p>\n            This is a specialized component that combines{' '}\n            <EuiCode>EuiButton</EuiCode> and <EuiCode>EuiToggle</EuiCode> to\n            create a button with an on/off state. You can pass all the same\n            parameters to it as you can to <EuiCode>EuiButton</EuiCode>. The\n            main difference is that, it does not accept any children, but a{' '}\n            <EuiCode>label</EuiCode> prop instead. This is for the handling of\n            accessibility with the <EuiCode>EuiToggle</EuiCode>.\n          </p>\n          <p>\n            The <EuiCode>EuiButtonToggle</EuiCode> does not have any inherit\n            visual state differences. These you must apply in your\n            implementation.\n          </p>\n        </div>\n      ),\n      demo: <ButtonToggle />,\n      snippet: buttonToggleSnippet,\n      props: { EuiButtonToggle },\n    },\n    {\n      title: 'Groups',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: buttonGroupSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: buttonGroupHtml,\n        },\n      ],\n      text: (\n        <div>\n          <p>\n            Button groups are handled similarly to the way checkbox and radio\n            groups are handled but made to look like buttons. They group\n            multiple <EuiCode>EuiButtonToggle</EuiCode>s and utilize the{' '}\n            <EuiCode>type=&quot;single&quot;</EuiCode> or{' '}\n            <EuiCode>&quot;multi&quot;</EuiCode> prop to determine whether\n            multiple or only single selections are allowed per group.\n          </p>\n          <p>\n            Stylistically, all button groups are the size of small buttons, do\n            not stretch to fill the container, and typically should only be{' '}\n            <EuiCode>color=&quot;text&quot;</EuiCode> (default) or{' '}\n            <EuiCode>&quot;primary&quot;</EuiCode>. If you&apos;re just\n            displaying a group of icons, add the prop{' '}\n            <EuiCode>isIconOnly</EuiCode>.\n          </p>\n          <EuiCallOut title=\"Accessibility\">\n            <p>\n              In order for groups to be properly read as groups with a title,\n              add the <EuiCode>legend</EuiCode> prop. This is only for\n              accessibility, however, so it will be visibly hidden.\n            </p>\n          </EuiCallOut>\n        </div>\n      ),\n      demo: <ButtonGroup />,\n      snippet: buttonGroupSnippet,\n      props: { EuiButtonGroup },\n    },\n    {\n      title: 'Ghost',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: buttonGhostSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: buttonGhostHtml,\n        },\n      ],\n      text: (\n        <p>\n          For buttons on dark color backgrounds, you can pass{' '}\n          <EuiCode>color=&apos;ghost&apos;</EuiCode> to any of the button styles\n          on this page. These should be used extremely rarely, and are only for\n          placing buttons on top of dark or image-based backgrounds. A good\n          example of their use is in the{' '}\n          <Link to=\"/layout/bottom-bar\">EuiBottomBar</Link> component.\n        </p>\n      ),\n      snippet: buttonGhostSnippet,\n      demo: <ButtonGhost />,\n    },\n  ],\n};\n"]}]}