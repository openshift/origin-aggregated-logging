{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src-docs/src/views/progress/progress_example.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src-docs/src/views/progress/progress_example.js","mtime":1565204169530},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProgressExample = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _services = require(\"../../services\");\n\nvar _components = require(\"../../components\");\n\nvar _components2 = require(\"../../../../src/components\");\n\nvar _progress = _interopRequireDefault(require(\"./progress\"));\n\nvar _progress_value = _interopRequireDefault(require(\"./progress_value\"));\n\nvar _progress_fixed = _interopRequireDefault(require(\"./progress_fixed\"));\n\nvar _progress_size_color = _interopRequireDefault(require(\"./progress_size_color\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar progressSource = require('!!raw-loader!./progress');\n\nvar progressHtml = (0, _services.renderToHtml)(_progress.default);\nvar progressSnippet = '<EuiProgress size=\"xs\" color=\"accent\" />';\n\nvar progressValueSource = require('!!raw-loader!./progress_value');\n\nvar progressValueHtml = (0, _services.renderToHtml)(_progress_value.default);\nvar progressValueSnippet = '<EuiProgress value={22} max={100} size=\"xs\" />';\n\nvar progressFixedSource = require('!!raw-loader!./progress_fixed');\n\nvar progressFixedHtml = (0, _services.renderToHtml)(_progress_fixed.default);\nvar progressFixedSnippet = \"<!-- Position at top of parent container -->\\n<EuiProgress size=\\\"xs\\\" color=\\\"accent\\\" position=\\\"absolute\\\" />\\n\\n<!-- Position at top of screen, above global header -->\\n<EuiPortal>\\n  <EuiProgress size=\\\"xs\\\" color=\\\"accent\\\" position=\\\"fixed\\\" />\\n</EuiPortal>\";\n\nvar progressSizeColorSource = require('!!raw-loader!./progress_size_color');\n\nvar progressSizeColorHtml = (0, _services.renderToHtml)(_progress_size_color.default);\nvar ProgressExample = {\n  title: 'Progress',\n  sections: [{\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: progressSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: progressHtml\n    }],\n    text: _react.default.createElement(\"p\", null, \"The \", _react.default.createElement(_components2.EuiCode, null, \"Progress\"), \" component by default will display in an indeterminate loading state (rendered as a single div) until you define a \", _react.default.createElement(_components2.EuiCode, null, \"max\"), \" and \", _react.default.createElement(_components2.EuiCode, null, \"value\"), \" prop. The\", ' ', _react.default.createElement(_components2.EuiCode, null, \"size\"), \" prop refers to its vertical height. It will always stretch \", _react.default.createElement(_components2.EuiCode, null, \"100%\"), \" to its container.\"),\n    snippet: progressSnippet,\n    props: {\n      EuiProgress: _components2.EuiProgress\n    },\n    demo: _react.default.createElement(_progress.default, null)\n  }, {\n    title: 'Progress with values',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: progressValueSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: progressValueHtml\n    }],\n    text: _react.default.createElement(\"p\", null, \"Once the \", _react.default.createElement(_components2.EuiCode, null, \"max\"), \" and \", _react.default.createElement(_components2.EuiCode, null, \"value\"), \" props are set, it will act as a determinate progress bar. This is rendered using an HTML5 \", _react.default.createElement(_components2.EuiCode, null, \"progress\"), \" tag.\"),\n    snippet: progressValueSnippet,\n    demo: _react.default.createElement(_progress_value.default, null)\n  }, {\n    title: 'Progress can have absolute or fixed positions',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: progressFixedSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: progressFixedHtml\n    }],\n    text: _react.default.createElement(\"div\", null, _react.default.createElement(\"p\", null, \"Using the \", _react.default.createElement(_components2.EuiCode, null, \"position\"), \" prop we can align our bar to be \", _react.default.createElement(_components2.EuiCode, null, \"fixed\"), \" or \", _react.default.createElement(_components2.EuiCode, null, \"absolute\"), \". In both options, the background color of the base bar is dropped (since the context of width is already known from your wrapping element). For the absolute option, make sure that your wrapping element has\", ' ', _react.default.createElement(_components2.EuiCode, null, \"position: relative\"), \" applied.\"), _react.default.createElement(_components2.EuiCallOut, {\n      title: \"Note about progress bars over fixed headers\",\n      iconType: \"iInCircle\"\n    }, _react.default.createElement(\"p\", null, \"Using \", _react.default.createElement(_components2.EuiCode, null, \"EuiProgress\"), \" with a\", ' ', _react.default.createElement(_components2.EuiCode, null, \"fixed\"), \" position may result in it being overlayed when its parent wrapper has a \", _react.default.createElement(_components2.EuiCode, null, \"z-index\"), \" value lower than another fixed element, such as\", ' ', _react.default.createElement(_components2.EuiCode, null, \"EuiHeader\"), \". In that case, wrap\", ' ', _react.default.createElement(_components2.EuiCode, null, \"EuiProgress\"), \" in an \", _react.default.createElement(_components2.EuiCode, null, \"EuiPortal\"), ' ', \"as seen on the Snippet tab.\"))),\n    snippet: progressFixedSnippet,\n    demo: _react.default.createElement(_progress_fixed.default, null)\n  }, {\n    title: 'Progress has a range of sizes and colors',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: progressSizeColorSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: progressSizeColorHtml\n    }],\n    text: _react.default.createElement(\"p\", null, \"Both \", _react.default.createElement(_components2.EuiCode, null, \"size\"), \" and \", _react.default.createElement(_components2.EuiCode, null, \"color\"), \" can be provided as props. These values will work on both determinate and indeterminate progress bars.\"),\n    demo: _react.default.createElement(_progress_size_color.default, null)\n  }]\n};\nexports.ProgressExample = ProgressExample;",{"version":3,"sources":["/Users/chanderprall/projects/eui/src-docs/src/views/progress/progress_example.js"],"names":["progressSource","require","progressHtml","Progress","progressSnippet","progressValueSource","progressValueHtml","ProgressValue","progressValueSnippet","progressFixedSource","progressFixedHtml","ProgressFixed","progressFixedSnippet","progressSizeColorSource","progressSizeColorHtml","ProgressSizeColor","ProgressExample","title","sections","source","type","GuideSectionTypes","JS","code","HTML","text","snippet","props","EuiProgress","demo"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { renderToHtml } from '../../services';\n\nimport { GuideSectionTypes } from '../../components';\n\nimport { EuiCallOut, EuiCode, EuiProgress } from '../../../../src/components';\n\nimport Progress from './progress';\nconst progressSource = require('!!raw-loader!./progress');\nconst progressHtml = renderToHtml(Progress);\nconst progressSnippet = '<EuiProgress size=\"xs\" color=\"accent\" />';\n\nimport ProgressValue from './progress_value';\nconst progressValueSource = require('!!raw-loader!./progress_value');\nconst progressValueHtml = renderToHtml(ProgressValue);\nconst progressValueSnippet = '<EuiProgress value={22} max={100} size=\"xs\" />';\n\nimport ProgressFixed from './progress_fixed';\nconst progressFixedSource = require('!!raw-loader!./progress_fixed');\nconst progressFixedHtml = renderToHtml(ProgressFixed);\nconst progressFixedSnippet = `<!-- Position at top of parent container -->\n<EuiProgress size=\"xs\" color=\"accent\" position=\"absolute\" />\n\n<!-- Position at top of screen, above global header -->\n<EuiPortal>\n  <EuiProgress size=\"xs\" color=\"accent\" position=\"fixed\" />\n</EuiPortal>`;\n\nimport ProgressSizeColor from './progress_size_color';\nconst progressSizeColorSource = require('!!raw-loader!./progress_size_color');\nconst progressSizeColorHtml = renderToHtml(ProgressSizeColor);\n\nexport const ProgressExample = {\n  title: 'Progress',\n  sections: [\n    {\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: progressSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: progressHtml,\n        },\n      ],\n      text: (\n        <p>\n          The <EuiCode>Progress</EuiCode> component by default will display in\n          an indeterminate loading state (rendered as a single div) until you\n          define a <EuiCode>max</EuiCode> and <EuiCode>value</EuiCode> prop. The{' '}\n          <EuiCode>size</EuiCode> prop refers to its vertical height. It will\n          always stretch <EuiCode>100%</EuiCode> to its container.\n        </p>\n      ),\n      snippet: progressSnippet,\n      props: { EuiProgress },\n      demo: <Progress />,\n    },\n    {\n      title: 'Progress with values',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: progressValueSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: progressValueHtml,\n        },\n      ],\n      text: (\n        <p>\n          Once the <EuiCode>max</EuiCode> and <EuiCode>value</EuiCode> props are\n          set, it will act as a determinate progress bar. This is rendered using\n          an HTML5 <EuiCode>progress</EuiCode> tag.\n        </p>\n      ),\n      snippet: progressValueSnippet,\n      demo: <ProgressValue />,\n    },\n    {\n      title: 'Progress can have absolute or fixed positions',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: progressFixedSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: progressFixedHtml,\n        },\n      ],\n      text: (\n        <div>\n          <p>\n            Using the <EuiCode>position</EuiCode> prop we can align our bar to\n            be <EuiCode>fixed</EuiCode> or <EuiCode>absolute</EuiCode>. In both\n            options, the background color of the base bar is dropped (since the\n            context of width is already known from your wrapping element). For\n            the absolute option, make sure that your wrapping element has{' '}\n            <EuiCode>position: relative</EuiCode> applied.\n          </p>\n          <EuiCallOut\n            title=\"Note about progress bars over fixed headers\"\n            iconType=\"iInCircle\">\n            <p>\n              Using <EuiCode>EuiProgress</EuiCode> with a{' '}\n              <EuiCode>fixed</EuiCode> position may result in it being overlayed\n              when its parent wrapper has a <EuiCode>z-index</EuiCode> value\n              lower than another fixed element, such as{' '}\n              <EuiCode>EuiHeader</EuiCode>. In that case, wrap{' '}\n              <EuiCode>EuiProgress</EuiCode> in an <EuiCode>EuiPortal</EuiCode>{' '}\n              as seen on the Snippet tab.\n            </p>\n          </EuiCallOut>\n        </div>\n      ),\n      snippet: progressFixedSnippet,\n      demo: <ProgressFixed />,\n    },\n    {\n      title: 'Progress has a range of sizes and colors',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: progressSizeColorSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: progressSizeColorHtml,\n        },\n      ],\n      text: (\n        <p>\n          Both <EuiCode>size</EuiCode> and <EuiCode>color</EuiCode> can be\n          provided as props. These values will work on both determinate and\n          indeterminate progress bars.\n        </p>\n      ),\n      demo: <ProgressSizeColor />,\n    },\n  ],\n};\n"]}]}