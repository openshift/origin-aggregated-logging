{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/combo_box/matching_options.ts","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/combo_box/matching_options.ts","mtime":1565204169648},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMatchingOptions = exports.getSelectedOptionForSearchValue = exports.flattenOptionGroups = void 0;\n\nrequire(\"core-js/modules/es6.string.iterator\");\n\nrequire(\"core-js/modules/es6.array.from\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es7.array.includes\");\n\nrequire(\"core-js/modules/es6.string.includes\");\n\nrequire(\"core-js/modules/es6.array.find\");\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n// eslint-disable-line import/no-unresolved\nvar flattenOptionGroups = function flattenOptionGroups(optionsOrGroups) {\n  return optionsOrGroups.reduce(function (options, optionOrGroup) {\n    if (optionOrGroup.options) {\n      options.push.apply(options, _toConsumableArray(optionOrGroup.options));\n    } else {\n      options.push(optionOrGroup);\n    }\n\n    return options;\n  }, []);\n};\n\nexports.flattenOptionGroups = flattenOptionGroups;\n\nvar getSelectedOptionForSearchValue = function getSelectedOptionForSearchValue(searchValue, selectedOptions) {\n  var normalizedSearchValue = searchValue.toLowerCase();\n  return selectedOptions.find(function (option) {\n    return option.label.toLowerCase() === normalizedSearchValue;\n  });\n};\n\nexports.getSelectedOptionForSearchValue = getSelectedOptionForSearchValue;\n\nvar collectMatchingOption = function collectMatchingOption(accumulator, option, selectedOptions, normalizedSearchValue, isPreFiltered, showPrevSelected) {\n  // Only show options which haven't yet been selected unless requested.\n  var selectedOption = getSelectedOptionForSearchValue(option.label, selectedOptions);\n\n  if (selectedOption && !showPrevSelected) {\n    return false;\n  } // If the options have already been pre-filtered then we can skip filtering against the search value.\n\n\n  if (isPreFiltered) {\n    accumulator.push(option);\n    return;\n  }\n\n  if (!normalizedSearchValue) {\n    accumulator.push(option);\n    return;\n  }\n\n  var normalizedOption = option.label.trim().toLowerCase();\n\n  if (normalizedOption.includes(normalizedSearchValue)) {\n    accumulator.push(option);\n  }\n};\n\nvar getMatchingOptions = function getMatchingOptions(options, selectedOptions, searchValue, isPreFiltered, showPrevSelected) {\n  var normalizedSearchValue = searchValue.trim().toLowerCase();\n  var matchingOptions = [];\n  options.forEach(function (option) {\n    if (option.options) {\n      var matchingOptionsForGroup = [];\n      option.options.forEach(function (groupOption) {\n        collectMatchingOption(matchingOptionsForGroup, groupOption, selectedOptions, normalizedSearchValue, isPreFiltered, showPrevSelected);\n      });\n\n      if (matchingOptionsForGroup.length > 0) {\n        // Add option for group label\n        matchingOptions.push({\n          label: option.label,\n          isGroupLabelOption: true\n        }); // Add matching options for group\n\n        matchingOptions.push.apply(matchingOptions, matchingOptionsForGroup);\n      }\n    } else {\n      collectMatchingOption(matchingOptions, option, selectedOptions, normalizedSearchValue, isPreFiltered, showPrevSelected);\n    }\n  });\n  return matchingOptions;\n};\n\nexports.getMatchingOptions = getMatchingOptions;",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/combo_box/matching_options.ts"],"names":["flattenOptionGroups","optionsOrGroups","reduce","options","optionOrGroup","push","getSelectedOptionForSearchValue","searchValue","selectedOptions","normalizedSearchValue","toLowerCase","find","option","label","collectMatchingOption","accumulator","isPreFiltered","showPrevSelected","selectedOption","normalizedOption","trim","includes","getMatchingOptions","matchingOptions","forEach","matchingOptionsForGroup","groupOption","length","isGroupLabelOption"],"mappings":"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","sourcesContent":["import { EuiComboBoxOptionProps } from '@elastic/eui'; // eslint-disable-line import/no-unresolved\n\nexport const flattenOptionGroups = <T>(\n  optionsOrGroups: Array<EuiComboBoxOptionProps<T>>\n) => {\n  return optionsOrGroups.reduce(\n    (\n      options: Array<EuiComboBoxOptionProps<T>>,\n      optionOrGroup: EuiComboBoxOptionProps<T>\n    ) => {\n      if (optionOrGroup.options) {\n        options.push(...optionOrGroup.options);\n      } else {\n        options.push(optionOrGroup);\n      }\n      return options;\n    },\n    []\n  );\n};\n\nexport const getSelectedOptionForSearchValue = <T>(\n  searchValue: string,\n  selectedOptions: Array<EuiComboBoxOptionProps<T>>\n) => {\n  const normalizedSearchValue = searchValue.toLowerCase();\n  return selectedOptions.find(\n    option => option.label.toLowerCase() === normalizedSearchValue\n  );\n};\n\nconst collectMatchingOption = <T>(\n  accumulator: Array<EuiComboBoxOptionProps<T>>,\n  option: EuiComboBoxOptionProps<T>,\n  selectedOptions: Array<EuiComboBoxOptionProps<T>>,\n  normalizedSearchValue: string,\n  isPreFiltered: boolean,\n  showPrevSelected: boolean\n) => {\n  // Only show options which haven't yet been selected unless requested.\n  const selectedOption = getSelectedOptionForSearchValue(\n    option.label,\n    selectedOptions\n  );\n  if (selectedOption && !showPrevSelected) {\n    return false;\n  }\n\n  // If the options have already been pre-filtered then we can skip filtering against the search value.\n  if (isPreFiltered) {\n    accumulator.push(option);\n    return;\n  }\n\n  if (!normalizedSearchValue) {\n    accumulator.push(option);\n    return;\n  }\n\n  const normalizedOption = option.label.trim().toLowerCase();\n  if (normalizedOption.includes(normalizedSearchValue)) {\n    accumulator.push(option);\n  }\n};\n\nexport const getMatchingOptions = <T>(\n  options: Array<EuiComboBoxOptionProps<T>>,\n  selectedOptions: Array<EuiComboBoxOptionProps<T>>,\n  searchValue: string,\n  isPreFiltered: boolean,\n  showPrevSelected: boolean\n) => {\n  const normalizedSearchValue = searchValue.trim().toLowerCase();\n  const matchingOptions: Array<EuiComboBoxOptionProps<T>> = [];\n\n  options.forEach(option => {\n    if (option.options) {\n      const matchingOptionsForGroup: Array<EuiComboBoxOptionProps<T>> = [];\n      option.options.forEach((groupOption: EuiComboBoxOptionProps<T>) => {\n        collectMatchingOption(\n          matchingOptionsForGroup,\n          groupOption,\n          selectedOptions,\n          normalizedSearchValue,\n          isPreFiltered,\n          showPrevSelected\n        );\n      });\n      if (matchingOptionsForGroup.length > 0) {\n        // Add option for group label\n        matchingOptions.push({ label: option.label, isGroupLabelOption: true });\n        // Add matching options for group\n        matchingOptions.push(...matchingOptionsForGroup);\n      }\n    } else {\n      collectMatchingOption(\n        matchingOptions,\n        option,\n        selectedOptions,\n        normalizedSearchValue,\n        isPreFiltered,\n        showPrevSelected\n      );\n    }\n  });\n  return matchingOptions;\n};\n"]}]}