{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/toggle/toggle.tsx","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/toggle/toggle.tsx","mtime":1565204170045},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EuiToggle = exports.TYPES = void 0;\n\nrequire(\"core-js/modules/es6.object.assign\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nvar typeToInputTypeMap = {\n  single: 'radio',\n  multi: 'checkbox'\n};\nvar TYPES = Object.keys(typeToInputTypeMap);\nexports.TYPES = TYPES;\n\nvar EuiToggle = function EuiToggle(_ref) {\n  var id = _ref.id,\n      className = _ref.className,\n      checked = _ref.checked,\n      children = _ref.children,\n      inputClassName = _ref.inputClassName,\n      isDisabled = _ref.isDisabled,\n      label = _ref.label,\n      name = _ref.name,\n      onChange = _ref.onChange,\n      title = _ref.title,\n      type = _ref.type,\n      value = _ref.value,\n      rest = _objectWithoutProperties(_ref, [\"id\", \"className\", \"checked\", \"children\", \"inputClassName\", \"isDisabled\", \"label\", \"name\", \"onChange\", \"title\", \"type\", \"value\"]);\n\n  var classes = (0, _classnames.default)('euiToggle', {\n    'euiToggle--checked': checked\n  }, className);\n  var inputClasses = (0, _classnames.default)('euiToggle__input', inputClassName);\n  return _react.default.createElement(\"div\", _extends({\n    className: classes\n  }, rest), _react.default.createElement(\"input\", {\n    id: id,\n    className: inputClasses,\n    \"aria-label\": label,\n    checked: checked,\n    disabled: isDisabled,\n    name: name,\n    onChange: onChange,\n    title: title,\n    type: type ? typeToInputTypeMap[type] : undefined,\n    value: value\n  }), children);\n};\n\nexports.EuiToggle = EuiToggle;\nEuiToggle.propTypes = {\n  className: _propTypes.default.string,\n  \"aria-label\": _propTypes.default.string,\n  \"data-test-subj\": _propTypes.default.string,\n  id: _propTypes.default.string,\n\n  /**\n       * Initial state of the toggle\n       */\n  checked: _propTypes.default.bool,\n\n  /**\n       * For handling the onChange event of the input\n       */\n  onChange: _propTypes.default.any,\n  isDisabled: _propTypes.default.bool,\n  name: _propTypes.default.string,\n\n  /**\n       * Determines the input type based on multiple or single item(s)\n       */\n  type: _propTypes.default.oneOf([\"single\", \"multi\"]),\n\n  /**\n       * What would typically be the input's label. Required for accessibility.\n       */\n  label: _propTypes.default.string.isRequired,\n\n  /**\n       * Additional classNames for the input itself\n       */\n  inputClassName: _propTypes.default.string,\n  value: _propTypes.default.oneOfType([_propTypes.default.string.isRequired, _propTypes.default.number.isRequired])\n};\nEuiToggle.defaultProps = {\n  type: 'multi'\n};\nEuiToggle.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"EuiToggle\",\n  \"props\": {\n    \"type\": {\n      \"defaultValue\": {\n        \"value\": \"'multi'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"single\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"multi\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Determines the input type based on multiple or single item(s)\"\n    },\n    \"className\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"aria-label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"data-test-subj\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"id\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"checked\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Initial state of the toggle\"\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"For handling the onChange event of the input\"\n    },\n    \"isDisabled\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"What would typically be the input's label. Required for accessibility.\"\n    },\n    \"inputClassName\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Additional classNames for the input itself\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"union\",\n        \"value\": [{\n          \"name\": \"string\"\n        }, {\n          \"name\": \"number\"\n        }]\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/toggle/toggle.tsx"],"names":["typeToInputTypeMap","single","multi","TYPES","Object","keys","EuiToggle","id","className","checked","children","inputClassName","isDisabled","label","name","onChange","title","type","value","rest","classes","inputClasses","undefined","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;AAGA,IAAMA,kBAAkB,GAAG;AACzBC,EAAAA,MAAM,EAAE,OADiB;AAEzBC,EAAAA,KAAK,EAAE;AAFkB,CAA3B;AAKO,IAAMC,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYL,kBAAZ,CAAd;;;AAgCA,IAAMM,SAAoC,GAAG,SAAvCA,SAAuC,OAc9C;AAAA,MAbJC,EAaI,QAbJA,EAaI;AAAA,MAZJC,SAYI,QAZJA,SAYI;AAAA,MAXJC,OAWI,QAXJA,OAWI;AAAA,MAVJC,QAUI,QAVJA,QAUI;AAAA,MATJC,cASI,QATJA,cASI;AAAA,MARJC,UAQI,QARJA,UAQI;AAAA,MAPJC,KAOI,QAPJA,KAOI;AAAA,MANJC,IAMI,QANJA,IAMI;AAAA,MALJC,QAKI,QALJA,QAKI;AAAA,MAJJC,KAII,QAJJA,KAII;AAAA,MAHJC,IAGI,QAHJA,IAGI;AAAA,MAFJC,KAEI,QAFJA,KAEI;AAAA,MADDC,IACC;;AACJ,MAAMC,OAAO,GAAG,yBACd,WADc,EAEd;AAAE,0BAAsBX;AAAxB,GAFc,EAGdD,SAHc,CAAhB;AAMA,MAAMa,YAAY,GAAG,yBAAW,kBAAX,EAA+BV,cAA/B,CAArB;AAEA,SACE;AAAK,IAAA,SAAS,EAAES;AAAhB,KAA6BD,IAA7B,GACE;AACE,IAAA,EAAE,EAAEZ,EADN;AAEE,IAAA,SAAS,EAAEc,YAFb;AAGE,kBAAYR,KAHd;AAIE,IAAA,OAAO,EAAEJ,OAJX;AAKE,IAAA,QAAQ,EAAEG,UALZ;AAME,IAAA,IAAI,EAAEE,IANR;AAOE,IAAA,QAAQ,EAAEC,QAPZ;AAQE,IAAA,KAAK,EAAEC,KART;AASE,IAAA,IAAI,EAAEC,IAAI,GAAGjB,kBAAkB,CAACiB,IAAD,CAArB,GAA8BK,SAT1C;AAUE,IAAA,KAAK,EAAEJ;AAVT,IADF,EAcGR,QAdH,CADF;AAkBD,CAzCM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CPJ,SAAS,CAACiB,YAAV,GAAyB;AACvBN,EAAAA,IAAI,EAAE;AADiB,CAAzB","sourcesContent":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.keys\";\nimport PropTypes from \"prop-types\";\nimport React from 'react';\nimport classNames from 'classnames';\nvar typeToInputTypeMap = {\n  single: 'radio',\n  multi: 'checkbox'\n};\nexport var TYPES = Object.keys(typeToInputTypeMap);\nexport var EuiToggle = ({\n  id,\n  className,\n  checked,\n  children,\n  inputClassName,\n  isDisabled,\n  label,\n  name,\n  onChange,\n  title,\n  type,\n  value,\n  ...rest\n}) => {\n  const classes = classNames('euiToggle', {\n    'euiToggle--checked': checked\n  }, className);\n  const inputClasses = classNames('euiToggle__input', inputClassName);\n  return <div className={classes} {...rest}>\n      <input id={id} className={inputClasses} aria-label={label} checked={checked} disabled={isDisabled} name={name} onChange={onChange} title={title} type={type ? typeToInputTypeMap[type] : undefined} value={value} />\n\n      {children}\n    </div>;\n};\nEuiToggle.propTypes = {\n  className: PropTypes.string,\n  \"aria-label\": PropTypes.string,\n  \"data-test-subj\": PropTypes.string,\n  id: PropTypes.string,\n\n  /**\n       * Initial state of the toggle\n       */\n  checked: PropTypes.bool,\n\n  /**\n       * For handling the onChange event of the input\n       */\n  onChange: PropTypes.any,\n  isDisabled: PropTypes.bool,\n  name: PropTypes.string,\n\n  /**\n       * Determines the input type based on multiple or single item(s)\n       */\n  type: PropTypes.oneOf([\"single\", \"multi\"]),\n\n  /**\n       * What would typically be the input's label. Required for accessibility.\n       */\n  label: PropTypes.string.isRequired,\n\n  /**\n       * Additional classNames for the input itself\n       */\n  inputClassName: PropTypes.string,\n  value: PropTypes.oneOfType([PropTypes.string.isRequired, PropTypes.number.isRequired])\n};\nEuiToggle.defaultProps = {\n  type: 'multi'\n};"]}]}