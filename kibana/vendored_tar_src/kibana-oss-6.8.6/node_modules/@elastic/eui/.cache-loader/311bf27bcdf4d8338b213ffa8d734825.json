{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/selectable/selectable.tsx","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/selectable/selectable.tsx","mtime":1565204169995},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EuiSelectable = void 0;\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/es6.object.assign\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.object.set-prototype-of\");\n\nrequire(\"core-js/modules/es7.array.includes\");\n\nrequire(\"core-js/modules/es6.string.includes\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _selectable_search = require(\"./selectable_search\");\n\nvar _selectable_message = require(\"./selectable_message\");\n\nvar _selectable_list = require(\"./selectable_list\");\n\nvar _loading = require(\"../loading\");\n\nvar _matching_options = require(\"./matching_options\");\n\nvar _services = require(\"../../services\");\n\nvar _key_codes = require(\"../../services/key_codes\");\n\nvar _i18n = require(\"../i18n\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar EuiSelectable =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EuiSelectable, _Component);\n\n  function EuiSelectable(props) {\n    var _this;\n\n    _classCallCheck(this, EuiSelectable);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EuiSelectable).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"optionsListRef\", (0, _react.createRef)());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"hasActiveOption\", function () {\n      return _this.state.activeOptionIndex != null;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onKeyDown\", function (e) {\n      var optionsList = _this.optionsListRef.current;\n\n      switch (e.keyCode) {\n        case _services.comboBoxKeyCodes.UP:\n          e.preventDefault();\n          e.stopPropagation();\n\n          _this.incrementActiveOptionIndex(-1);\n\n          break;\n\n        case _services.comboBoxKeyCodes.DOWN:\n          e.preventDefault();\n          e.stopPropagation();\n\n          _this.incrementActiveOptionIndex(1);\n\n          break;\n\n        case _services.comboBoxKeyCodes.ENTER:\n          e.stopPropagation();\n\n          if (_this.state.activeOptionIndex != null && optionsList) {\n            optionsList.onAddOrRemoveOption(_this.state.visibleOptions[_this.state.activeOptionIndex]);\n          }\n\n          break;\n\n        case _key_codes.TAB:\n          // Disallow tabbing when the user is navigating the options.\n          // TODO: Can we force the tab to the next sibling element?\n          if (_this.hasActiveOption()) {\n            e.preventDefault();\n            e.stopPropagation();\n          }\n\n          break;\n\n        default:\n          if (_this.props.onKeyDown) {\n            _this.props.onKeyDown(e);\n          }\n\n          _this.clearActiveOption();\n\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"incrementActiveOptionIndex\", function (amount) {\n      // If there are no options available, do nothing.\n      if (!_this.state.visibleOptions.length) {\n        return;\n      }\n\n      _this.setState(function (_ref) {\n        var activeOptionIndex = _ref.activeOptionIndex,\n            visibleOptions = _ref.visibleOptions;\n        var nextActiveOptionIndex;\n\n        if (activeOptionIndex == null) {\n          // If this is the beginning of the user's keyboard navigation of the menu, then we'll focus\n          // either the first or last item.\n          nextActiveOptionIndex = amount < 0 ? visibleOptions.length - 1 : 0;\n        } else {\n          nextActiveOptionIndex = activeOptionIndex + amount;\n\n          if (nextActiveOptionIndex < 0) {\n            nextActiveOptionIndex = visibleOptions.length - 1;\n          } else if (nextActiveOptionIndex === visibleOptions.length) {\n            nextActiveOptionIndex = 0;\n          }\n        } // Group titles are included in option list but are not selectable\n        // Skip group title options\n\n\n        var direction = amount > 0 ? 1 : -1;\n\n        while (visibleOptions[nextActiveOptionIndex].isGroupLabel) {\n          nextActiveOptionIndex = nextActiveOptionIndex + direction;\n\n          if (nextActiveOptionIndex < 0) {\n            nextActiveOptionIndex = visibleOptions.length - 1;\n          } else if (nextActiveOptionIndex === visibleOptions.length) {\n            nextActiveOptionIndex = 0;\n          }\n        }\n\n        return {\n          activeOptionIndex: nextActiveOptionIndex\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"clearActiveOption\", function () {\n      _this.setState({\n        activeOptionIndex: undefined\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onSearchChange\", function (visibleOptions, searchValue) {\n      _this.setState({\n        visibleOptions: visibleOptions,\n        searchValue: searchValue\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onContainerBlur\", function () {\n      _this.clearActiveOption();\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onOptionClick\", function (options) {\n      _this.setState(function (state) {\n        return {\n          visibleOptions: (0, _matching_options.getMatchingOptions)(options, state.searchValue)\n        };\n      });\n\n      if (_this.props.onChange) {\n        _this.props.onChange(options);\n      }\n    });\n\n    var _options = props.options,\n        singleSelection = props.singleSelection;\n    var initialSearchValue = '';\n\n    var _visibleOptions = (0, _matching_options.getMatchingOptions)(_options, initialSearchValue); // ensure that the currently selected single option is active if it is in the visibleOptions\n\n\n    var selectedOptions = _options.filter(function (option) {\n      return option.checked;\n    });\n\n    var _activeOptionIndex;\n\n    if (singleSelection && selectedOptions.length === 1) {\n      if (_visibleOptions.includes(selectedOptions[0])) {\n        _activeOptionIndex = _visibleOptions.indexOf(selectedOptions[0]);\n      }\n    }\n\n    _this.state = {\n      activeOptionIndex: _activeOptionIndex,\n      searchValue: initialSearchValue,\n      visibleOptions: _visibleOptions\n    };\n    return _this;\n  }\n\n  _createClass(EuiSelectable, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          id = _this$props.id,\n          children = _this$props.children,\n          className = _this$props.className,\n          options = _this$props.options,\n          onChange = _this$props.onChange,\n          searchable = _this$props.searchable,\n          searchProps = _this$props.searchProps,\n          singleSelection = _this$props.singleSelection,\n          isLoading = _this$props.isLoading,\n          listProps = _this$props.listProps,\n          renderOption = _this$props.renderOption,\n          height = _this$props.height,\n          allowExclusions = _this$props.allowExclusions,\n          rest = _objectWithoutProperties(_this$props, [\"id\", \"children\", \"className\", \"options\", \"onChange\", \"searchable\", \"searchProps\", \"singleSelection\", \"isLoading\", \"listProps\", \"renderOption\", \"height\", \"allowExclusions\"]);\n\n      var _this$state = this.state,\n          searchValue = _this$state.searchValue,\n          visibleOptions = _this$state.visibleOptions,\n          activeOptionIndex = _this$state.activeOptionIndex;\n      var messageContent;\n\n      if (isLoading) {\n        messageContent = _react.default.createElement(_react.Fragment, null, _react.default.createElement(_loading.EuiLoadingChart, {\n          size: \"m\",\n          mono: true\n        }), _react.default.createElement(\"br\", null), _react.default.createElement(\"p\", null, _react.default.createElement(_i18n.EuiI18n, {\n          token: \"euiSelectable.loadingOptions\",\n          default: \"Loading options\"\n        })));\n      } else if (searchValue && visibleOptions.length === 0) {\n        messageContent = _react.default.createElement(\"p\", null, _react.default.createElement(_i18n.EuiI18n, {\n          token: \"euiSelectable.noMatchingOptions\",\n          default: \"{searchValue} doesn't match any options\",\n          values: {\n            searchValue: _react.default.createElement(\"strong\", null, searchValue)\n          }\n        }));\n      } else if (!options.length) {\n        messageContent = _react.default.createElement(\"p\", null, _react.default.createElement(_i18n.EuiI18n, {\n          token: \"euiSelectable.noAvailableOptions\",\n          default: \"No options available\"\n        }));\n      }\n\n      var classes = (0, _classnames.default)('euiSelectable', {\n        'euiSelectable-fullHeight': height === 'full'\n      }, className);\n      var search = searchable ? _react.default.createElement(_selectable_search.EuiSelectableSearch, _extends({\n        key: \"listSearch\",\n        options: options,\n        onChange: this.onSearchChange\n      }, searchProps)) : undefined;\n      var list = messageContent ? _react.default.createElement(_selectable_message.EuiSelectableMessage, {\n        key: \"listMessage\"\n      }, messageContent) : _react.default.createElement(_selectable_list.EuiSelectableList, _extends({\n        key: \"list\",\n        options: options,\n        visibleOptions: visibleOptions,\n        searchValue: searchValue,\n        activeOptionIndex: activeOptionIndex,\n        onOptionClick: this.onOptionClick,\n        singleSelection: singleSelection,\n        ref: this.optionsListRef,\n        renderOption: renderOption,\n        height: height,\n        allowExclusions: allowExclusions\n      }, listProps));\n      return _react.default.createElement(\"div\", _extends({\n        className: classes,\n        onKeyDown: this.onKeyDown,\n        onBlur: this.onContainerBlur\n      }, rest), children && children(list, search));\n    }\n  }]);\n\n  return EuiSelectable;\n}(_react.Component);\n\nexports.EuiSelectable = EuiSelectable;\n\n_defineProperty(EuiSelectable, \"defaultProps\", {\n  options: [],\n  singleSelection: false\n});\n\nEuiSelectable.propTypes = {\n  className: _propTypes.default.string,\n  \"aria-label\": _propTypes.default.string,\n  \"data-test-subj\": _propTypes.default.string,\n\n  /**\n       * Hooks up a search box to filter the list\n       */\n  searchable: _propTypes.default.oneOfType([_propTypes.default.oneOf([false]), _propTypes.default.oneOf([true])]),\n\n  /**\n       * Passes props down to the `EuiFieldSearch`\n       */\n  searchProps: _propTypes.default.shape({}),\n\n  /**\n       * Function that takes the `list` node and then\n       * the `search` node (if `searchable` is applied)\n       */\n  children: _propTypes.default.func,\n\n  /**\n       * Array or Option objects, see docs for props\n       */\n  options: _propTypes.default.arrayOf(_propTypes.default.shape({\n    /**\n       * Must be unique across items (todo: fix this)\n       */\n    label: _propTypes.default.string.isRequired,\n\n    /**\n       * Leave off to indicate not selected,\n       * 'on' to indicate inclusion and\n       * 'off' to indicate exclusion\n       */\n    checked: _propTypes.default.oneOf([\"on\", \"off\", undefined]),\n    disabled: _propTypes.default.bool,\n\n    /**\n       * Set to true to indicate object is just a grouping label, not a selectable item\n       */\n    isGroupLabel: _propTypes.default.bool,\n\n    /**\n       * Node to add between the selection icon and the label\n       */\n    prepend: _propTypes.default.node,\n\n    /**\n       * Node to add to the far right of the item\n       */\n    append: _propTypes.default.node,\n    ref: _propTypes.default.func,\n    className: _propTypes.default.string,\n    \"aria-label\": _propTypes.default.string,\n    \"data-test-subj\": _propTypes.default.string\n  }).isRequired).isRequired,\n\n  /**\n       * Passes back the altered `options` array with selected options as\n       */\n  onChange: _propTypes.default.func,\n\n  /**\n       * Sets the single selection policy of\n       * `false`: allows multiple selection\n       * `true`: only allows one selection\n       * `always`: can and must have only one selection\n       */\n  singleSelection: _propTypes.default.oneOfType([_propTypes.default.oneOf([\"always\"]), _propTypes.default.bool.isRequired]),\n\n  /**\n       * Allows marking options as checked = 'off' as well as 'on'\n       */\n  allowExclusions: _propTypes.default.bool,\n\n  /**\n       * Show an loading indicator while you load and hook up your data\n       */\n  isLoading: _propTypes.default.bool,\n\n  /**\n       * Sets the max height in pixels or pass `full` to allow\n       * the whole group to fill the height of its container and\n       * allows the list grow as well\n       */\n  height: _propTypes.default.oneOfType([_propTypes.default.number.isRequired, _propTypes.default.oneOf([\"full\"])]),\n\n  /**\n       * See `EuiSelectableList`\n       */\n  listProps: _propTypes.default.any,\n\n  /**\n       * Custom render function for each option.\n       * Returns (option, searchValue)\n       */\n  renderOption: _propTypes.default.func\n};\nEuiSelectable.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [{\n    \"name\": \"hasActiveOption\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [],\n    \"returns\": null\n  }, {\n    \"name\": \"onKeyDown\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"e\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"incrementActiveOptionIndex\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"amount\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"clearActiveOption\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [],\n    \"returns\": null\n  }, {\n    \"name\": \"onSearchChange\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"visibleOptions\",\n      \"type\": null\n    }, {\n      \"name\": \"searchValue\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"onContainerBlur\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [],\n    \"returns\": null\n  }, {\n    \"name\": \"onOptionClick\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"options\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }],\n  \"displayName\": \"EuiSelectable\",\n  \"props\": {\n    \"options\": {\n      \"defaultValue\": {\n        \"value\": \"[]\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"arrayOf\",\n        \"value\": {\n          \"name\": \"shape\",\n          \"value\": {\n            \"label\": {\n              \"name\": \"string\",\n              \"description\": \"Must be unique across items (todo: fix this)\",\n              \"required\": true\n            },\n            \"checked\": {\n              \"name\": \"enum\",\n              \"value\": [{\n                \"value\": \"\\\"on\\\"\",\n                \"computed\": false\n              }, {\n                \"value\": \"\\\"off\\\"\",\n                \"computed\": false\n              }, {\n                \"value\": \"undefined\",\n                \"computed\": true\n              }],\n              \"description\": \"Leave off to indicate not selected,\\n'on' to indicate inclusion and\\n'off' to indicate exclusion\",\n              \"required\": false\n            },\n            \"disabled\": {\n              \"name\": \"bool\",\n              \"required\": false\n            },\n            \"isGroupLabel\": {\n              \"name\": \"bool\",\n              \"description\": \"Set to true to indicate object is just a grouping label, not a selectable item\",\n              \"required\": false\n            },\n            \"prepend\": {\n              \"name\": \"node\",\n              \"description\": \"Node to add between the selection icon and the label\",\n              \"required\": false\n            },\n            \"append\": {\n              \"name\": \"node\",\n              \"description\": \"Node to add to the far right of the item\",\n              \"required\": false\n            },\n            \"ref\": {\n              \"name\": \"func\",\n              \"required\": false\n            },\n            \"className\": {\n              \"name\": \"string\",\n              \"required\": false\n            },\n            \"aria-label\": {\n              \"name\": \"string\",\n              \"required\": false\n            },\n            \"data-test-subj\": {\n              \"name\": \"string\",\n              \"required\": false\n            }\n          }\n        }\n      },\n      \"required\": false,\n      \"description\": \"Array or Option objects, see docs for props\"\n    },\n    \"singleSelection\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"union\",\n        \"value\": [{\n          \"name\": \"enum\",\n          \"value\": [{\n            \"value\": \"\\\"always\\\"\",\n            \"computed\": false\n          }]\n        }, {\n          \"name\": \"bool\"\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Sets the single selection policy of\\n`false`: allows multiple selection\\n`true`: only allows one selection\\n`always`: can and must have only one selection\"\n    },\n    \"className\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"aria-label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"data-test-subj\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"searchable\": {\n      \"type\": {\n        \"name\": \"union\",\n        \"value\": [{\n          \"name\": \"enum\",\n          \"value\": [{\n            \"value\": \"false\",\n            \"computed\": false\n          }]\n        }, {\n          \"name\": \"enum\",\n          \"value\": [{\n            \"value\": \"true\",\n            \"computed\": false\n          }]\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Hooks up a search box to filter the list\"\n    },\n    \"searchProps\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {}\n      },\n      \"required\": false,\n      \"description\": \"Passes props down to the `EuiFieldSearch`\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"Function that takes the `list` node and then\\nthe `search` node (if `searchable` is applied)\"\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"Passes back the altered `options` array with selected options as\"\n    },\n    \"allowExclusions\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Allows marking options as checked = 'off' as well as 'on'\"\n    },\n    \"isLoading\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Show an loading indicator while you load and hook up your data\"\n    },\n    \"height\": {\n      \"type\": {\n        \"name\": \"union\",\n        \"value\": [{\n          \"name\": \"number\"\n        }, {\n          \"name\": \"enum\",\n          \"value\": [{\n            \"value\": \"\\\"full\\\"\",\n            \"computed\": false\n          }]\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Sets the max height in pixels or pass `full` to allow\\nthe whole group to fill the height of its container and\\nallows the list grow as well\"\n    },\n    \"listProps\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"See `EuiSelectableList`\"\n    },\n    \"renderOption\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"Custom render function for each option.\\nReturns (option, searchValue)\"\n    }\n  }\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/selectable/selectable.tsx"],"names":["EuiSelectable","props","state","activeOptionIndex","e","optionsList","optionsListRef","current","keyCode","comboBoxKeyCodes","UP","preventDefault","stopPropagation","incrementActiveOptionIndex","DOWN","ENTER","onAddOrRemoveOption","visibleOptions","TAB","hasActiveOption","onKeyDown","clearActiveOption","amount","length","setState","nextActiveOptionIndex","direction","isGroupLabel","undefined","searchValue","options","onChange","singleSelection","initialSearchValue","selectedOptions","filter","option","checked","includes","indexOf","id","children","className","searchable","searchProps","isLoading","listProps","renderOption","height","allowExclusions","rest","messageContent","classes","search","onSearchChange","list","onOptionClick","onContainerBlur","Component"],"mappings":"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","sourcesContent":["import React, { Component, createRef, Fragment } from 'react';\nimport PropTypes from \"prop-types\";\nimport classNames from 'classnames';\nimport { EuiSelectableSearch } from './selectable_search';\nimport { EuiSelectableMessage } from './selectable_message';\nimport { EuiSelectableList } from './selectable_list';\nimport { EuiLoadingChart } from '../loading';\nimport { getMatchingOptions } from './matching_options';\nimport { comboBoxKeyCodes } from '../../services';\nimport { TAB } from '../../services/key_codes';\nimport { EuiI18n } from '../i18n';\nexport class EuiSelectable extends Component {\n  static defaultProps = {\n    options: [],\n    singleSelection: false\n  };\n  optionsListRef = createRef();\n\n  constructor(props) {\n    super(props);\n    const {\n      options,\n      singleSelection\n    } = props;\n    const initialSearchValue = '';\n    const visibleOptions = getMatchingOptions(options, initialSearchValue); // ensure that the currently selected single option is active if it is in the visibleOptions\n\n    const selectedOptions = options.filter(option => option.checked);\n    let activeOptionIndex;\n\n    if (singleSelection && selectedOptions.length === 1) {\n      if (visibleOptions.includes(selectedOptions[0])) {\n        activeOptionIndex = visibleOptions.indexOf(selectedOptions[0]);\n      }\n    }\n\n    this.state = {\n      activeOptionIndex,\n      searchValue: initialSearchValue,\n      visibleOptions\n    };\n  }\n\n  hasActiveOption = () => {\n    return this.state.activeOptionIndex != null;\n  };\n  onKeyDown = e => {\n    const optionsList = this.optionsListRef.current;\n\n    switch (e.keyCode) {\n      case comboBoxKeyCodes.UP:\n        e.preventDefault();\n        e.stopPropagation();\n        this.incrementActiveOptionIndex(-1);\n        break;\n\n      case comboBoxKeyCodes.DOWN:\n        e.preventDefault();\n        e.stopPropagation();\n        this.incrementActiveOptionIndex(1);\n        break;\n\n      case comboBoxKeyCodes.ENTER:\n        e.stopPropagation();\n\n        if (this.state.activeOptionIndex != null && optionsList) {\n          optionsList.onAddOrRemoveOption(this.state.visibleOptions[this.state.activeOptionIndex]);\n        }\n\n        break;\n\n      case TAB:\n        // Disallow tabbing when the user is navigating the options.\n        // TODO: Can we force the tab to the next sibling element?\n        if (this.hasActiveOption()) {\n          e.preventDefault();\n          e.stopPropagation();\n        }\n\n        break;\n\n      default:\n        if (this.props.onKeyDown) {\n          this.props.onKeyDown(e);\n        }\n\n        this.clearActiveOption();\n    }\n  };\n  incrementActiveOptionIndex = amount => {\n    // If there are no options available, do nothing.\n    if (!this.state.visibleOptions.length) {\n      return;\n    }\n\n    this.setState(({\n      activeOptionIndex,\n      visibleOptions\n    }) => {\n      let nextActiveOptionIndex;\n\n      if (activeOptionIndex == null) {\n        // If this is the beginning of the user's keyboard navigation of the menu, then we'll focus\n        // either the first or last item.\n        nextActiveOptionIndex = amount < 0 ? visibleOptions.length - 1 : 0;\n      } else {\n        nextActiveOptionIndex = activeOptionIndex + amount;\n\n        if (nextActiveOptionIndex < 0) {\n          nextActiveOptionIndex = visibleOptions.length - 1;\n        } else if (nextActiveOptionIndex === visibleOptions.length) {\n          nextActiveOptionIndex = 0;\n        }\n      } // Group titles are included in option list but are not selectable\n      // Skip group title options\n\n\n      const direction = amount > 0 ? 1 : -1;\n\n      while (visibleOptions[nextActiveOptionIndex].isGroupLabel) {\n        nextActiveOptionIndex = nextActiveOptionIndex + direction;\n\n        if (nextActiveOptionIndex < 0) {\n          nextActiveOptionIndex = visibleOptions.length - 1;\n        } else if (nextActiveOptionIndex === visibleOptions.length) {\n          nextActiveOptionIndex = 0;\n        }\n      }\n\n      return {\n        activeOptionIndex: nextActiveOptionIndex\n      };\n    });\n  };\n  clearActiveOption = () => {\n    this.setState({\n      activeOptionIndex: undefined\n    });\n  };\n  onSearchChange = (visibleOptions, searchValue) => {\n    this.setState({\n      visibleOptions,\n      searchValue\n    });\n  };\n  onContainerBlur = () => {\n    this.clearActiveOption();\n  };\n  onOptionClick = options => {\n    this.setState(state => ({\n      visibleOptions: getMatchingOptions(options, state.searchValue)\n    }));\n\n    if (this.props.onChange) {\n      this.props.onChange(options);\n    }\n  };\n\n  render() {\n    const {\n      id,\n      children,\n      className,\n      options,\n      onChange,\n      searchable,\n      searchProps,\n      singleSelection,\n      isLoading,\n      listProps,\n      renderOption,\n      height,\n      allowExclusions,\n      ...rest\n    } = this.props;\n    const {\n      searchValue,\n      visibleOptions,\n      activeOptionIndex\n    } = this.state;\n    let messageContent;\n\n    if (isLoading) {\n      messageContent = <Fragment>\n          <EuiLoadingChart size=\"m\" mono />\n          <br />\n          <p>\n            <EuiI18n token=\"euiSelectable.loadingOptions\" default=\"Loading options\" />\n          </p>\n        </Fragment>;\n    } else if (searchValue && visibleOptions.length === 0) {\n      messageContent = <p>\n          <EuiI18n token=\"euiSelectable.noMatchingOptions\" default=\"{searchValue} doesn't match any options\" values={{\n          searchValue: <strong>{searchValue}</strong>\n        }} />\n        </p>;\n    } else if (!options.length) {\n      messageContent = <p>\n          <EuiI18n token=\"euiSelectable.noAvailableOptions\" default=\"No options available\" />\n        </p>;\n    }\n\n    const classes = classNames('euiSelectable', {\n      'euiSelectable-fullHeight': height === 'full'\n    }, className);\n    const search = searchable ? <EuiSelectableSearch key=\"listSearch\" options={options} onChange={this.onSearchChange} {...searchProps} /> : undefined;\n    const list = messageContent ? <EuiSelectableMessage key=\"listMessage\">\n        {messageContent}\n      </EuiSelectableMessage> : <EuiSelectableList key=\"list\" options={options} visibleOptions={visibleOptions} searchValue={searchValue} activeOptionIndex={activeOptionIndex} onOptionClick={this.onOptionClick} singleSelection={singleSelection} ref={this.optionsListRef} renderOption={renderOption} height={height} allowExclusions={allowExclusions} {...listProps} />;\n    return <div className={classes} onKeyDown={this.onKeyDown} onBlur={this.onContainerBlur} {...rest}>\n        {children && children(list, search)}\n      </div>;\n  }\n\n}\nEuiSelectable.propTypes = {\n  className: PropTypes.string,\n  \"aria-label\": PropTypes.string,\n  \"data-test-subj\": PropTypes.string,\n\n  /**\n       * Hooks up a search box to filter the list\n       */\n  searchable: PropTypes.oneOfType([PropTypes.oneOf([false]), PropTypes.oneOf([true])]),\n\n  /**\n       * Passes props down to the `EuiFieldSearch`\n       */\n  searchProps: PropTypes.shape({}),\n\n  /**\n       * Function that takes the `list` node and then\n       * the `search` node (if `searchable` is applied)\n       */\n  children: PropTypes.func,\n\n  /**\n       * Array or Option objects, see docs for props\n       */\n  options: PropTypes.arrayOf(PropTypes.shape({\n    /**\n       * Must be unique across items (todo: fix this)\n       */\n    label: PropTypes.string.isRequired,\n\n    /**\n       * Leave off to indicate not selected,\n       * 'on' to indicate inclusion and\n       * 'off' to indicate exclusion\n       */\n    checked: PropTypes.oneOf([\"on\", \"off\", undefined]),\n    disabled: PropTypes.bool,\n\n    /**\n       * Set to true to indicate object is just a grouping label, not a selectable item\n       */\n    isGroupLabel: PropTypes.bool,\n\n    /**\n       * Node to add between the selection icon and the label\n       */\n    prepend: PropTypes.node,\n\n    /**\n       * Node to add to the far right of the item\n       */\n    append: PropTypes.node,\n    ref: PropTypes.func,\n    className: PropTypes.string,\n    \"aria-label\": PropTypes.string,\n    \"data-test-subj\": PropTypes.string\n  }).isRequired).isRequired,\n\n  /**\n       * Passes back the altered `options` array with selected options as\n       */\n  onChange: PropTypes.func,\n\n  /**\n       * Sets the single selection policy of\n       * `false`: allows multiple selection\n       * `true`: only allows one selection\n       * `always`: can and must have only one selection\n       */\n  singleSelection: PropTypes.oneOfType([PropTypes.oneOf([\"always\"]), PropTypes.bool.isRequired]),\n\n  /**\n       * Allows marking options as checked = 'off' as well as 'on'\n       */\n  allowExclusions: PropTypes.bool,\n\n  /**\n       * Show an loading indicator while you load and hook up your data\n       */\n  isLoading: PropTypes.bool,\n\n  /**\n       * Sets the max height in pixels or pass `full` to allow\n       * the whole group to fill the height of its container and\n       * allows the list grow as well\n       */\n  height: PropTypes.oneOfType([PropTypes.number.isRequired, PropTypes.oneOf([\"full\"])]),\n\n  /**\n       * See `EuiSelectableList`\n       */\n  listProps: PropTypes.any,\n\n  /**\n       * Custom render function for each option.\n       * Returns (option, searchValue)\n       */\n  renderOption: PropTypes.func\n};"]}]}