{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/search_bar/query/operators.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/search_bar/query/operators.js","mtime":1565204169990},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.lte = exports.lt = exports.gte = exports.gt = exports.exact = exports.eq = void 0;\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\nrequire(\"core-js/modules/es7.array.includes\");\n\nrequire(\"core-js/modules/es6.string.includes\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nvar _date_format = require(\"./date_format\");\n\nvar _date_value = require(\"./date_value\");\n\nvar _predicate = require(\"../../../services/predicate\");\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar utc = _moment.default.utc;\n\nvar resolveValueAsDate = function resolveValueAsDate(value) {\n  if (_moment.default.isMoment(value)) {\n    return value;\n  }\n\n  if (_moment.default.isDate(value) || (0, _predicate.isNumber)(value)) {\n    return (0, _moment.default)(value);\n  }\n\n  return _date_format.dateFormat.parse(value.toString());\n};\n\nvar defaultEqOptions = {\n  ignoreCase: true\n};\n\nvar eq = function eq(fieldValue, clauseValue) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  options = _objectSpread({}, defaultEqOptions, options);\n\n  if ((0, _predicate.isNil)(fieldValue) || (0, _predicate.isNil)(clauseValue)) {\n    return fieldValue === clauseValue;\n  }\n\n  if ((0, _date_value.isDateValue)(clauseValue)) {\n    var dateFieldValue = resolveValueAsDate(fieldValue);\n\n    if (clauseValue.granularity) {\n      return clauseValue.granularity.isSame(dateFieldValue, clauseValue.resolve());\n    }\n\n    return dateFieldValue.isSame(clauseValue.resolve());\n  }\n\n  if ((0, _predicate.isString)(fieldValue)) {\n    if (options.exactMatch === true) {\n      return options.ignoreCase ? fieldValue.toLowerCase() === clauseValue.toString().toLowerCase() : fieldValue === clauseValue.toString();\n    } else {\n      return options.ignoreCase ? fieldValue.toLowerCase().includes(clauseValue.toString().toLowerCase()) : fieldValue.includes(clauseValue.toString());\n    }\n  }\n\n  if ((0, _predicate.isNumber)(fieldValue)) {\n    clauseValue = Number(clauseValue);\n    return fieldValue === clauseValue;\n  }\n\n  if ((0, _predicate.isBoolean)(fieldValue)) {\n    return clauseValue === fieldValue;\n  }\n\n  if ((0, _predicate.isDateLike)(fieldValue)) {\n    var date = resolveValueAsDate(clauseValue);\n\n    if (!date.isValid()) {\n      return false;\n    }\n\n    var granularity = (0, _date_format.dateGranularity)(date);\n\n    if (!granularity) {\n      return utc(fieldValue).isSame(date);\n    }\n\n    return granularity.isSame(fieldValue, date);\n  }\n\n  if ((0, _predicate.isArray)(fieldValue)) {\n    if (fieldValue.length > 0) {\n      return fieldValue.some(function (item) {\n        return eq(item, clauseValue, options);\n      });\n    } else {\n      return eq('', clauseValue, options);\n    }\n  }\n\n  return false; // unknown value type\n};\n\nexports.eq = eq;\n\nvar exact = function exact(fieldValue, clauseValue) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return eq(fieldValue, clauseValue, _objectSpread({}, options, {\n    exactMatch: true\n  }));\n};\n\nexports.exact = exact;\n\nvar greaterThen = function greaterThen(fieldValue, clauseValue) {\n  var inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if ((0, _date_value.isDateValue)(clauseValue)) {\n    var clauseDateValue = clauseValue.resolve();\n\n    if (!clauseValue.granularity) {\n      return inclusive ? utc(fieldValue).isSameOrAfter(clauseDateValue) : utc(fieldValue).isAfter(clauseDateValue);\n    }\n\n    if (inclusive) {\n      return utc(fieldValue).isSameOrAfter(clauseValue.granularity.start(clauseDateValue));\n    }\n\n    return utc(fieldValue).isSameOrAfter(clauseValue.granularity.startOfNext(clauseDateValue));\n  }\n\n  if ((0, _predicate.isString)(fieldValue)) {\n    var str = clauseValue.toString();\n    return inclusive ? fieldValue >= str : fieldValue > str;\n  }\n\n  if ((0, _predicate.isNumber)(fieldValue)) {\n    var number = Number(clauseValue);\n    return inclusive ? fieldValue >= number : fieldValue > number;\n  }\n\n  if ((0, _predicate.isDateLike)(fieldValue)) {\n    var date = resolveValueAsDate(clauseValue);\n    var granularity = (0, _date_format.dateGranularity)(date);\n\n    if (!granularity) {\n      return inclusive ? utc(fieldValue).isSameOrAfter(date) : utc(fieldValue).isAfter(date);\n    }\n\n    if (inclusive) {\n      return utc(fieldValue).isSameOrAfter(granularity.start(date));\n    }\n\n    return utc(fieldValue).isSameOrAfter(granularity.startOfNext(date));\n  }\n\n  if ((0, _predicate.isArray)(fieldValue)) {\n    return fieldValue.all(function (item) {\n      return greaterThen(item, clauseValue, inclusive);\n    });\n  }\n\n  return false; // unsupported value type\n};\n\nvar gt = function gt(fieldValue, clauseValue) {\n  if ((0, _predicate.isNil)(fieldValue) || (0, _predicate.isNil)(clauseValue)) {\n    return false;\n  }\n\n  return greaterThen(fieldValue, clauseValue);\n};\n\nexports.gt = gt;\n\nvar gte = function gte(fieldValue, clauseValue) {\n  if ((0, _predicate.isNil)(fieldValue) || (0, _predicate.isNil)(clauseValue)) {\n    return fieldValue === clauseValue;\n  }\n\n  return greaterThen(fieldValue, clauseValue, true);\n};\n\nexports.gte = gte;\n\nvar lt = function lt(fieldValue, clauseValue) {\n  if ((0, _predicate.isNil)(fieldValue) || (0, _predicate.isNil)(clauseValue)) {\n    return false;\n  }\n\n  return !greaterThen(fieldValue, clauseValue, true);\n};\n\nexports.lt = lt;\n\nvar lte = function lte(fieldValue, clauseValue) {\n  if ((0, _predicate.isNil)(fieldValue) || (0, _predicate.isNil)(clauseValue)) {\n    return fieldValue === clauseValue;\n  }\n\n  return !greaterThen(fieldValue, clauseValue);\n};\n\nexports.lte = lte;",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/search_bar/query/operators.js"],"names":["utc","moment","resolveValueAsDate","value","isMoment","isDate","dateFormat","parse","toString","defaultEqOptions","ignoreCase","eq","fieldValue","clauseValue","options","dateFieldValue","granularity","isSame","resolve","exactMatch","toLowerCase","includes","Number","date","isValid","length","some","item","exact","greaterThen","inclusive","clauseDateValue","isSameOrAfter","isAfter","start","startOfNext","str","number","all","gt","gte","lt","lte"],"mappings":"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","sourcesContent":["import { dateFormat, dateGranularity } from './date_format';\nimport { isDateValue } from './date_value';\nimport {\n  isArray,\n  isBoolean,\n  isNumber,\n  isString,\n  isDateLike,\n  isNil,\n} from '../../../services/predicate';\nimport moment from 'moment';\nconst utc = moment.utc;\n\nconst resolveValueAsDate = value => {\n  if (moment.isMoment(value)) {\n    return value;\n  }\n  if (moment.isDate(value) || isNumber(value)) {\n    return moment(value);\n  }\n  return dateFormat.parse(value.toString());\n};\n\nconst defaultEqOptions = {\n  ignoreCase: true,\n};\n\nexport const eq = (fieldValue, clauseValue, options = {}) => {\n  options = { ...defaultEqOptions, ...options };\n\n  if (isNil(fieldValue) || isNil(clauseValue)) {\n    return fieldValue === clauseValue;\n  }\n\n  if (isDateValue(clauseValue)) {\n    const dateFieldValue = resolveValueAsDate(fieldValue);\n    if (clauseValue.granularity) {\n      return clauseValue.granularity.isSame(\n        dateFieldValue,\n        clauseValue.resolve()\n      );\n    }\n    return dateFieldValue.isSame(clauseValue.resolve());\n  }\n\n  if (isString(fieldValue)) {\n    if (options.exactMatch === true) {\n      return options.ignoreCase\n        ? fieldValue.toLowerCase() === clauseValue.toString().toLowerCase()\n        : fieldValue === clauseValue.toString();\n    } else {\n      return options.ignoreCase\n        ? fieldValue\n            .toLowerCase()\n            .includes(clauseValue.toString().toLowerCase())\n        : fieldValue.includes(clauseValue.toString());\n    }\n  }\n\n  if (isNumber(fieldValue)) {\n    clauseValue = Number(clauseValue);\n    return fieldValue === clauseValue;\n  }\n\n  if (isBoolean(fieldValue)) {\n    return clauseValue === fieldValue;\n  }\n\n  if (isDateLike(fieldValue)) {\n    const date = resolveValueAsDate(clauseValue);\n    if (!date.isValid()) {\n      return false;\n    }\n    const granularity = dateGranularity(date);\n    if (!granularity) {\n      return utc(fieldValue).isSame(date);\n    }\n    return granularity.isSame(fieldValue, date);\n  }\n\n  if (isArray(fieldValue)) {\n    if (fieldValue.length > 0) {\n      return fieldValue.some(item => eq(item, clauseValue, options));\n    } else {\n      return eq('', clauseValue, options);\n    }\n  }\n\n  return false; // unknown value type\n};\n\nexport const exact = (fieldValue, clauseValue, options = {}) => {\n  return eq(fieldValue, clauseValue, { ...options, exactMatch: true });\n};\n\nconst greaterThen = (fieldValue, clauseValue, inclusive = false) => {\n  if (isDateValue(clauseValue)) {\n    const clauseDateValue = clauseValue.resolve();\n    if (!clauseValue.granularity) {\n      return inclusive\n        ? utc(fieldValue).isSameOrAfter(clauseDateValue)\n        : utc(fieldValue).isAfter(clauseDateValue);\n    }\n    if (inclusive) {\n      return utc(fieldValue).isSameOrAfter(\n        clauseValue.granularity.start(clauseDateValue)\n      );\n    }\n    return utc(fieldValue).isSameOrAfter(\n      clauseValue.granularity.startOfNext(clauseDateValue)\n    );\n  }\n\n  if (isString(fieldValue)) {\n    const str = clauseValue.toString();\n    return inclusive ? fieldValue >= str : fieldValue > str;\n  }\n\n  if (isNumber(fieldValue)) {\n    const number = Number(clauseValue);\n    return inclusive ? fieldValue >= number : fieldValue > number;\n  }\n\n  if (isDateLike(fieldValue)) {\n    const date = resolveValueAsDate(clauseValue);\n    const granularity = dateGranularity(date);\n    if (!granularity) {\n      return inclusive\n        ? utc(fieldValue).isSameOrAfter(date)\n        : utc(fieldValue).isAfter(date);\n    }\n    if (inclusive) {\n      return utc(fieldValue).isSameOrAfter(granularity.start(date));\n    }\n    return utc(fieldValue).isSameOrAfter(granularity.startOfNext(date));\n  }\n\n  if (isArray(fieldValue)) {\n    return fieldValue.all(item => greaterThen(item, clauseValue, inclusive));\n  }\n\n  return false; // unsupported value type\n};\n\nexport const gt = (fieldValue, clauseValue) => {\n  if (isNil(fieldValue) || isNil(clauseValue)) {\n    return false;\n  }\n  return greaterThen(fieldValue, clauseValue);\n};\n\nexport const gte = (fieldValue, clauseValue) => {\n  if (isNil(fieldValue) || isNil(clauseValue)) {\n    return fieldValue === clauseValue;\n  }\n  return greaterThen(fieldValue, clauseValue, true);\n};\n\nexport const lt = (fieldValue, clauseValue) => {\n  if (isNil(fieldValue) || isNil(clauseValue)) {\n    return false;\n  }\n  return !greaterThen(fieldValue, clauseValue, true);\n};\n\nexport const lte = (fieldValue, clauseValue) => {\n  if (isNil(fieldValue) || isNil(clauseValue)) {\n    return fieldValue === clauseValue;\n  }\n  return !greaterThen(fieldValue, clauseValue);\n};\n"]}]}