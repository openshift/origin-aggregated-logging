{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/services/string/to_initials.ts","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/services/string/to_initials.ts","mtime":1565204170078},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toInitials = toInitials;\nexports.MAX_INITIALS = void 0;\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\n/**\n * This function calculates the initials/acronym for a given name.\n * It defaults to only 2 characters and will take the first character (of each word).\n * If only one word is supplied for the name, it will only pass back the first letter of the word,\n * unless forced to 2 letters by setting `initialsLength` to `2`.\n * It will pass back the characters with the same casing as the original string\n * unless otherwise specified.\n *\n * @param {string} name The full name of the item to turn into initials\n * @param {number} initialsLength (Optional) How many characters to show (max 2 allowed)\n * @param {string} initials (Optional) Custom initials (max 2 characters)\n * @returns {string} True if the color is dark, false otherwise.\n */\nvar MAX_INITIALS = 2;\nexports.MAX_INITIALS = MAX_INITIALS;\n\nfunction toInitials(name, initialsLength, initials) {\n  // Calculate the number of initials to show, maxing out at MAX_INITIALS\n  var calculatedInitialsLength = initials ? initials.split(' ').length : name.split(' ').length;\n  calculatedInitialsLength = calculatedInitialsLength > MAX_INITIALS ? MAX_INITIALS : calculatedInitialsLength; // Check if initialsLength was passed and set to calculated, unless greater than MAX_INITIALS\n\n  if (initialsLength) {\n    calculatedInitialsLength = initialsLength <= MAX_INITIALS ? initialsLength : MAX_INITIALS;\n  }\n\n  var calculatedInitials; // A. Set to initials prop if exists (but trancate to 2 characters max unless length is supplied)\n\n  if (initials) {\n    calculatedInitials = initials.substring(0, calculatedInitialsLength);\n  } else {\n    if (name.trim() && name.split(' ').length > 1) {\n      // B. If there are any spaces in the name, set to first letter of each word\n      calculatedInitials = name.match(/\\b(\\w)/g);\n      calculatedInitials = calculatedInitials && calculatedInitials.join('').substring(0, calculatedInitialsLength);\n    } else {\n      // C. Set to the name's initials truncated based on calculated length\n      calculatedInitials = name.substring(0, calculatedInitialsLength);\n    }\n  }\n\n  return calculatedInitials;\n}",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/services/string/to_initials.ts"],"names":["MAX_INITIALS","toInitials","name","initialsLength","initials","calculatedInitialsLength","split","length","calculatedInitials","substring","trim","match","join"],"mappings":";;;;;;;;;;;;AAAA;;;;;;;;;;;;;AAcO,IAAMA,YAAY,GAAG,CAArB;;;AAEA,SAASC,UAAT,CACLC,IADK,EAELC,cAFK,EAGLC,QAHK,EAIU;AACf;AACA,MAAIC,wBAAgC,GAAGD,QAAQ,GAC3CA,QAAQ,CAACE,KAAT,CAAe,GAAf,EAAoBC,MADuB,GAE3CL,IAAI,CAACI,KAAL,CAAW,GAAX,EAAgBC,MAFpB;AAIAF,EAAAA,wBAAwB,GACtBA,wBAAwB,GAAGL,YAA3B,GACIA,YADJ,GAEIK,wBAHN,CANe,CAWf;;AACA,MAAIF,cAAJ,EAAoB;AAClBE,IAAAA,wBAAwB,GACtBF,cAAc,IAAIH,YAAlB,GAAiCG,cAAjC,GAAkDH,YADpD;AAED;;AAED,MAAIQ,kBAAJ,CAjBe,CAkBf;;AACA,MAAIJ,QAAJ,EAAc;AACZI,IAAAA,kBAAkB,GAAGJ,QAAQ,CAACK,SAAT,CAAmB,CAAnB,EAAsBJ,wBAAtB,CAArB;AACD,GAFD,MAEO;AACL,QAAIH,IAAI,CAACQ,IAAL,MAAeR,IAAI,CAACI,KAAL,CAAW,GAAX,EAAgBC,MAAhB,GAAyB,CAA5C,EAA+C;AAC7C;AACAC,MAAAA,kBAAkB,GAAGN,IAAI,CAACS,KAAL,CAAW,SAAX,CAArB;AACAH,MAAAA,kBAAkB,GAChBA,kBAAkB,IAClBA,kBAAkB,CAACI,IAAnB,CAAwB,EAAxB,EAA4BH,SAA5B,CAAsC,CAAtC,EAAyCJ,wBAAzC,CAFF;AAGD,KAND,MAMO;AACL;AACAG,MAAAA,kBAAkB,GAAGN,IAAI,CAACO,SAAL,CAAe,CAAf,EAAkBJ,wBAAlB,CAArB;AACD;AACF;;AAED,SAAOG,kBAAP;AACD","sourcesContent":["/**\n * This function calculates the initials/acronym for a given name.\n * It defaults to only 2 characters and will take the first character (of each word).\n * If only one word is supplied for the name, it will only pass back the first letter of the word,\n * unless forced to 2 letters by setting `initialsLength` to `2`.\n * It will pass back the characters with the same casing as the original string\n * unless otherwise specified.\n *\n * @param {string} name The full name of the item to turn into initials\n * @param {number} initialsLength (Optional) How many characters to show (max 2 allowed)\n * @param {string} initials (Optional) Custom initials (max 2 characters)\n * @returns {string} True if the color is dark, false otherwise.\n */\n\nexport const MAX_INITIALS = 2;\n\nexport function toInitials(\n  name: string,\n  initialsLength?: 1 | 2,\n  initials?: string\n): string | null {\n  // Calculate the number of initials to show, maxing out at MAX_INITIALS\n  let calculatedInitialsLength: number = initials\n    ? initials.split(' ').length\n    : name.split(' ').length;\n\n  calculatedInitialsLength =\n    calculatedInitialsLength > MAX_INITIALS\n      ? MAX_INITIALS\n      : calculatedInitialsLength;\n\n  // Check if initialsLength was passed and set to calculated, unless greater than MAX_INITIALS\n  if (initialsLength) {\n    calculatedInitialsLength =\n      initialsLength <= MAX_INITIALS ? initialsLength : MAX_INITIALS;\n  }\n\n  let calculatedInitials;\n  // A. Set to initials prop if exists (but trancate to 2 characters max unless length is supplied)\n  if (initials) {\n    calculatedInitials = initials.substring(0, calculatedInitialsLength);\n  } else {\n    if (name.trim() && name.split(' ').length > 1) {\n      // B. If there are any spaces in the name, set to first letter of each word\n      calculatedInitials = name.match(/\\b(\\w)/g);\n      calculatedInitials =\n        calculatedInitials &&\n        calculatedInitials.join('').substring(0, calculatedInitialsLength);\n    } else {\n      // C. Set to the name's initials truncated based on calculated length\n      calculatedInitials = name.substring(0, calculatedInitialsLength);\n    }\n  }\n\n  return calculatedInitials;\n}\n"]}]}