{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/common.ts","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/common.ts","mtime":1567631511598},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.keysOf = keysOf;\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\n// utility types:\n\n/**\n * Wraps Object.keys with proper typescript definition of the resulting array\n */\nfunction keysOf(obj) {\n  return Object.keys(obj);\n}",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/common.ts"],"names":["keysOf","obj","Object","keys"],"mappings":";;;;;;;;;;;;;AAqBA;;AAIA;;;AAGO,SAASA,MAAT,CAAsCC,GAAtC,EAAmD;AACxD,SAAOC,MAAM,CAACC,IAAP,CAAYF,GAAZ,CAAP;AACD","sourcesContent":["import {\n  AnchorHTMLAttributes,\n  ButtonHTMLAttributes,\n  Component,\n  FunctionComponent,\n  MouseEventHandler,\n  SFC,\n} from 'react';\n\nexport interface CommonProps {\n  className?: string;\n  'aria-label'?: string;\n  'data-test-subj'?: string;\n}\n\nexport type NoArgCallback<T> = () => T;\n\nexport type RefCallback<Element extends HTMLElement | null> = (\n  element: Element\n) => void;\n\n// utility types:\n\nexport type Omit<T, K> = Pick<T, Exclude<keyof T, K>>;\n\n/**\n * Wraps Object.keys with proper typescript definition of the resulting array\n */\nexport function keysOf<T, K extends keyof T>(obj: T): K[] {\n  return Object.keys(obj) as K[];\n}\n\nexport type PropsOf<C> = C extends SFC<infer SFCProps>\n  ? SFCProps\n  : C extends FunctionComponent<infer FunctionProps>\n  ? FunctionProps\n  : C extends Component<infer ComponentProps>\n  ? ComponentProps\n  : never;\n\n/*\nhttps://github.com/Microsoft/TypeScript/issues/28339\nProblem: Pick and Omit do not distribute over union types, which manifests when\noptional values become required after a Pick or Omit operation. These\nDistributive forms correctly operate on union types, preseving optionality.\n */\ntype UnionKeys<T> = T extends any ? keyof T : never;\nexport type DistributivePick<T, K extends UnionKeys<T>> = T extends any\n  ? Pick<T, Extract<keyof T, K>>\n  : never;\nexport type DistributiveOmit<T, K extends UnionKeys<T>> = T extends any\n  ? Omit<T, Extract<keyof T, K>>\n  : never;\n\n/*\nTypeScript's discriminated unions are overly permissive: as long as one type of the union is satisfied\nthe other types are not validated against. For example:\n\ntype Foo = {\n  value: string,\n  foo: string\n};\ntype Bar = {\n  value: number,\n  bar: string\n}\nfunction what(x: Foo | Bar) {\n  return x.value;\n}\n\nAs you would expect -\n\nwhat({ value: 'asdf', foo: 'asdf' }); // fine\nwhat({ value: 5, foo: 'asdf' }); // error\nwhat({ value: 5, bar: 'asdf' }); // fine\nwhat({ value: 'asdf', bar: 'asdf' }); // error\n\nHowever, if Foo is satisfied then you can pass any value you want to Bar's unique properties:\nwhat({ value: 'asdf', foo: 'asdf', bar: false }) // works\n\nTypeScript is okay with this as a type guard would detect the object is Foo and prevent accessing `bar`.\nUnfortunately this prevents feedback to the user about potentially unintentional effects, for example:\n\nA common pattern in EUI is to render something as a div OR as a button, depending on if an onClick prop is passed.\npassing additional props down through `...rest`, which can be specified as\n\ntype Spanlike = HTMLAttributes<HTMLSpanElement>;\ntype Buttonlike = { onClick: MouseEventHandler<HTMLButtonElement> }; // onClick is the discriminant\nReact.FunctionComponent<Spanlike | Buttonlike>\n\nInternally, the component would have a type guard to check if props contains `onClick` and resolve to Buttonlike.\nExternally, however, you could use the component as\n\n<Component value=\"buzz\"/>\n\nand no error would occur as the Spanlike type is satisfied and the type guard would prevent accessing button attributes.\nThis prevents immediate feedback to the develop, and would actually lead to React warnings as the `value` prop would\nstill propogate down to the span's props, which is invalid. The following two utility types provide a solution for\ncreating exclusive unions:\n\nReact.FunctionComponent<ExclusiveUnion<Spanlike, Buttonlike>>\n */\n\n/**\n * Returns member keys in U not present in T set to never\n * T = { 'one', 'two', 'three' }\n * U = { 'three', 'four', 'five' }\n * returns { 'four': never, 'five': never }\n */\nexport type DisambiguateSet<T, U> = {\n  [P in Exclude<keyof T, keyof U>]?: never\n};\n\n/**\n * Allow either T or U, preventing any additional keys of the other type from being present\n */\nexport type ExclusiveUnion<T, U> = (T | U) extends object // if there are any shared keys between T and U\n  ? (DisambiguateSet<T, U> & U) | (DisambiguateSet<U, T> & T) // otherwise the TS union is already unique\n  : T | U;\n\n/**\n * For components that conditionally render <button> or <a>\n * Convenience types for extending base props (T) and\n * element-specific props (P) with standard clickable properties\n *\n * These will likely be used together, along with `ExclusiveUnion`:\n *\n * type AnchorLike = PropsForAnchor<BaseProps>\n * type ButtonLike = PropsForButton<BaseProps>\n * type ComponentProps = ExlcusiveUnion<AnchorLike, ButtonLike>\n * const Component: FunctionComponent<ComponentProps> ...\n */\nexport type PropsForAnchor<T, P = {}> = T &\n  AnchorHTMLAttributes<HTMLAnchorElement> & {\n    href?: string;\n    onClick?: MouseEventHandler<HTMLAnchorElement>;\n  } & P;\n\nexport type PropsForButton<T, P = {}> = T &\n  ButtonHTMLAttributes<HTMLButtonElement> & {\n    onClick?: MouseEventHandler<HTMLButtonElement>;\n  } & P;\n"]}]}