{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/panel/panel.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/panel/panel.js","mtime":1567534071282},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EuiPanel = exports.SIZES = void 0;\n\nrequire(\"core-js/modules/es6.object.assign\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _beta_badge = require(\"../badge/beta_badge\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nvar paddingSizeToClassNameMap = {\n  none: null,\n  s: 'euiPanel--paddingSmall',\n  m: 'euiPanel--paddingMedium',\n  l: 'euiPanel--paddingLarge'\n};\nvar SIZES = Object.keys(paddingSizeToClassNameMap);\nexports.SIZES = SIZES;\n\nvar EuiPanel = function EuiPanel(_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      paddingSize = _ref.paddingSize,\n      hasShadow = _ref.hasShadow,\n      grow = _ref.grow,\n      panelRef = _ref.panelRef,\n      onClick = _ref.onClick,\n      betaBadgeLabel = _ref.betaBadgeLabel,\n      betaBadgeTooltipContent = _ref.betaBadgeTooltipContent,\n      betaBadgeTitle = _ref.betaBadgeTitle,\n      rest = _objectWithoutProperties(_ref, [\"children\", \"className\", \"paddingSize\", \"hasShadow\", \"grow\", \"panelRef\", \"onClick\", \"betaBadgeLabel\", \"betaBadgeTooltipContent\", \"betaBadgeTitle\"]);\n\n  var classes = (0, _classnames.default)('euiPanel', paddingSizeToClassNameMap[paddingSize], {\n    'euiPanel--shadow': hasShadow,\n    'euiPanel--flexGrowZero': !grow,\n    'euiPanel--isClickable': onClick,\n    'euiPanel--hasBetaBadge': betaBadgeLabel\n  }, className);\n  var PanelTag = onClick ? 'button' : 'div';\n  var props = {\n    ref: panelRef,\n    className: classes\n  }; // Avoid passing down this prop if it hasn't been supplied, in order to\n  // avoid noise in react-test-renderer snapshots.\n\n  if (onClick != null) {\n    props.onClick = onClick;\n  }\n\n  var optionalBetaBadge;\n\n  if (betaBadgeLabel) {\n    optionalBetaBadge = _react.default.createElement(\"span\", {\n      className: \"euiPanel__betaBadgeWrapper\"\n    }, _react.default.createElement(_beta_badge.EuiBetaBadge, {\n      label: betaBadgeLabel,\n      title: betaBadgeTitle,\n      tooltipContent: betaBadgeTooltipContent,\n      className: \"euiPanel__betaBadge\"\n    }));\n  }\n\n  return _react.default.createElement(PanelTag, _extends({}, props, rest), optionalBetaBadge, children);\n};\n\nexports.EuiPanel = EuiPanel;\nEuiPanel.propTypes = {\n  children: _propTypes.default.node,\n  className: _propTypes.default.string,\n\n  /**\n   * If active, adds a deeper shadow to the panel\n   */\n  hasShadow: _propTypes.default.bool,\n\n  /**\n   * Padding applied to the panel\n   */\n  paddingSize: _propTypes.default.oneOf(SIZES),\n\n  /**\n   * When true the panel will grow to match `EuiFlexItem`\n   */\n  grow: _propTypes.default.bool,\n  panelRef: _propTypes.default.func,\n  onClick: _propTypes.default.func,\n\n  /**\n   * Add a badge to the panel to label it as \"Beta\" or other non-GA state\n   */\n  betaBadgeLabel: _propTypes.default.string,\n\n  /**\n   * Add a description to the beta badge (will appear in a tooltip)\n   */\n  betaBadgeTooltipContent: _propTypes.default.node,\n\n  /**\n   * Optional title will be supplied as tooltip title or title attribute otherwise the label will be used\n   */\n  betaBadgeTitle: _propTypes.default.string\n};\nEuiPanel.defaultProps = {\n  paddingSize: 'm',\n  hasShadow: false,\n  grow: true\n};\nEuiPanel.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"EuiPanel\",\n  \"props\": {\n    \"paddingSize\": {\n      \"defaultValue\": {\n        \"value\": \"'m'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"none\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"s\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"m\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"l\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Padding applied to the panel\"\n    },\n    \"hasShadow\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"If active, adds a deeper shadow to the panel\"\n    },\n    \"grow\": {\n      \"defaultValue\": {\n        \"value\": \"true\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"When true the panel will grow to match `EuiFlexItem`\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"className\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"panelRef\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"onClick\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"betaBadgeLabel\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Add a badge to the panel to label it as \\\"Beta\\\" or other non-GA state\"\n    },\n    \"betaBadgeTooltipContent\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Add a description to the beta badge (will appear in a tooltip)\"\n    },\n    \"betaBadgeTitle\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Optional title will be supplied as tooltip title or title attribute otherwise the label will be used\"\n    }\n  }\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/panel/panel.js"],"names":["paddingSizeToClassNameMap","none","s","m","l","SIZES","Object","keys","EuiPanel","children","className","paddingSize","hasShadow","grow","panelRef","onClick","betaBadgeLabel","betaBadgeTooltipContent","betaBadgeTitle","rest","classes","PanelTag","props","ref","optionalBetaBadge","propTypes","PropTypes","node","string","bool","oneOf","func","defaultProps"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;;;AAEA,IAAMA,yBAAyB,GAAG;AAChCC,EAAAA,IAAI,EAAE,IAD0B;AAEhCC,EAAAA,CAAC,EAAE,wBAF6B;AAGhCC,EAAAA,CAAC,EAAE,yBAH6B;AAIhCC,EAAAA,CAAC,EAAE;AAJ6B,CAAlC;AAOO,IAAMC,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYP,yBAAZ,CAAd;;;AAEA,IAAMQ,QAAQ,GAAG,SAAXA,QAAW,OAYlB;AAAA,MAXJC,QAWI,QAXJA,QAWI;AAAA,MAVJC,SAUI,QAVJA,SAUI;AAAA,MATJC,WASI,QATJA,WASI;AAAA,MARJC,SAQI,QARJA,SAQI;AAAA,MAPJC,IAOI,QAPJA,IAOI;AAAA,MANJC,QAMI,QANJA,QAMI;AAAA,MALJC,OAKI,QALJA,OAKI;AAAA,MAJJC,cAII,QAJJA,cAII;AAAA,MAHJC,uBAGI,QAHJA,uBAGI;AAAA,MAFJC,cAEI,QAFJA,cAEI;AAAA,MADDC,IACC;;AACJ,MAAMC,OAAO,GAAG,yBACd,UADc,EAEdpB,yBAAyB,CAACW,WAAD,CAFX,EAGd;AACE,wBAAoBC,SADtB;AAEE,8BAA0B,CAACC,IAF7B;AAGE,6BAAyBE,OAH3B;AAIE,8BAA0BC;AAJ5B,GAHc,EASdN,SATc,CAAhB;AAYA,MAAMW,QAAQ,GAAGN,OAAO,GAAG,QAAH,GAAc,KAAtC;AAEA,MAAMO,KAAK,GAAG;AACZC,IAAAA,GAAG,EAAET,QADO;AAEZJ,IAAAA,SAAS,EAAEU;AAFC,GAAd,CAfI,CAoBJ;AACA;;AACA,MAAIL,OAAO,IAAI,IAAf,EAAqB;AACnBO,IAAAA,KAAK,CAACP,OAAN,GAAgBA,OAAhB;AACD;;AAED,MAAIS,iBAAJ;;AACA,MAAIR,cAAJ,EAAoB;AAClBQ,IAAAA,iBAAiB,GACf;AAAM,MAAA,SAAS,EAAC;AAAhB,OACE,6BAAC,wBAAD;AACE,MAAA,KAAK,EAAER,cADT;AAEE,MAAA,KAAK,EAAEE,cAFT;AAGE,MAAA,cAAc,EAAED,uBAHlB;AAIE,MAAA,SAAS,EAAC;AAJZ,MADF,CADF;AAUD;;AAED,SACE,6BAAC,QAAD,eAAcK,KAAd,EAAyBH,IAAzB,GACGK,iBADH,EAEGf,QAFH,CADF;AAMD,CA1DM;;;AA4DPD,QAAQ,CAACiB,SAAT,GAAqB;AACnBhB,EAAAA,QAAQ,EAAEiB,mBAAUC,IADD;AAEnBjB,EAAAA,SAAS,EAAEgB,mBAAUE,MAFF;;AAGnB;;;AAGAhB,EAAAA,SAAS,EAAEc,mBAAUG,IANF;;AAOnB;;;AAGAlB,EAAAA,WAAW,EAAEe,mBAAUI,KAAV,CAAgBzB,KAAhB,CAVM;;AAWnB;;;AAGAQ,EAAAA,IAAI,EAAEa,mBAAUG,IAdG;AAenBf,EAAAA,QAAQ,EAAEY,mBAAUK,IAfD;AAgBnBhB,EAAAA,OAAO,EAAEW,mBAAUK,IAhBA;;AAiBnB;;;AAGAf,EAAAA,cAAc,EAAEU,mBAAUE,MApBP;;AAsBnB;;;AAGAX,EAAAA,uBAAuB,EAAES,mBAAUC,IAzBhB;;AA2BnB;;;AAGAT,EAAAA,cAAc,EAAEQ,mBAAUE;AA9BP,CAArB;AAiCApB,QAAQ,CAACwB,YAAT,GAAwB;AACtBrB,EAAAA,WAAW,EAAE,GADS;AAEtBC,EAAAA,SAAS,EAAE,KAFW;AAGtBC,EAAAA,IAAI,EAAE;AAHgB,CAAxB","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport { EuiBetaBadge } from '../badge/beta_badge';\n\nconst paddingSizeToClassNameMap = {\n  none: null,\n  s: 'euiPanel--paddingSmall',\n  m: 'euiPanel--paddingMedium',\n  l: 'euiPanel--paddingLarge',\n};\n\nexport const SIZES = Object.keys(paddingSizeToClassNameMap);\n\nexport const EuiPanel = ({\n  children,\n  className,\n  paddingSize,\n  hasShadow,\n  grow,\n  panelRef,\n  onClick,\n  betaBadgeLabel,\n  betaBadgeTooltipContent,\n  betaBadgeTitle,\n  ...rest\n}) => {\n  const classes = classNames(\n    'euiPanel',\n    paddingSizeToClassNameMap[paddingSize],\n    {\n      'euiPanel--shadow': hasShadow,\n      'euiPanel--flexGrowZero': !grow,\n      'euiPanel--isClickable': onClick,\n      'euiPanel--hasBetaBadge': betaBadgeLabel,\n    },\n    className\n  );\n\n  const PanelTag = onClick ? 'button' : 'div';\n\n  const props = {\n    ref: panelRef,\n    className: classes,\n  };\n\n  // Avoid passing down this prop if it hasn't been supplied, in order to\n  // avoid noise in react-test-renderer snapshots.\n  if (onClick != null) {\n    props.onClick = onClick;\n  }\n\n  let optionalBetaBadge;\n  if (betaBadgeLabel) {\n    optionalBetaBadge = (\n      <span className=\"euiPanel__betaBadgeWrapper\">\n        <EuiBetaBadge\n          label={betaBadgeLabel}\n          title={betaBadgeTitle}\n          tooltipContent={betaBadgeTooltipContent}\n          className=\"euiPanel__betaBadge\"\n        />\n      </span>\n    );\n  }\n\n  return (\n    <PanelTag {...props} {...rest}>\n      {optionalBetaBadge}\n      {children}\n    </PanelTag>\n  );\n};\n\nEuiPanel.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  /**\n   * If active, adds a deeper shadow to the panel\n   */\n  hasShadow: PropTypes.bool,\n  /**\n   * Padding applied to the panel\n   */\n  paddingSize: PropTypes.oneOf(SIZES),\n  /**\n   * When true the panel will grow to match `EuiFlexItem`\n   */\n  grow: PropTypes.bool,\n  panelRef: PropTypes.func,\n  onClick: PropTypes.func,\n  /**\n   * Add a badge to the panel to label it as \"Beta\" or other non-GA state\n   */\n  betaBadgeLabel: PropTypes.string,\n\n  /**\n   * Add a description to the beta badge (will appear in a tooltip)\n   */\n  betaBadgeTooltipContent: PropTypes.node,\n\n  /**\n   * Optional title will be supplied as tooltip title or title attribute otherwise the label will be used\n   */\n  betaBadgeTitle: PropTypes.string,\n};\n\nEuiPanel.defaultProps = {\n  paddingSize: 'm',\n  hasShadow: false,\n  grow: true,\n};\n"]}]}