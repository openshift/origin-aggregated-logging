{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src-docs/src/services/string/render_to_html.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src-docs/src/services/string/render_to_html.js","mtime":1565204169423},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.renderToHtml = renderToHtml;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _enzyme = require(\"enzyme\");\n\nvar _enzymeAdapterReact = _interopRequireDefault(require(\"enzyme-adapter-react-16\"));\n\nvar _html = _interopRequireDefault(require(\"html\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _enzyme.configure)({\n  adapter: new _enzymeAdapterReact.default()\n});\n\nfunction renderToHtml(componentReference) {\n  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  // If there's a failure, just return an empty string. The actual component itself should\n  // trip an error boundary in the UI when it fails.\n  try {\n    // Create the React element, render it and get its HTML, then format it prettily.\n    var element = _react.default.createElement(componentReference, props);\n\n    var htmlString = (0, _enzyme.render)(element).html();\n    return _html.default.prettyPrint(htmlString, {\n      indent_size: 2,\n      unformatted: [] // Expand all tags, including spans\n\n    });\n  } catch (e) {\n    return '';\n  }\n}",{"version":3,"sources":["/Users/chanderprall/projects/eui/src-docs/src/services/string/render_to_html.js"],"names":["adapter","EnzymeAdapter","renderToHtml","componentReference","props","element","React","createElement","htmlString","html","prettyPrint","indent_size","unformatted","e"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;;AAEA;;;;AAEA,uBAAU;AAAEA,EAAAA,OAAO,EAAE,IAAIC,2BAAJ;AAAX,CAAV;;AAEO,SAASC,YAAT,CAAsBC,kBAAtB,EAAsD;AAAA,MAAZC,KAAY,uEAAJ,EAAI;;AAC3D;AACA;AACA,MAAI;AACF;AACA,QAAMC,OAAO,GAAGC,eAAMC,aAAN,CAAoBJ,kBAApB,EAAwCC,KAAxC,CAAhB;;AACA,QAAMI,UAAU,GAAG,oBAAOH,OAAP,EAAgBI,IAAhB,EAAnB;AACA,WAAOA,cAAKC,WAAL,CAAiBF,UAAjB,EAA6B;AAClCG,MAAAA,WAAW,EAAE,CADqB;AAElCC,MAAAA,WAAW,EAAE,EAFqB,CAEjB;;AAFiB,KAA7B,CAAP;AAID,GARD,CAQE,OAAOC,CAAP,EAAU;AACV,WAAO,EAAP;AACD;AACF","sourcesContent":["import React from 'react';\n\nimport { render, configure } from 'enzyme';\n\nimport EnzymeAdapter from 'enzyme-adapter-react-16';\n\nimport html from 'html';\n\nconfigure({ adapter: new EnzymeAdapter() });\n\nexport function renderToHtml(componentReference, props = {}) {\n  // If there's a failure, just return an empty string. The actual component itself should\n  // trip an error boundary in the UI when it fails.\n  try {\n    // Create the React element, render it and get its HTML, then format it prettily.\n    const element = React.createElement(componentReference, props);\n    const htmlString = render(element).html();\n    return html.prettyPrint(htmlString, {\n      indent_size: 2,\n      unformatted: [], // Expand all tags, including spans\n    });\n  } catch (e) {\n    return '';\n  }\n}\n"]}]}