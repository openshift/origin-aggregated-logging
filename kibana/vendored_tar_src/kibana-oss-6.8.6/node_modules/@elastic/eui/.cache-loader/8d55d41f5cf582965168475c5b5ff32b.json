{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/services/number/number.ts","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/services/number/number.ts","mtime":1565204170070},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isEvenlyDivisibleBy = isEvenlyDivisibleBy;\nexports.isWithinRange = void 0;\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\nvar isWithinRange = function isWithinRange(min, max, value) {\n  if (min === '' || max === '' || value === '') {\n    return false;\n  }\n\n  var val = Number(value);\n  return Number(min) <= val && val <= Number(max);\n}; // 1e-6 covers up to 10,000,000,000 factored by a decimal\n\n\nexports.isWithinRange = isWithinRange;\nvar EPSILON = 1e-6;\n\nfunction isEvenlyDivisibleBy(num, factor) {\n  var remainder = num % factor; // due to floating point issues the remainder needs to be within a margin instead of exactly 0\n  // 1 % 0.1          === 0.09999999999999995\n  // 1000000000 % 0.1 === 0.09999994448884877\n  // 1 % 0.05         === 0.04999999999999995\n  // Compare the smaller of (remainder, factor - remainder) to EPSILON\n\n  return Math.min(remainder, // remainder may be smallest, it is 0 in the well-formed case\n  Math.abs(factor - remainder) // otherwise the positive difference between factor and remainder\n  ) < EPSILON;\n}",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/services/number/number.ts"],"names":["isWithinRange","min","max","value","val","Number","EPSILON","isEvenlyDivisibleBy","num","factor","remainder","Math","abs"],"mappings":";;;;;;;;;;AAAO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAC3BC,GAD2B,EAE3BC,GAF2B,EAG3BC,KAH2B,EAIxB;AACH,MAAIF,GAAG,KAAK,EAAR,IAAcC,GAAG,KAAK,EAAtB,IAA4BC,KAAK,KAAK,EAA1C,EAA8C;AAC5C,WAAO,KAAP;AACD;;AAED,MAAMC,GAAG,GAAGC,MAAM,CAACF,KAAD,CAAlB;AACA,SAAOE,MAAM,CAACJ,GAAD,CAAN,IAAeG,GAAf,IAAsBA,GAAG,IAAIC,MAAM,CAACH,GAAD,CAA1C;AACD,CAXM,C,CAaP;;;;AACA,IAAMI,OAAO,GAAG,IAAhB;;AACO,SAASC,mBAAT,CAA6BC,GAA7B,EAA0CC,MAA1C,EAA0D;AAC/D,MAAMC,SAAS,GAAGF,GAAG,GAAGC,MAAxB,CAD+D,CAG/D;AACA;AACA;AACA;AAEA;;AACA,SACEE,IAAI,CAACV,GAAL,CACES,SADF,EACa;AACXC,EAAAA,IAAI,CAACC,GAAL,CAASH,MAAM,GAAGC,SAAlB,CAFF,CAE+B;AAF/B,MAGIJ,OAJN;AAMD","sourcesContent":["export const isWithinRange = (\n  min: number | string,\n  max: number | string,\n  value: number | string\n) => {\n  if (min === '' || max === '' || value === '') {\n    return false;\n  }\n\n  const val = Number(value);\n  return Number(min) <= val && val <= Number(max);\n};\n\n// 1e-6 covers up to 10,000,000,000 factored by a decimal\nconst EPSILON = 1e-6;\nexport function isEvenlyDivisibleBy(num: number, factor: number) {\n  const remainder = num % factor;\n\n  // due to floating point issues the remainder needs to be within a margin instead of exactly 0\n  // 1 % 0.1          === 0.09999999999999995\n  // 1000000000 % 0.1 === 0.09999994448884877\n  // 1 % 0.05         === 0.04999999999999995\n\n  // Compare the smaller of (remainder, factor - remainder) to EPSILON\n  return (\n    Math.min(\n      remainder, // remainder may be smallest, it is 0 in the well-formed case\n      Math.abs(factor - remainder) // otherwise the positive difference between factor and remainder\n    ) < EPSILON\n  );\n}\n"]}]}