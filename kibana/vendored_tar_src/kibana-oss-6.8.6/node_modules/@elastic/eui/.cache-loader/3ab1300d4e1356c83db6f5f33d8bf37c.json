{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/search_bar/filters/field_value_toggle_group_filter.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/search_bar/filters/field_value_toggle_group_filter.js","mtime":1565204169979},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FieldValueToggleGroupFilter = exports.FieldValueToggleGroupFilterConfigType = exports.FieldValueToggleGroupFilterItemType = void 0;\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/es6.object.set-prototype-of\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _filter_group = require(\"../../filter_group\");\n\nvar _prop_types = require(\"../../../utils/prop_types\");\n\nvar _query = require(\"../query\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar FieldValueToggleGroupFilterItemType = _propTypes.default.shape({\n  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.bool]).isRequired,\n  name: _propTypes.default.string.isRequired,\n  negatedName: _propTypes.default.string,\n  operator: _propTypes.default.oneOf(['eq', 'exact', 'gt', 'gte', 'lt', 'lte'])\n});\n\nexports.FieldValueToggleGroupFilterItemType = FieldValueToggleGroupFilterItemType;\n\nvar FieldValueToggleGroupFilterConfigType = _propTypes.default.shape({\n  type: _prop_types.EuiPropTypes.is('field_value_toggle_group').isRequired,\n  field: _propTypes.default.string.isRequired,\n  items: _propTypes.default.arrayOf(FieldValueToggleGroupFilterItemType).isRequired,\n  available: _propTypes.default.func // () => boolean\n\n});\n\nexports.FieldValueToggleGroupFilterConfigType = FieldValueToggleGroupFilterConfigType;\nvar FieldValueToggleGroupFilterPropTypes = {\n  index: _propTypes.default.number.isRequired,\n  config: FieldValueToggleGroupFilterConfigType.isRequired,\n  query: _propTypes.default.any.isRequired,\n  onChange: _propTypes.default.func.isRequired // (value: boolean) => void\n\n};\n\nvar FieldValueToggleGroupFilter =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(FieldValueToggleGroupFilter, _Component);\n\n  function FieldValueToggleGroupFilter(props) {\n    _classCallCheck(this, FieldValueToggleGroupFilter);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(FieldValueToggleGroupFilter).call(this, props));\n  }\n\n  _createClass(FieldValueToggleGroupFilter, [{\n    key: \"resolveDisplay\",\n    value: function resolveDisplay(config, query, item) {\n      var clause = query.getSimpleFieldClause(config.field, item.value);\n\n      if (clause) {\n        if (_query.Query.isMust(clause)) {\n          return {\n            active: true,\n            name: item.name\n          };\n        }\n\n        return {\n          active: true,\n          name: item.negatedName ? item.negatedName : \"Not \".concat(item.name)\n        };\n      }\n\n      return {\n        active: false,\n        name: item.name\n      };\n    }\n  }, {\n    key: \"valueChanged\",\n    value: function valueChanged(item, active) {\n      var field = this.props.config.field;\n      var value = item.value,\n          operator = item.operator;\n      var query = active ? this.props.query.removeSimpleFieldClauses(field) : this.props.query.removeSimpleFieldClauses(field).addSimpleFieldValue(field, value, true, operator);\n      this.props.onChange(query);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props = this.props,\n          config = _this$props.config,\n          query = _this$props.query;\n      return config.items.map(function (item, index) {\n        var _this$resolveDisplay = _this.resolveDisplay(config, query, item),\n            active = _this$resolveDisplay.active,\n            name = _this$resolveDisplay.name;\n\n        var onClick = function onClick() {\n          _this.valueChanged(item, active);\n        };\n\n        var key = \"field_value_toggle_filter_item_\".concat(index);\n        var isLastItem = index === config.items.length - 1;\n        return _react.default.createElement(_filter_group.EuiFilterButton, {\n          key: key,\n          onClick: onClick,\n          hasActiveFilters: active,\n          noDivider: !isLastItem,\n          \"aria-pressed\": !!active,\n          withNext: !isLastItem\n        }, name);\n      });\n    }\n  }]);\n\n  return FieldValueToggleGroupFilter;\n}(_react.Component);\n\nexports.FieldValueToggleGroupFilter = FieldValueToggleGroupFilter;\n\n_defineProperty(FieldValueToggleGroupFilter, \"propTypes\", FieldValueToggleGroupFilterPropTypes);\n\nFieldValueToggleGroupFilter.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [{\n    \"name\": \"resolveDisplay\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"config\",\n      \"type\": null\n    }, {\n      \"name\": \"query\",\n      \"type\": null\n    }, {\n      \"name\": \"item\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"valueChanged\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"item\",\n      \"type\": null\n    }, {\n      \"name\": \"active\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }],\n  \"displayName\": \"FieldValueToggleGroupFilter\",\n  \"props\": {\n    \"index\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"config\": {\n      \"type\": {\n        \"name\": \"custom\",\n        \"raw\": \"FieldValueToggleGroupFilterConfigType.isRequired\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"query\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/search_bar/filters/field_value_toggle_group_filter.js"],"names":["FieldValueToggleGroupFilterItemType","PropTypes","shape","value","oneOfType","string","number","bool","isRequired","name","negatedName","operator","oneOf","FieldValueToggleGroupFilterConfigType","type","EuiPropTypes","is","field","items","arrayOf","available","func","FieldValueToggleGroupFilterPropTypes","index","config","query","any","onChange","FieldValueToggleGroupFilter","props","item","clause","getSimpleFieldClause","Query","isMust","active","removeSimpleFieldClauses","addSimpleFieldValue","map","resolveDisplay","onClick","valueChanged","key","isLastItem","length","Component"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { EuiFilterButton } from '../../filter_group';\nimport { EuiPropTypes } from '../../../utils/prop_types';\nimport { Query } from '../query';\n\nexport const FieldValueToggleGroupFilterItemType = PropTypes.shape({\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.bool,\n  ]).isRequired,\n  name: PropTypes.string.isRequired,\n  negatedName: PropTypes.string,\n  operator: PropTypes.oneOf(['eq', 'exact', 'gt', 'gte', 'lt', 'lte']),\n});\n\nexport const FieldValueToggleGroupFilterConfigType = PropTypes.shape({\n  type: EuiPropTypes.is('field_value_toggle_group').isRequired,\n  field: PropTypes.string.isRequired,\n  items: PropTypes.arrayOf(FieldValueToggleGroupFilterItemType).isRequired,\n  available: PropTypes.func, // () => boolean\n});\n\nconst FieldValueToggleGroupFilterPropTypes = {\n  index: PropTypes.number.isRequired,\n  config: FieldValueToggleGroupFilterConfigType.isRequired,\n  query: PropTypes.any.isRequired,\n  onChange: PropTypes.func.isRequired, // (value: boolean) => void\n};\n\nexport class FieldValueToggleGroupFilter extends Component {\n  static propTypes = FieldValueToggleGroupFilterPropTypes;\n\n  constructor(props) {\n    super(props);\n  }\n\n  resolveDisplay(config, query, item) {\n    const clause = query.getSimpleFieldClause(config.field, item.value);\n    if (clause) {\n      if (Query.isMust(clause)) {\n        return { active: true, name: item.name };\n      }\n      return {\n        active: true,\n        name: item.negatedName ? item.negatedName : `Not ${item.name}`,\n      };\n    }\n    return { active: false, name: item.name };\n  }\n\n  valueChanged(item, active) {\n    const { field } = this.props.config;\n    const { value, operator } = item;\n    const query = active\n      ? this.props.query.removeSimpleFieldClauses(field)\n      : this.props.query\n          .removeSimpleFieldClauses(field)\n          .addSimpleFieldValue(field, value, true, operator);\n    this.props.onChange(query);\n  }\n\n  render() {\n    const { config, query } = this.props;\n    return config.items.map((item, index) => {\n      const { active, name } = this.resolveDisplay(config, query, item);\n      const onClick = () => {\n        this.valueChanged(item, active);\n      };\n      const key = `field_value_toggle_filter_item_${index}`;\n      const isLastItem = index === config.items.length - 1;\n      return (\n        <EuiFilterButton\n          key={key}\n          onClick={onClick}\n          hasActiveFilters={active}\n          noDivider={!isLastItem}\n          aria-pressed={!!active}\n          withNext={!isLastItem}>\n          {name}\n        </EuiFilterButton>\n      );\n    });\n  }\n}\n"]}]}