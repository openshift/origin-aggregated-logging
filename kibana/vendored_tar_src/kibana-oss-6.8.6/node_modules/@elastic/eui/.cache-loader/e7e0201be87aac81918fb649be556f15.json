{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/services/paging/pager.ts","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/services/paging/pager.ts","mtime":1565204170071},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Pager = void 0;\n\nvar _predicate = require(\"../predicate\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar Pager = function Pager(_totalItems, _itemsPerPage) {\n  var _this = this;\n\n  var initialPageIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  _classCallCheck(this, Pager);\n\n  _defineProperty(this, \"currentPageIndex\", void 0);\n\n  _defineProperty(this, \"firstItemIndex\", void 0);\n\n  _defineProperty(this, \"itemsPerPage\", void 0);\n\n  _defineProperty(this, \"lastItemIndex\", void 0);\n\n  _defineProperty(this, \"totalItems\", void 0);\n\n  _defineProperty(this, \"totalPages\", void 0);\n\n  _defineProperty(this, \"setTotalItems\", function (totalItems) {\n    _this.totalItems = totalItems;\n\n    _this.update();\n  });\n\n  _defineProperty(this, \"setItemsPerPage\", function (itemsPerPage) {\n    _this.itemsPerPage = itemsPerPage;\n\n    _this.update();\n  });\n\n  _defineProperty(this, \"isPageable\", function () {\n    return _this.firstItemIndex !== -1;\n  });\n\n  _defineProperty(this, \"getTotalPages\", function () {\n    return _this.totalPages;\n  });\n\n  _defineProperty(this, \"getCurrentPageIndex\", function () {\n    return _this.currentPageIndex;\n  });\n\n  _defineProperty(this, \"getFirstItemIndex\", function () {\n    return _this.firstItemIndex;\n  });\n\n  _defineProperty(this, \"getLastItemIndex\", function () {\n    return _this.lastItemIndex;\n  });\n\n  _defineProperty(this, \"hasNextPage\", function () {\n    return _this.currentPageIndex < _this.totalPages - 1;\n  });\n\n  _defineProperty(this, \"hasPreviousPage\", function () {\n    return _this.currentPageIndex > 0;\n  });\n\n  _defineProperty(this, \"goToNextPage\", function () {\n    _this.goToPageIndex(_this.currentPageIndex + 1);\n  });\n\n  _defineProperty(this, \"goToPreviousPage\", function () {\n    _this.goToPageIndex(_this.currentPageIndex - 1);\n  });\n\n  _defineProperty(this, \"goToPageIndex\", function (pageIndex) {\n    _this.currentPageIndex = pageIndex;\n\n    _this.update();\n  });\n\n  _defineProperty(this, \"update\", function () {\n    if (_this.totalItems <= 0) {\n      _this.totalPages = 0;\n      _this.currentPageIndex = 0;\n      _this.firstItemIndex = -1;\n      _this.lastItemIndex = -1;\n      return;\n    }\n\n    _this.totalPages = Math.ceil(_this.totalItems / _this.itemsPerPage); // Ensure the current page falls within our range of total pages.\n\n    _this.currentPageIndex = Math.min(Math.max(0, _this.currentPageIndex), _this.totalPages - 1); // Find the range of visible items on the current page.\n\n    _this.firstItemIndex = _this.currentPageIndex * _this.itemsPerPage;\n    _this.lastItemIndex = Math.min(_this.firstItemIndex + _this.itemsPerPage, _this.totalItems) - 1;\n  });\n\n  if (!(0, _predicate.isNumber)(_totalItems) || isNaN(_totalItems)) {\n    throw new Error('Please provide a number of totalItems');\n  }\n\n  if (!(0, _predicate.isNumber)(_itemsPerPage) || isNaN(_itemsPerPage)) {\n    throw new Error('Please provide a number of itemsPerPage');\n  }\n\n  if (!(0, _predicate.isNumber)(initialPageIndex) || isNaN(initialPageIndex)) {\n    throw new Error('Please provide a number of initialPageIndex');\n  }\n\n  this.currentPageIndex = initialPageIndex;\n  this.firstItemIndex = -1;\n  this.itemsPerPage = _itemsPerPage;\n  this.lastItemIndex = -1;\n  this.totalItems = _totalItems;\n  this.totalPages = 0;\n  this.update();\n};\n\nexports.Pager = Pager;",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/services/paging/pager.ts"],"names":["Pager","totalItems","itemsPerPage","initialPageIndex","update","firstItemIndex","totalPages","currentPageIndex","lastItemIndex","goToPageIndex","pageIndex","Math","ceil","min","max","isNaN","Error"],"mappings":"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","sourcesContent":["import { isNumber } from '../predicate';\n\nexport class Pager {\n  currentPageIndex: number;\n  firstItemIndex: number;\n  itemsPerPage: number;\n  lastItemIndex: number;\n  totalItems: number;\n  totalPages: number;\n\n  constructor(\n    totalItems: number,\n    itemsPerPage: number,\n    initialPageIndex: number = 0\n  ) {\n    if (!isNumber(totalItems) || isNaN(totalItems)) {\n      throw new Error('Please provide a number of totalItems');\n    }\n\n    if (!isNumber(itemsPerPage) || isNaN(itemsPerPage)) {\n      throw new Error('Please provide a number of itemsPerPage');\n    }\n\n    if (!isNumber(initialPageIndex) || isNaN(initialPageIndex)) {\n      throw new Error('Please provide a number of initialPageIndex');\n    }\n\n    this.currentPageIndex = initialPageIndex;\n    this.firstItemIndex = -1;\n    this.itemsPerPage = itemsPerPage;\n    this.lastItemIndex = -1;\n    this.totalItems = totalItems;\n    this.totalPages = 0;\n\n    this.update();\n  }\n\n  setTotalItems = (totalItems: number) => {\n    this.totalItems = totalItems;\n    this.update();\n  };\n\n  setItemsPerPage = (itemsPerPage: number) => {\n    this.itemsPerPage = itemsPerPage;\n    this.update();\n  };\n\n  isPageable = () => this.firstItemIndex !== -1;\n\n  getTotalPages = () => this.totalPages;\n\n  getCurrentPageIndex = () => this.currentPageIndex;\n\n  getFirstItemIndex = () => this.firstItemIndex;\n\n  getLastItemIndex = () => this.lastItemIndex;\n\n  hasNextPage = () => this.currentPageIndex < this.totalPages - 1;\n\n  hasPreviousPage = () => this.currentPageIndex > 0;\n\n  goToNextPage = () => {\n    this.goToPageIndex(this.currentPageIndex + 1);\n  };\n\n  goToPreviousPage = () => {\n    this.goToPageIndex(this.currentPageIndex - 1);\n  };\n\n  goToPageIndex = (pageIndex: number) => {\n    this.currentPageIndex = pageIndex;\n    this.update();\n  };\n\n  update = () => {\n    if (this.totalItems <= 0) {\n      this.totalPages = 0;\n      this.currentPageIndex = 0;\n      this.firstItemIndex = -1;\n      this.lastItemIndex = -1;\n      return;\n    }\n\n    this.totalPages = Math.ceil(this.totalItems / this.itemsPerPage);\n\n    // Ensure the current page falls within our range of total pages.\n    this.currentPageIndex = Math.min(\n      Math.max(0, this.currentPageIndex),\n      this.totalPages - 1\n    );\n\n    // Find the range of visible items on the current page.\n    this.firstItemIndex = this.currentPageIndex * this.itemsPerPage;\n    this.lastItemIndex =\n      Math.min(this.firstItemIndex + this.itemsPerPage, this.totalItems) - 1;\n  };\n}\n"]}]}