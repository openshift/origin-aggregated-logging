{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src-docs/src/views/expression/expression_example.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src-docs/src/views/expression/expression_example.js","mtime":1565204169468},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExpressionExample = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _services = require(\"../../services\");\n\nvar _components = require(\"../../components\");\n\nvar _components2 = require(\"../../../../src/components\");\n\nvar _expression = require(\"../../../../src/components/expression\");\n\nvar _expression2 = _interopRequireDefault(require(\"./expression\"));\n\nvar _colors = _interopRequireDefault(require(\"./colors\"));\n\nvar _stringing = _interopRequireDefault(require(\"./stringing\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar expressionSource = require('!!raw-loader!./expression');\n\nvar expressionHtml = (0, _services.renderToHtml)(_expression2.default);\n\nvar colorSource = require('!!raw-loader!./colors');\n\nvar colorHtml = (0, _services.renderToHtml)(_colors.default);\n\nvar stringingSource = require('!!raw-loader!./stringing');\n\nvar stringingHtml = (0, _services.renderToHtml)(_stringing.default);\nvar ExpressionExample = {\n  title: 'Expression',\n  sections: [{\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: expressionSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: expressionHtml\n    }],\n    text: _react.default.createElement(\"p\", null, \"Use the \", _react.default.createElement(_components2.EuiCode, null, \"EuiExpression\"), \" component to surface expressions. The requires both a \", _react.default.createElement(_components2.EuiCode, null, \"description\"), \" (left side) and \", _react.default.createElement(_components2.EuiCode, null, \"value\"), \" (right side). Optionally, you can pass it an \", _react.default.createElement(_components2.EuiCode, null, \"onClick\"), \" function that will convert it to a button and add some additional styling to indicate that it is clickable.\"),\n    props: {\n      EuiExpression: _expression.EuiExpression\n    },\n    demo: _react.default.createElement(_expression2.default, null)\n  }, {\n    title: 'Colors',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: colorSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: colorHtml\n    }],\n    text: _react.default.createElement(\"p\", null, \"You can pass a \", _react.default.createElement(_components2.EuiCode, null, \"color\"), \" prop but it will only color the \", _react.default.createElement(_components2.EuiCode, null, \"description\"), \".\"),\n    demo: _react.default.createElement(_colors.default, null)\n  }, {\n    title: 'Stringing a bunch together',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: stringingSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: stringingHtml\n    }],\n    text: _react.default.createElement(\"p\", null, \"If the expression is more than one description and value, you can string multiple expressions together and they should inline together and wrap at logical points.\"),\n    demo: _react.default.createElement(_stringing.default, null)\n  }]\n};\nexports.ExpressionExample = ExpressionExample;",{"version":3,"sources":["/Users/chanderprall/projects/eui/src-docs/src/views/expression/expression_example.js"],"names":["expressionSource","require","expressionHtml","Expression","colorSource","colorHtml","Colors","stringingSource","stringingHtml","Stringing","ExpressionExample","title","sections","source","type","GuideSectionTypes","JS","code","HTML","text","props","EuiExpression","demo"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAIA;;AAIA;;;;AAPA,IAAMA,gBAAgB,GAAGC,OAAO,CAAC,2BAAD,CAAhC;;AACA,IAAMC,cAAc,GAAG,4BAAaC,oBAAb,CAAvB;;AAGA,IAAMC,WAAW,GAAGH,OAAO,CAAC,uBAAD,CAA3B;;AACA,IAAMI,SAAS,GAAG,4BAAaC,eAAb,CAAlB;;AAGA,IAAMC,eAAe,GAAGN,OAAO,CAAC,0BAAD,CAA/B;;AACA,IAAMO,aAAa,GAAG,4BAAaC,kBAAb,CAAtB;AAEO,IAAMC,iBAAiB,GAAG;AAC/BC,EAAAA,KAAK,EAAE,YADwB;AAE/BC,EAAAA,QAAQ,EAAE,CACR;AACEC,IAAAA,MAAM,EAAE,CACN;AACEC,MAAAA,IAAI,EAAEC,8BAAkBC,EAD1B;AAEEC,MAAAA,IAAI,EAAEjB;AAFR,KADM,EAKN;AACEc,MAAAA,IAAI,EAAEC,8BAAkBG,IAD1B;AAEED,MAAAA,IAAI,EAAEf;AAFR,KALM,CADV;AAWEiB,IAAAA,IAAI,EACF,oDACU,6BAAC,oBAAD,wBADV,6DAEmC,6BAAC,oBAAD,sBAFnC,uBAGY,6BAAC,oBAAD,gBAHZ,oDAIa,6BAAC,oBAAD,kBAJb,iHAZJ;AAqBEC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,aAAa,EAAbA;AAAF,KArBT;AAsBEC,IAAAA,IAAI,EAAE,6BAAC,oBAAD;AAtBR,GADQ,EAyBR;AACEX,IAAAA,KAAK,EAAE,QADT;AAEEE,IAAAA,MAAM,EAAE,CACN;AACEC,MAAAA,IAAI,EAAEC,8BAAkBC,EAD1B;AAEEC,MAAAA,IAAI,EAAEb;AAFR,KADM,EAKN;AACEU,MAAAA,IAAI,EAAEC,8BAAkBG,IAD1B;AAEED,MAAAA,IAAI,EAAEZ;AAFR,KALM,CAFV;AAYEc,IAAAA,IAAI,EACF,2DACiB,6BAAC,oBAAD,gBADjB,uCAEM,6BAAC,oBAAD,sBAFN,MAbJ;AAkBEG,IAAAA,IAAI,EAAE,6BAAC,eAAD;AAlBR,GAzBQ,EA6CR;AACEX,IAAAA,KAAK,EAAE,4BADT;AAEEE,IAAAA,MAAM,EAAE,CACN;AACEC,MAAAA,IAAI,EAAEC,8BAAkBC,EAD1B;AAEEC,MAAAA,IAAI,EAAEV;AAFR,KADM,EAKN;AACEO,MAAAA,IAAI,EAAEC,8BAAkBG,IAD1B;AAEED,MAAAA,IAAI,EAAET;AAFR,KALM,CAFV;AAYEW,IAAAA,IAAI,EACF,6MAbJ;AAmBEG,IAAAA,IAAI,EAAE,6BAAC,kBAAD;AAnBR,GA7CQ;AAFqB,CAA1B","sourcesContent":["import React from 'react';\n\nimport { renderToHtml } from '../../services';\n\nimport { GuideSectionTypes } from '../../components';\n\nimport { EuiCode } from '../../../../src/components';\n\nimport { EuiExpression } from '../../../../src/components/expression';\n\nimport Expression from './expression';\nconst expressionSource = require('!!raw-loader!./expression');\nconst expressionHtml = renderToHtml(Expression);\n\nimport Colors from './colors';\nconst colorSource = require('!!raw-loader!./colors');\nconst colorHtml = renderToHtml(Colors);\n\nimport Stringing from './stringing';\nconst stringingSource = require('!!raw-loader!./stringing');\nconst stringingHtml = renderToHtml(Stringing);\n\nexport const ExpressionExample = {\n  title: 'Expression',\n  sections: [\n    {\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: expressionSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: expressionHtml,\n        },\n      ],\n      text: (\n        <p>\n          Use the <EuiCode>EuiExpression</EuiCode> component to surface\n          expressions. The requires both a <EuiCode>description</EuiCode> (left\n          side) and <EuiCode>value</EuiCode> (right side). Optionally, you can\n          pass it an <EuiCode>onClick</EuiCode> function that will convert it to\n          a button and add some additional styling to indicate that it is\n          clickable.\n        </p>\n      ),\n      props: { EuiExpression },\n      demo: <Expression />,\n    },\n    {\n      title: 'Colors',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: colorSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: colorHtml,\n        },\n      ],\n      text: (\n        <p>\n          You can pass a <EuiCode>color</EuiCode> prop but it will only color\n          the <EuiCode>description</EuiCode>.\n        </p>\n      ),\n      demo: <Colors />,\n    },\n    {\n      title: 'Stringing a bunch together',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: stringingSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: stringingHtml,\n        },\n      ],\n      text: (\n        <p>\n          If the expression is more than one description and value, you can\n          string multiple expressions together and they should inline together\n          and wrap at logical points.\n        </p>\n      ),\n      demo: <Stringing />,\n    },\n  ],\n};\n"]}]}