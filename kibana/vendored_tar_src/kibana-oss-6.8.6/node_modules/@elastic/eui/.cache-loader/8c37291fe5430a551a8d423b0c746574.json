{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src-docs/src/views/card/card_example.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src-docs/src/views/card/card_example.js","mtime":1565204169440},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CardExample = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _services = require(\"../../services\");\n\nvar _components = require(\"../../components\");\n\nvar _components2 = require(\"../../../../src/components\");\n\nvar _card_select = require(\"../../../../src/components/card/card_select\");\n\nvar _card = _interopRequireDefault(require(\"./card\"));\n\nvar _card_image = _interopRequireDefault(require(\"./card_image\"));\n\nvar _card_footer = _interopRequireDefault(require(\"./card_footer\"));\n\nvar _card_beta = _interopRequireDefault(require(\"./card_beta\"));\n\nvar _card_layout = _interopRequireDefault(require(\"./card_layout\"));\n\nvar _card_selectable = _interopRequireDefault(require(\"./card_selectable\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nvar cardSource = require('!!raw-loader!./card');\n\nvar cardHtml = (0, _services.renderToHtml)(_card.default);\n\nvar cardImageSource = require('!!raw-loader!./card_image');\n\nvar cardImageHtml = (0, _services.renderToHtml)(_card_image.default);\n\nvar cardFooterSource = require('!!raw-loader!./card_footer');\n\nvar cardFooterHtml = (0, _services.renderToHtml)(_card_footer.default);\n\nvar cardBetaSource = require('!!raw-loader!./card_beta');\n\nvar cardBetaHtml = (0, _services.renderToHtml)(_card_beta.default);\n\nvar cardLayoutSource = require('!!raw-loader!./card_layout');\n\nvar cardLayoutHtml = (0, _services.renderToHtml)(_card_layout.default);\n\nvar cardSelectableSource = require('!!raw-loader!./card_selectable');\n\nvar cardSelectableHtml = (0, _services.renderToHtml)(_card_selectable.default);\nvar CardExample = {\n  title: 'Card',\n  sections: [{\n    title: 'Basic Card',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: cardSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: cardHtml\n    }],\n    text: _react.default.createElement(\"div\", null, _react.default.createElement(\"p\", null, \"At its core an \", _react.default.createElement(_components2.EuiCode, null, \"EuiCard\"), \" should contain a\", ' ', _react.default.createElement(_components2.EuiCode, null, \"title\"), \",\", _react.default.createElement(_components2.EuiCode, null, \"description\"), \", and an\", ' ', _react.default.createElement(_components2.EuiCode, null, \"icon\"), \". You can make the whole card clickable by giving it an \", _react.default.createElement(_components2.EuiCode, null, \"onClick\"), \" handler.\"), _react.default.createElement(\"p\", null, \"By default a card's title element is a \", _react.default.createElement(_components2.EuiCode, null, \"span\"), \". This can be changed via the \", _react.default.createElement(_components2.EuiCode, null, \"titleElement\"), \" prop. However, if an \", _react.default.createElement(_components2.EuiCode, null, \"onClick\"), \" function is also passed, the title element will be forced back to a span.\"), _react.default.createElement(\"p\", null, \"By default a card's content is center aligned. To change the alignment set \", _react.default.createElement(_components2.EuiCode, null, \"textAlign\"), \" to\", ' ', _react.default.createElement(_components2.EuiCode, null, \"left\"), \" or \", _react.default.createElement(_components2.EuiCode, null, \"right\"), \".\")),\n    props: {\n      EuiCard: _components2.EuiCard\n    },\n    demo: _react.default.createElement(_card.default, null)\n  }, {\n    title: 'Layout',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: cardLayoutSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: cardLayoutHtml\n    }],\n    text: _react.default.createElement(\"div\", null, _react.default.createElement(\"p\", null, \"Most of the time, cards should read from top to bottom (vertical). However, in some cases, you may want the icon to be to the left of the content. In this case, add the prop\", ' ', _react.default.createElement(_components2.EuiCode, null, \"layout=\\\"horizontal\\\"\"), \".\"), _react.default.createElement(_components2.EuiCallOut, {\n      color: \"danger\",\n      title: _react.default.createElement(\"span\", null, \"Horizontal layouts \", _react.default.createElement(\"strong\", null, \"do not\"), \" work with images, footers, or \", _react.default.createElement(_components2.EuiCode, null, \"textAlign\"), \". Therefore, these properties will be ignored.\")\n    })),\n    props: {\n      EuiCard: _components2.EuiCard\n    },\n    demo: _react.default.createElement(_card_layout.default, null)\n  }, {\n    title: 'Images',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: cardImageSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: cardImageHtml\n    }],\n    text: _react.default.createElement(\"div\", null, _react.default.createElement(\"p\", null, \"Images can be added in place of, or in conjuction with, icons. Just pass a url into the \", _react.default.createElement(_components2.EuiCode, null, \"image\"), \" prop and it will expand to the edges of the card.\"), _react.default.createElement(_components2.EuiCallOut, {\n      title: _react.default.createElement(\"span\", null, \"Make sure that all images are the\", ' ', _react.default.createElement(\"strong\", null, \"same proportions\"), \" when used in a singular row.\")\n    })),\n    props: {\n      EuiCard: _components2.EuiCard\n    },\n    demo: _react.default.createElement(_card_image.default, null)\n  }, {\n    title: 'Footer',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: cardFooterSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: cardFooterHtml\n    }],\n    text: _react.default.createElement(\"p\", null, \"Footers can contain any number of elements and will always align to the bottom of the card. However, if you supply a footer containing a\", ' ', _react.default.createElement(_components2.EuiCode, null, \"EuiButton\"), \" you \", _react.default.createElement(\"strong\", null, \"must not\"), \" also give it an \", _react.default.createElement(_components2.EuiCode, null, \"onClick\"), \".\"),\n    components: {\n      EuiCard: _components2.EuiCard\n    },\n    demo: _react.default.createElement(_card_footer.default, null)\n  }, {\n    title: 'Beta badge',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: cardBetaSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: cardBetaHtml\n    }],\n    text: _react.default.createElement(\"p\", null, \"If the card links to or references a module that is not GA (beta, lab, etc), you can add a \", _react.default.createElement(_components2.EuiCode, null, \"betaBadgeLabel\"), \" and\", ' ', _react.default.createElement(_components2.EuiCode, null, \"betaBadgeTooltipContent\"), \" to the card and it will properly create and position an \", _react.default.createElement(_components2.EuiCode, null, \"EuiBetaBadge\"), \". If you want to change the title of the tooltip, supply a\", ' ', _react.default.createElement(_components2.EuiCode, null, \"betaBadgeTitle\"), \" prop.\"),\n    props: {\n      EuiCard: _components2.EuiCard\n    },\n    demo: _react.default.createElement(_card_beta.default, null)\n  }, {\n    title: 'Selectable',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: cardSelectableSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: cardSelectableHtml\n    }],\n    text: _react.default.createElement(_react.Fragment, null, _react.default.createElement(\"p\", null, \"When you have a list of cards that can be selected but\", ' ', _react.default.createElement(\"strong\", null, \"do not navigate anywhere\"), \", you can add the\", ' ', _react.default.createElement(_components2.EuiCode, null, \"selectable\"), \" prop. The prop is an object that requires an \", _react.default.createElement(_components2.EuiCode, null, \"onClick\"), \". It will apply the button as seen below, and passing\", ' ', _react.default.createElement(_components2.EuiCode, null, \"selectable.isSelected = true\"), \" will alter the styles of the card and button to look selected.\"), _react.default.createElement(\"p\", null, \"The select button is essentially an EuiButtonEmpty and so the\", ' ', _react.default.createElement(_components2.EuiCode, null, \"selectable\"), \" object can also accept any props that EuiButtonEmpty can.\")),\n    props: {\n      EuiCardSelect: _card_select.EuiCardSelect\n    },\n    demo: _react.default.createElement(_card_selectable.default, null),\n    snippet: \"<EuiCard\\n  icon={<EuiIcon />}\\n  title=\\\"Title\\\"\\n  description=\\\"Example of a short card description.\\\"\\n  footer={cardFooterContent}\\n  selectable={{\\n    onClick: this.cardClicked,\\n    isSelected: this.state.cardIsSelected,\\n    isDisabled: this.state.cardIsDisabled,\\n  }}\\n/>\"\n  }]\n};\nexports.CardExample = CardExample;",{"version":3,"sources":["/Users/chanderprall/projects/eui/src-docs/src/views/card/card_example.js"],"names":["cardSource","require","cardHtml","Card","cardImageSource","cardImageHtml","CardImage","cardFooterSource","cardFooterHtml","CardFooter","cardBetaSource","cardBetaHtml","CardBeta","cardLayoutSource","cardLayoutHtml","CardLayout","cardSelectableSource","cardSelectableHtml","CardSelectable","CardExample","title","sections","source","type","GuideSectionTypes","JS","code","HTML","text","props","EuiCard","demo","components","EuiCardSelect","snippet"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\n\nimport { renderToHtml } from '../../services';\n\nimport { GuideSectionTypes } from '../../components';\n\nimport { EuiCode, EuiCard, EuiCallOut } from '../../../../src/components';\n\nimport { EuiCardSelect } from '../../../../src/components/card/card_select';\n\nimport Card from './card';\nconst cardSource = require('!!raw-loader!./card');\nconst cardHtml = renderToHtml(Card);\n\nimport CardImage from './card_image';\nconst cardImageSource = require('!!raw-loader!./card_image');\nconst cardImageHtml = renderToHtml(CardImage);\n\nimport CardFooter from './card_footer';\nconst cardFooterSource = require('!!raw-loader!./card_footer');\nconst cardFooterHtml = renderToHtml(CardFooter);\n\nimport CardBeta from './card_beta';\nconst cardBetaSource = require('!!raw-loader!./card_beta');\nconst cardBetaHtml = renderToHtml(CardBeta);\n\nimport CardLayout from './card_layout';\nconst cardLayoutSource = require('!!raw-loader!./card_layout');\nconst cardLayoutHtml = renderToHtml(CardLayout);\n\nimport CardSelectable from './card_selectable';\nconst cardSelectableSource = require('!!raw-loader!./card_selectable');\nconst cardSelectableHtml = renderToHtml(CardSelectable);\n\nexport const CardExample = {\n  title: 'Card',\n  sections: [\n    {\n      title: 'Basic Card',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: cardSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: cardHtml,\n        },\n      ],\n      text: (\n        <div>\n          <p>\n            At its core an <EuiCode>EuiCard</EuiCode> should contain a{' '}\n            <EuiCode>title</EuiCode>,<EuiCode>description</EuiCode>, and an{' '}\n            <EuiCode>icon</EuiCode>. You can make the whole card clickable by\n            giving it an <EuiCode>onClick</EuiCode> handler.\n          </p>\n          <p>\n            By default a card&apos;s title element is a <EuiCode>span</EuiCode>.\n            This can be changed via the <EuiCode>titleElement</EuiCode> prop.\n            However, if an <EuiCode>onClick</EuiCode> function is also passed,\n            the title element will be forced back to a span.\n          </p>\n          <p>\n            By default a card&apos;s content is center aligned. To change the\n            alignment set <EuiCode>textAlign</EuiCode> to{' '}\n            <EuiCode>left</EuiCode> or <EuiCode>right</EuiCode>.\n          </p>\n        </div>\n      ),\n      props: { EuiCard },\n      demo: <Card />,\n    },\n    {\n      title: 'Layout',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: cardLayoutSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: cardLayoutHtml,\n        },\n      ],\n      text: (\n        <div>\n          <p>\n            Most of the time, cards should read from top to bottom (vertical).\n            However, in some cases, you may want the icon to be to the left of\n            the content. In this case, add the prop{' '}\n            <EuiCode>layout=&quot;horizontal&quot;</EuiCode>.\n          </p>\n          <EuiCallOut\n            color=\"danger\"\n            title={\n              <span>\n                Horizontal layouts <strong>do not</strong> work with images,\n                footers, or <EuiCode>textAlign</EuiCode>. Therefore, these\n                properties will be ignored.\n              </span>\n            }\n          />\n        </div>\n      ),\n      props: { EuiCard },\n      demo: <CardLayout />,\n    },\n    {\n      title: 'Images',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: cardImageSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: cardImageHtml,\n        },\n      ],\n      text: (\n        <div>\n          <p>\n            Images can be added in place of, or in conjuction with, icons. Just\n            pass a url into the <EuiCode>image</EuiCode> prop and it will expand\n            to the edges of the card.\n          </p>\n          <EuiCallOut\n            title={\n              <span>\n                Make sure that all images are the{' '}\n                <strong>same proportions</strong> when used in a singular row.\n              </span>\n            }\n          />\n        </div>\n      ),\n      props: { EuiCard },\n      demo: <CardImage />,\n    },\n    {\n      title: 'Footer',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: cardFooterSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: cardFooterHtml,\n        },\n      ],\n      text: (\n        <p>\n          Footers can contain any number of elements and will always align to\n          the bottom of the card. However, if you supply a footer containing a{' '}\n          <EuiCode>EuiButton</EuiCode> you <strong>must not</strong> also give\n          it an <EuiCode>onClick</EuiCode>.\n        </p>\n      ),\n      components: { EuiCard },\n      demo: <CardFooter />,\n    },\n    {\n      title: 'Beta badge',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: cardBetaSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: cardBetaHtml,\n        },\n      ],\n      text: (\n        <p>\n          If the card links to or references a module that is not GA (beta, lab,\n          etc), you can add a <EuiCode>betaBadgeLabel</EuiCode> and{' '}\n          <EuiCode>betaBadgeTooltipContent</EuiCode> to the card and it will\n          properly create and position an <EuiCode>EuiBetaBadge</EuiCode>. If\n          you want to change the title of the tooltip, supply a{' '}\n          <EuiCode>betaBadgeTitle</EuiCode> prop.\n        </p>\n      ),\n      props: { EuiCard },\n      demo: <CardBeta />,\n    },\n    {\n      title: 'Selectable',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: cardSelectableSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: cardSelectableHtml,\n        },\n      ],\n      text: (\n        <Fragment>\n          <p>\n            When you have a list of cards that can be selected but{' '}\n            <strong>do not navigate anywhere</strong>, you can add the{' '}\n            <EuiCode>selectable</EuiCode> prop. The prop is an object that\n            requires an <EuiCode>onClick</EuiCode>. It will apply the button as\n            seen below, and passing{' '}\n            <EuiCode>selectable.isSelected = true</EuiCode> will alter the\n            styles of the card and button to look selected.\n          </p>\n          <p>\n            The select button is essentially an EuiButtonEmpty and so the{' '}\n            <EuiCode>selectable</EuiCode> object can also accept any props that\n            EuiButtonEmpty can.\n          </p>\n        </Fragment>\n      ),\n      props: { EuiCardSelect },\n      demo: <CardSelectable />,\n      snippet: `<EuiCard\n  icon={<EuiIcon />}\n  title=\"Title\"\n  description=\"Example of a short card description.\"\n  footer={cardFooterContent}\n  selectable={{\n    onClick: this.cardClicked,\n    isSelected: this.state.cardIsSelected,\n    isDisabled: this.state.cardIsDisabled,\n  }}\n/>`,\n    },\n  ],\n};\n"]}]}