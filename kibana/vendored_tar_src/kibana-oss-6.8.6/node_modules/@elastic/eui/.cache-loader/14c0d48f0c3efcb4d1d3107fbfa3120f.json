{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src-docs/src/views/search_bar/props_info.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src-docs/src/views/search_bar/props_info.js","mtime":1565204169536},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.propsInfo = void 0;\nvar propsInfo = {\n  EuiSearchBar: {\n    __docgenInfo: {\n      props: {\n        onChange: {\n          description: 'Called every time the text query in the search box is parsed. When parsing is successful ' + 'the callback will receive both the query text and the parsed query. When it fails ' + 'the callback ill receive the query text and an error object (holding the error message)',\n          required: true,\n          type: {\n            name: '({ query?: #Query, queryText: string, error?: { message: string } }) => void'\n          }\n        },\n        query: {\n          description: 'Sets the query on the search bar. Should only be used when the query is controlled and ' + 'managed outside of the search bar itself',\n          required: false,\n          type: {\n            name: 'string | #Query'\n          }\n        },\n        defaultQuery: {\n          description: 'The default query to initially set on the search bar when it mounts',\n          required: false,\n          type: {\n            name: 'string | #Query'\n          }\n        },\n        box: {\n          description: 'Configures the search box',\n          required: false,\n          type: {\n            name: '#SearchBox'\n          }\n        },\n        filters: {\n          description: 'The configured search filters ',\n          required: false,\n          type: {\n            name: '#SearchFilters[]'\n          }\n        }\n      }\n    }\n  },\n  Query: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        parse: {\n          description: 'Parses the given string and returns the parsed query',\n          type: {\n            name: 'static (query: string) => #Query'\n          }\n        },\n        execute: {\n          description: 'Executes the given query over an array if objects and returns the an array of objects that match it',\n          type: {\n            name: 'static (query: #Query | string, items: Object[], options?: #ExecuteQueryOptions) => Object[]'\n          }\n        },\n        toESQuery: {\n          description: 'Builds and returns an Elasticsearch query object out of the given query',\n          type: {\n            name: 'static (query: #Query | string, options?: #ToESQueryOptions) => ESQuery'\n          }\n        }\n      }\n    }\n  },\n  SearchBox: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        placeholder: {\n          description: 'Sets the placeholder of the search input',\n          required: false,\n          defaultValue: {\n            value: 'Search...'\n          },\n          type: {\n            name: 'string'\n          }\n        },\n        incremental: {\n          description: 'When set to `true` the search will be executed as you type',\n          required: false,\n          defaultValue: {\n            value: 'false'\n          },\n          type: {\n            name: 'boolean'\n          }\n        },\n        schema: {\n          description: 'A schema describing the supported fields and flags',\n          required: false,\n          type: {\n            name: '#Schema'\n          }\n        }\n      }\n    }\n  },\n  Schema: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        strict: {\n          description: 'Indicates whether the query parsing should be strictly compliant with the schema',\n          required: false,\n          defaultValue: {\n            value: 'false'\n          },\n          type: {\n            name: 'boolean'\n          }\n        },\n        flags: {\n          description: 'A list of supported flags',\n          required: false,\n          type: {\n            name: 'string[]'\n          }\n        },\n        fields: {\n          description: 'A dictionary of supported fields',\n          required: false,\n          type: {\n            name: '{ [fieldName]: #SchemaField }'\n          }\n        }\n      }\n    }\n  },\n  SchemaField: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        type: {\n          description: 'The data type of the field',\n          required: true,\n          type: {\n            name: 'boolean | string | date | number'\n          }\n        },\n        valueDescription: {\n          description: 'A description of the values accepted by this field',\n          required: false,\n          defaultValue: {\n            value: 'the data type'\n          },\n          type: {\n            name: 'string'\n          }\n        },\n        validate: {\n          description: 'A function to validate a possible value for the field. An error should be thrown when ' + 'validation fails (with appropriate error message of course)',\n          required: false,\n          type: {\n            name: '(value) => void'\n          }\n        }\n      }\n    }\n  },\n  SearchFilters: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      description: '#IsFilter | #FieldValueSelectionFilter | #FieldValueToggleFilter | #FieldValueToggleGroupFilter',\n      props: {}\n    }\n  },\n  IsFilter: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        type: {\n          description: 'Defines the type of this filter. Must be set to `is`',\n          required: true,\n          type: {\n            name: '\"is\"'\n          }\n        },\n        field: {\n          description: 'The boolean field that should be matched',\n          required: true,\n          type: {\n            name: 'string'\n          }\n        },\n        name: {\n          description: 'The name that will be used as a caption of the filter button',\n          required: true,\n          type: {\n            name: 'string'\n          }\n        },\n        negatedName: {\n          description: 'The name that will be used as a caption of the filter button when the filter is negated',\n          required: false,\n          defaultValue: {\n            value: '\"Not {name}\"',\n            comment: 'where `{name}` is the configured name'\n          },\n          type: {\n            name: 'string'\n          }\n        },\n        available: {\n          description: 'A callback that defines whether this filter is currently available',\n          required: false,\n          type: {\n            name: '() => boolean'\n          }\n        }\n      }\n    }\n  },\n  FieldValueSelectionFilter: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        type: {\n          description: 'Defines the type of this filter. Must be set to `field_value_selection`',\n          required: true,\n          type: {\n            name: '\"field_value_selection\"'\n          }\n        },\n        field: {\n          description: 'The boolean field that should be matched',\n          required: true,\n          type: {\n            name: 'string'\n          }\n        },\n        name: {\n          description: 'The name that will be used as a caption of the filter button',\n          required: true,\n          type: {\n            name: 'string'\n          }\n        },\n        options: {\n          description: 'Defines possible field value option. These options will be presented to the user ' + 'for selection',\n          required: true,\n          type: {\n            name: '#FieldValueOption[] | () => #FieldValueOption[]'\n          }\n        },\n        cache: {\n          description: 'When set to a positive number, if `options` is a loading function, the loaded ' + 'options will be cached for the set timeout (in milliseconds)',\n          required: false,\n          type: {\n            name: 'number (milliseconds)'\n          }\n        },\n        multiSelect: {\n          description: 'Indicates whether the user can filter by multiple values or by only a single one. ' + 'When set to \"and\" the filter will create queries by `and`ing the selected values. ' + 'When set to \"or\" the filter will create quries by `or`ing the selected values',\n          required: false,\n          defaultValue: {\n            value: 'true (\"and\")'\n          },\n          type: {\n            name: 'boolean | \"or\" | \"and\"'\n          }\n        },\n        loadingMessage: {\n          description: 'The message that will be shown while loading the options',\n          required: false,\n          defaultValue: {\n            value: 'Loading...'\n          },\n          type: {\n            name: 'string'\n          }\n        },\n        noOptionsMessage: {\n          description: 'The message that will be shown when no options are found',\n          required: false,\n          defaultValue: {\n            value: 'No options found'\n          },\n          type: {\n            name: 'string'\n          }\n        },\n        searchThreshold: {\n          description: 'The minimum number of options that are required before a search box is shown to the ' + 'user to filter out options',\n          required: false,\n          defaultValue: {\n            value: '10'\n          },\n          type: {\n            name: 'number'\n          }\n        },\n        available: {\n          description: 'A callback that defines whether this filter is currently available',\n          required: false,\n          type: {\n            name: '() => boolean'\n          }\n        }\n      }\n    }\n  },\n  FieldValueOption: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        value: {\n          description: 'The actual value of the option (will be used as a filter)',\n          required: true,\n          type: {\n            name: 'string'\n          }\n        },\n        name: {\n          description: 'The name of the option (for display purposes and also for searching through all options). ' + 'When not provided, the option `value` will be used as the name',\n          required: false,\n          type: {\n            name: 'string'\n          }\n        },\n        view: {\n          description: 'Enables to fully customize how an option is presented',\n          required: false,\n          type: {\n            name: 'PropTypes.node'\n          }\n        }\n      }\n    }\n  },\n  FieldValueToggleFilter: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        type: {\n          description: 'Defines the type of the filter. Must be set to `field_value_toggle`',\n          required: true,\n          type: {\n            name: '\"field_value_toggle\"'\n          }\n        },\n        field: {\n          description: 'The name of the field to filter by',\n          required: true,\n          type: {\n            name: 'string'\n          }\n        },\n        value: {\n          description: 'The field value to filter by',\n          required: true,\n          type: {\n            name: 'string'\n          }\n        },\n        name: {\n          description: 'The name of the filter (will be used as a caption of the filter button)',\n          required: true,\n          type: {\n            name: 'string'\n          }\n        },\n        negatedName: {\n          description: 'The name that will be used when the filter is active yet negated (e.g. `-tag:bug`)',\n          required: false,\n          defaultValue: {\n            value: 'Not {name}',\n            comment: 'where `{name}` is the configured name'\n          },\n          type: {\n            name: 'string'\n          }\n        },\n        available: {\n          description: 'Called to check whether this filter is currently available. If not, it will not be shown',\n          required: false,\n          type: {\n            name: '() => boolean'\n          }\n        }\n      }\n    }\n  },\n  FieldValueToggleGroupFilter: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        type: {\n          description: 'Defines the type of the filter. Must be set to `field_value_toggle_group`',\n          required: true,\n          type: {\n            name: '\"field_value_toggle_group\"'\n          }\n        },\n        field: {\n          description: 'The name of the field to filter by',\n          required: true,\n          type: {\n            name: 'string'\n          }\n        },\n        items: {\n          description: 'A list of field value filters that are part of this group',\n          required: true,\n          type: {\n            name: '#FieldValueToggleGroupFilterItemType[]'\n          }\n        },\n        available: {\n          description: 'Called to check whether this filter is currently available. If not, it will not be shown',\n          required: false,\n          type: {\n            name: '() => boolean'\n          }\n        }\n      }\n    }\n  },\n  FieldValueToggleGroupFilterItemType: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        value: {\n          description: 'Value of the filter item',\n          required: true,\n          type: {\n            name: 'string | number | boolean'\n          }\n        },\n        name: {\n          description: 'Name rendered on the filter button',\n          required: true,\n          type: {\n            name: 'string'\n          }\n        },\n        negatedName: {\n          description: 'Name rendered on the filter button when its value is negated in the query',\n          required: false,\n          type: {\n            name: 'string'\n          }\n        }\n      }\n    }\n  },\n  ExecuteQueryOptions: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        defaultFields: {\n          description: 'A set of fields to execute the term clauses against',\n          required: false,\n          defaultValue: {\n            value: 'all direct string fields of the object'\n          },\n          type: {\n            name: 'string[]'\n          }\n        },\n        explain: {\n          description: 'When `true` each item in the returned array will have a `__explain` field explaining ' + 'the reason for the match',\n          required: false,\n          defaultValue: {\n            value: 'false'\n          },\n          type: {\n            name: 'boolean'\n          }\n        }\n      }\n    }\n  },\n  ToESQueryOptions: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        extraMustQueries: {\n          description: 'An array of additional queries to add as a `must` clause to the generated query',\n          required: false,\n          type: {\n            name: 'ESQuery[]'\n          }\n        },\n        extraMustNotQueries: {\n          description: 'An array of additional queries to add as a `must_not` clause to the generated query',\n          required: false,\n          type: {\n            name: 'ESQuery[]'\n          }\n        }\n      }\n    }\n  }\n};\nexports.propsInfo = propsInfo;",{"version":3,"sources":["/Users/chanderprall/projects/eui/src-docs/src/views/search_bar/props_info.js"],"names":["propsInfo","EuiSearchBar","__docgenInfo","props","onChange","description","required","type","name","query","defaultQuery","box","filters","Query","_euiObjectType","parse","execute","toESQuery","SearchBox","placeholder","defaultValue","value","incremental","schema","Schema","strict","flags","fields","SchemaField","valueDescription","validate","SearchFilters","IsFilter","field","negatedName","comment","available","FieldValueSelectionFilter","options","cache","multiSelect","loadingMessage","noOptionsMessage","searchThreshold","FieldValueOption","view","FieldValueToggleFilter","FieldValueToggleGroupFilter","items","FieldValueToggleGroupFilterItemType","ExecuteQueryOptions","defaultFields","explain","ToESQueryOptions","extraMustQueries","extraMustNotQueries"],"mappings":"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","sourcesContent":["export const propsInfo = {\n  EuiSearchBar: {\n    __docgenInfo: {\n      props: {\n        onChange: {\n          description:\n            'Called every time the text query in the search box is parsed. When parsing is successful ' +\n            'the callback will receive both the query text and the parsed query. When it fails ' +\n            'the callback ill receive the query text and an error object (holding the error message)',\n          required: true,\n          type: {\n            name:\n              '({ query?: #Query, queryText: string, error?: { message: string } }) => void',\n          },\n        },\n        query: {\n          description:\n            'Sets the query on the search bar. Should only be used when the query is controlled and ' +\n            'managed outside of the search bar itself',\n          required: false,\n          type: { name: 'string | #Query' },\n        },\n        defaultQuery: {\n          description:\n            'The default query to initially set on the search bar when it mounts',\n          required: false,\n          type: { name: 'string | #Query' },\n        },\n        box: {\n          description: 'Configures the search box',\n          required: false,\n          type: { name: '#SearchBox' },\n        },\n        filters: {\n          description: 'The configured search filters ',\n          required: false,\n          type: { name: '#SearchFilters[]' },\n        },\n      },\n    },\n  },\n\n  Query: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        parse: {\n          description: 'Parses the given string and returns the parsed query',\n          type: { name: 'static (query: string) => #Query' },\n        },\n        execute: {\n          description:\n            'Executes the given query over an array if objects and returns the an array of objects that match it',\n          type: {\n            name:\n              'static (query: #Query | string, items: Object[], options?: #ExecuteQueryOptions) => Object[]',\n          },\n        },\n        toESQuery: {\n          description:\n            'Builds and returns an Elasticsearch query object out of the given query',\n          type: {\n            name:\n              'static (query: #Query | string, options?: #ToESQueryOptions) => ESQuery',\n          },\n        },\n      },\n    },\n  },\n\n  SearchBox: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        placeholder: {\n          description: 'Sets the placeholder of the search input',\n          required: false,\n          defaultValue: { value: 'Search...' },\n          type: { name: 'string' },\n        },\n        incremental: {\n          description:\n            'When set to `true` the search will be executed as you type',\n          required: false,\n          defaultValue: { value: 'false' },\n          type: { name: 'boolean' },\n        },\n        schema: {\n          description: 'A schema describing the supported fields and flags',\n          required: false,\n          type: { name: '#Schema' },\n        },\n      },\n    },\n  },\n\n  Schema: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        strict: {\n          description:\n            'Indicates whether the query parsing should be strictly compliant with the schema',\n          required: false,\n          defaultValue: { value: 'false' },\n          type: { name: 'boolean' },\n        },\n        flags: {\n          description: 'A list of supported flags',\n          required: false,\n          type: { name: 'string[]' },\n        },\n        fields: {\n          description: 'A dictionary of supported fields',\n          required: false,\n          type: { name: '{ [fieldName]: #SchemaField }' },\n        },\n      },\n    },\n  },\n\n  SchemaField: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        type: {\n          description: 'The data type of the field',\n          required: true,\n          type: { name: 'boolean | string | date | number' },\n        },\n        valueDescription: {\n          description: 'A description of the values accepted by this field',\n          required: false,\n          defaultValue: { value: 'the data type' },\n          type: { name: 'string' },\n        },\n        validate: {\n          description:\n            'A function to validate a possible value for the field. An error should be thrown when ' +\n            'validation fails (with appropriate error message of course)',\n          required: false,\n          type: { name: '(value) => void' },\n        },\n      },\n    },\n  },\n\n  SearchFilters: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      description:\n        '#IsFilter | #FieldValueSelectionFilter | #FieldValueToggleFilter | #FieldValueToggleGroupFilter',\n      props: {},\n    },\n  },\n\n  IsFilter: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        type: {\n          description: 'Defines the type of this filter. Must be set to `is`',\n          required: true,\n          type: { name: '\"is\"' },\n        },\n        field: {\n          description: 'The boolean field that should be matched',\n          required: true,\n          type: { name: 'string' },\n        },\n        name: {\n          description:\n            'The name that will be used as a caption of the filter button',\n          required: true,\n          type: { name: 'string' },\n        },\n        negatedName: {\n          description:\n            'The name that will be used as a caption of the filter button when the filter is negated',\n          required: false,\n          defaultValue: {\n            value: '\"Not {name}\"',\n            comment: 'where `{name}` is the configured name',\n          },\n          type: { name: 'string' },\n        },\n        available: {\n          description:\n            'A callback that defines whether this filter is currently available',\n          required: false,\n          type: { name: '() => boolean' },\n        },\n      },\n    },\n  },\n\n  FieldValueSelectionFilter: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        type: {\n          description:\n            'Defines the type of this filter. Must be set to `field_value_selection`',\n          required: true,\n          type: { name: '\"field_value_selection\"' },\n        },\n        field: {\n          description: 'The boolean field that should be matched',\n          required: true,\n          type: { name: 'string' },\n        },\n        name: {\n          description:\n            'The name that will be used as a caption of the filter button',\n          required: true,\n          type: { name: 'string' },\n        },\n        options: {\n          description:\n            'Defines possible field value option. These options will be presented to the user ' +\n            'for selection',\n          required: true,\n          type: { name: '#FieldValueOption[] | () => #FieldValueOption[]' },\n        },\n        cache: {\n          description:\n            'When set to a positive number, if `options` is a loading function, the loaded ' +\n            'options will be cached for the set timeout (in milliseconds)',\n          required: false,\n          type: { name: 'number (milliseconds)' },\n        },\n        multiSelect: {\n          description:\n            'Indicates whether the user can filter by multiple values or by only a single one. ' +\n            'When set to \"and\" the filter will create queries by `and`ing the selected values. ' +\n            'When set to \"or\" the filter will create quries by `or`ing the selected values',\n          required: false,\n          defaultValue: { value: 'true (\"and\")' },\n          type: { name: 'boolean | \"or\" | \"and\"' },\n        },\n        loadingMessage: {\n          description:\n            'The message that will be shown while loading the options',\n          required: false,\n          defaultValue: { value: 'Loading...' },\n          type: { name: 'string' },\n        },\n        noOptionsMessage: {\n          description:\n            'The message that will be shown when no options are found',\n          required: false,\n          defaultValue: { value: 'No options found' },\n          type: { name: 'string' },\n        },\n        searchThreshold: {\n          description:\n            'The minimum number of options that are required before a search box is shown to the ' +\n            'user to filter out options',\n          required: false,\n          defaultValue: { value: '10' },\n          type: { name: 'number' },\n        },\n        available: {\n          description:\n            'A callback that defines whether this filter is currently available',\n          required: false,\n          type: { name: '() => boolean' },\n        },\n      },\n    },\n  },\n\n  FieldValueOption: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        value: {\n          description:\n            'The actual value of the option (will be used as a filter)',\n          required: true,\n          type: { name: 'string' },\n        },\n        name: {\n          description:\n            'The name of the option (for display purposes and also for searching through all options). ' +\n            'When not provided, the option `value` will be used as the name',\n          required: false,\n          type: { name: 'string' },\n        },\n        view: {\n          description: 'Enables to fully customize how an option is presented',\n          required: false,\n          type: { name: 'PropTypes.node' },\n        },\n      },\n    },\n  },\n\n  FieldValueToggleFilter: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        type: {\n          description:\n            'Defines the type of the filter. Must be set to `field_value_toggle`',\n          required: true,\n          type: { name: '\"field_value_toggle\"' },\n        },\n        field: {\n          description: 'The name of the field to filter by',\n          required: true,\n          type: { name: 'string' },\n        },\n        value: {\n          description: 'The field value to filter by',\n          required: true,\n          type: { name: 'string' },\n        },\n        name: {\n          description:\n            'The name of the filter (will be used as a caption of the filter button)',\n          required: true,\n          type: { name: 'string' },\n        },\n        negatedName: {\n          description:\n            'The name that will be used when the filter is active yet negated (e.g. `-tag:bug`)',\n          required: false,\n          defaultValue: {\n            value: 'Not {name}',\n            comment: 'where `{name}` is the configured name',\n          },\n          type: { name: 'string' },\n        },\n        available: {\n          description:\n            'Called to check whether this filter is currently available. If not, it will not be shown',\n          required: false,\n          type: { name: '() => boolean' },\n        },\n      },\n    },\n  },\n\n  FieldValueToggleGroupFilter: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        type: {\n          description:\n            'Defines the type of the filter. Must be set to `field_value_toggle_group`',\n          required: true,\n          type: { name: '\"field_value_toggle_group\"' },\n        },\n        field: {\n          description: 'The name of the field to filter by',\n          required: true,\n          type: { name: 'string' },\n        },\n        items: {\n          description:\n            'A list of field value filters that are part of this group',\n          required: true,\n          type: { name: '#FieldValueToggleGroupFilterItemType[]' },\n        },\n        available: {\n          description:\n            'Called to check whether this filter is currently available. If not, it will not be shown',\n          required: false,\n          type: { name: '() => boolean' },\n        },\n      },\n    },\n  },\n\n  FieldValueToggleGroupFilterItemType: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        value: {\n          description: 'Value of the filter item',\n          required: true,\n          type: { name: 'string | number | boolean' },\n        },\n        name: {\n          description: 'Name rendered on the filter button',\n          required: true,\n          type: { name: 'string' },\n        },\n        negatedName: {\n          description:\n            'Name rendered on the filter button when its value is negated in the query',\n          required: false,\n          type: { name: 'string' },\n        },\n      },\n    },\n  },\n\n  ExecuteQueryOptions: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        defaultFields: {\n          description: 'A set of fields to execute the term clauses against',\n          required: false,\n          defaultValue: { value: 'all direct string fields of the object' },\n          type: { name: 'string[]' },\n        },\n        explain: {\n          description:\n            'When `true` each item in the returned array will have a `__explain` field explaining ' +\n            'the reason for the match',\n          required: false,\n          defaultValue: { value: 'false' },\n          type: { name: 'boolean' },\n        },\n      },\n    },\n  },\n\n  ToESQueryOptions: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        extraMustQueries: {\n          description:\n            'An array of additional queries to add as a `must` clause to the generated query',\n          required: false,\n          type: { name: 'ESQuery[]' },\n        },\n        extraMustNotQueries: {\n          description:\n            'An array of additional queries to add as a `must_not` clause to the generated query',\n          required: false,\n          type: { name: 'ESQuery[]' },\n        },\n      },\n    },\n  },\n};\n"]}]}