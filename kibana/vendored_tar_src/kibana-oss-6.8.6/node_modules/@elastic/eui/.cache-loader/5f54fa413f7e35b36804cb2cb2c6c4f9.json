{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src-docs/src/views/filter_group/filter_group_example.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src-docs/src/views/filter_group/filter_group_example.js","mtime":1565204169470},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FilterGroupExample = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nrequire(\"react-router\");\n\nvar _services = require(\"../../services\");\n\nvar _components = require(\"../../components\");\n\nvar _components2 = require(\"../../../../src/components\");\n\nvar _filter_group = _interopRequireDefault(require(\"./filter_group\"));\n\nvar _filter_group_simple = _interopRequireDefault(require(\"./filter_group_simple\"));\n\nvar _filter_group_multi = _interopRequireDefault(require(\"./filter_group_multi\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nvar filterGroupSource = require('!!raw-loader!./filter_group');\n\nvar filterGroupHtml = (0, _services.renderToHtml)(_filter_group.default);\n\nvar filterGroupSimpleSource = require('!!raw-loader!./filter_group_simple');\n\nvar filterGroupSimpleHtml = (0, _services.renderToHtml)(_filter_group.default);\n\nvar filterGroupMultiSource = require('!!raw-loader!./filter_group_multi');\n\nvar filterGroupMultiHtml = (0, _services.renderToHtml)(_filter_group.default);\nvar FilterGroupExample = {\n  title: 'Filter Group',\n  sections: [{\n    title: 'Filter buttons',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: filterGroupSimpleSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: filterGroupSimpleHtml\n    }],\n    text: _react.default.createElement(_react.Fragment, null, _react.default.createElement(\"p\", null, \"Use \", _react.default.createElement(_components2.EuiCode, null, \"EuiFilterGroup\"), \" to wrap\", ' ', _react.default.createElement(_components2.EuiCode, null, \"EuiFilterButton\"), \"s into a container that looks nice against form fields (like search). These buttons are used in two different patterns. The most simplest use is that of an on/off pattern to show whether a filter is on. Add the prop\", ' ', _react.default.createElement(_components2.EuiCode, null, \"withNext\"), \" to remove the border between it and the next EuiFilterButton to visually group similar or opposite style filters.\"), _react.default.createElement(\"p\", null, \"Add the prop \", _react.default.createElement(_components2.EuiCode, null, \"withNext\"), \" to remove the border between it and the next EuiFilterButton to visually group similar or opposite style filters.\"), _react.default.createElement(\"p\", null, \"Set \", _react.default.createElement(_components2.EuiCode, null, \"hasActiveFilters\"), \" to true when the filter is active.\")),\n    props: {\n      EuiFilterGroup: _components2.EuiFilterGroup,\n      EuiFilterButton: _components2.EuiFilterButton\n    },\n    demo: _react.default.createElement(_filter_group_simple.default, null),\n    snippet: \"<EuiFilterGroup>\\n  <EuiFilterButton\\n    hasActiveFilters={this.state.isFilterOn}\\n    onClick={this.toggleFilter}\\n  >\\n    Single filter\\n  </EuiFilterButton>\\n</EuiFilterGroup>\"\n  }, {\n    title: 'Multi-select',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: filterGroupMultiSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: filterGroupMultiHtml\n    }],\n    text: _react.default.createElement(_react.Fragment, null, _react.default.createElement(\"p\", null, \"To provide a long list of grouped filter, use a popover for filtering an array of passed items. This mostly uses standard popover mechanics, but the component\", ' ', _react.default.createElement(_components2.EuiCode, null, \"EuiFilterSelectItem\"), \" is used for the items themselves.\"), _react.default.createElement(\"h3\", null, \"Indicating number of filters\"), _react.default.createElement(\"p\", null, \"By passing a number to \", _react.default.createElement(_components2.EuiCode, null, \"numFilters\"), \" you can express the number of filters available. When the user has applied these filter add the prop \", _react.default.createElement(_components2.EuiCode, null, \"hasActiveFilters\"), \" as before and this will change the coloring of the indicator. You can also supply a number to \", _react.default.createElement(_components2.EuiCode, null, \"numActiveFilters\"), \"which will change the number displayed.\")),\n    props: {\n      EuiFilterButton: _components2.EuiFilterButton,\n      EuiFilterSelectItem: _components2.EuiFilterSelectItem\n    },\n    demo: _react.default.createElement(_filter_group_multi.default, null),\n    snippet: \"<EuiFilterGroup>\\n  <EuiPopover\\n    button={\\n      <EuiFilterButton\\n        iconType=\\\"arrowDown\\\"\\n        onClick={this.onButtonClick}\\n        isSelected={this.state.isPopoverOpen}\\n        numFilters={items.length}\\n        hasActiveFilters={true}\\n        numActiveFilters={2}\\n      >\\n        Filters\\n      </EuiFilterButton>\\n    }\\n    isOpen={this.state.isPopoverOpen}\\n    closePopover={this.closePopover}\\n  >\\n    ...\\n  </EuiPopover>\\n</EuiFilterGroup>\"\n  }, {\n    title: 'Layout',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: filterGroupSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: filterGroupHtml\n    }],\n    text: _react.default.createElement(\"p\", null, \"By default, the bar is auto-widthed based on its contents. To expand the bar to fill its parent's width add\", ' ', _react.default.createElement(_components2.EuiCode, null, \"fullWidth\"), \". This will also set each button to grow. If you do not want the button to grow, set\", ' ', _react.default.createElement(_components2.EuiCode, null, \"grow = false\"), \".\"),\n    components: {\n      EuiFilterGroup: _components2.EuiFilterGroup\n    },\n    props: {\n      EuiFilterGroup: _components2.EuiFilterGroup,\n      EuiFilterButton: _components2.EuiFilterButton,\n      EuiFilterSelectItem: _components2.EuiFilterSelectItem\n    },\n    demo: _react.default.createElement(_filter_group.default, null),\n    snippet: \"<EuiFilterGroup fullWidth>\\n  <EuiFilterButton>\\n    Single filter\\n  </EuiFilterButton>\\n  <EuiFilterButton grow={false} withNext>\\n    On\\n  </EuiFilterButton>\\n  <EuiFilterButton grow={false}>\\n    Off\\n  </EuiFilterButton>\\n</EuiFilterGroup>\"\n  }]\n};\nexports.FilterGroupExample = FilterGroupExample;",{"version":3,"sources":["/Users/chanderprall/projects/eui/src-docs/src/views/filter_group/filter_group_example.js"],"names":["filterGroupSource","require","filterGroupHtml","FilterGroup","filterGroupSimpleSource","filterGroupSimpleHtml","filterGroupMultiSource","filterGroupMultiHtml","FilterGroupExample","title","sections","source","type","GuideSectionTypes","JS","code","HTML","text","props","EuiFilterGroup","EuiFilterButton","demo","snippet","EuiFilterSelectItem","components"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\n\nimport {} from 'react-router';\n\nimport { renderToHtml } from '../../services';\n\nimport { GuideSectionTypes } from '../../components';\n\nimport {\n  EuiCode,\n  EuiFilterGroup,\n  EuiFilterButton,\n  EuiFilterSelectItem,\n} from '../../../../src/components';\n\nimport FilterGroup from './filter_group';\nconst filterGroupSource = require('!!raw-loader!./filter_group');\nconst filterGroupHtml = renderToHtml(FilterGroup);\n\nimport FilterGroupSimple from './filter_group_simple';\nconst filterGroupSimpleSource = require('!!raw-loader!./filter_group_simple');\nconst filterGroupSimpleHtml = renderToHtml(FilterGroup);\n\nimport FilterGroupMulti from './filter_group_multi';\nconst filterGroupMultiSource = require('!!raw-loader!./filter_group_multi');\nconst filterGroupMultiHtml = renderToHtml(FilterGroup);\n\nexport const FilterGroupExample = {\n  title: 'Filter Group',\n  sections: [\n    {\n      title: 'Filter buttons',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: filterGroupSimpleSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: filterGroupSimpleHtml,\n        },\n      ],\n      text: (\n        <Fragment>\n          <p>\n            Use <EuiCode>EuiFilterGroup</EuiCode> to wrap{' '}\n            <EuiCode>EuiFilterButton</EuiCode>s into a container that looks nice\n            against form fields (like search). These buttons are used in two\n            different patterns. The most simplest use is that of an on/off\n            pattern to show whether a filter is on. Add the prop{' '}\n            <EuiCode>withNext</EuiCode> to remove the border between it and the\n            next EuiFilterButton to visually group similar or opposite style\n            filters.\n          </p>\n          <p>\n            Add the prop <EuiCode>withNext</EuiCode> to remove the border\n            between it and the next EuiFilterButton to visually group similar or\n            opposite style filters.\n          </p>\n          <p>\n            Set <EuiCode>hasActiveFilters</EuiCode> to true when the filter is\n            active.\n          </p>\n        </Fragment>\n      ),\n      props: { EuiFilterGroup, EuiFilterButton },\n      demo: <FilterGroupSimple />,\n      snippet: `<EuiFilterGroup>\n  <EuiFilterButton\n    hasActiveFilters={this.state.isFilterOn}\n    onClick={this.toggleFilter}\n  >\n    Single filter\n  </EuiFilterButton>\n</EuiFilterGroup>`,\n    },\n    {\n      title: 'Multi-select',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: filterGroupMultiSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: filterGroupMultiHtml,\n        },\n      ],\n      text: (\n        <Fragment>\n          <p>\n            To provide a long list of grouped filter, use a popover for\n            filtering an array of passed items. This mostly uses standard\n            popover mechanics, but the component{' '}\n            <EuiCode>EuiFilterSelectItem</EuiCode> is used for the items\n            themselves.\n          </p>\n          <h3>Indicating number of filters</h3>\n          <p>\n            By passing a number to <EuiCode>numFilters</EuiCode> you can express\n            the number of filters available. When the user has applied these\n            filter add the prop <EuiCode>hasActiveFilters</EuiCode> as before\n            and this will change the coloring of the indicator. You can also\n            supply a number to <EuiCode>numActiveFilters</EuiCode>\n            which will change the number displayed.\n          </p>\n        </Fragment>\n      ),\n      props: { EuiFilterButton, EuiFilterSelectItem },\n      demo: <FilterGroupMulti />,\n      snippet: `<EuiFilterGroup>\n  <EuiPopover\n    button={\n      <EuiFilterButton\n        iconType=\"arrowDown\"\n        onClick={this.onButtonClick}\n        isSelected={this.state.isPopoverOpen}\n        numFilters={items.length}\n        hasActiveFilters={true}\n        numActiveFilters={2}\n      >\n        Filters\n      </EuiFilterButton>\n    }\n    isOpen={this.state.isPopoverOpen}\n    closePopover={this.closePopover}\n  >\n    ...\n  </EuiPopover>\n</EuiFilterGroup>`,\n    },\n    {\n      title: 'Layout',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: filterGroupSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: filterGroupHtml,\n        },\n      ],\n      text: (\n        <p>\n          By default, the bar is auto-widthed based on its contents. To expand\n          the bar to fill its parent&apos;s width add{' '}\n          <EuiCode>fullWidth</EuiCode>. This will also set each button to grow.\n          If you do not want the button to grow, set{' '}\n          <EuiCode>grow = false</EuiCode>.\n        </p>\n      ),\n      components: { EuiFilterGroup },\n      props: { EuiFilterGroup, EuiFilterButton, EuiFilterSelectItem },\n      demo: <FilterGroup />,\n      snippet: `<EuiFilterGroup fullWidth>\n  <EuiFilterButton>\n    Single filter\n  </EuiFilterButton>\n  <EuiFilterButton grow={false} withNext>\n    On\n  </EuiFilterButton>\n  <EuiFilterButton grow={false}>\n    Off\n  </EuiFilterButton>\n</EuiFilterGroup>`,\n    },\n  ],\n};\n"]}]}