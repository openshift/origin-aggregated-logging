{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/services/accessibility/html_id_generator.ts","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/services/accessibility/html_id_generator.ts","mtime":1565204170061},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.htmlIdGenerator = htmlIdGenerator;\n\nvar _uuid = _interopRequireDefault(require(\"uuid\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * This function returns a function to generate ids.\n * This can be used to generate unique, but predictable ids to pair labels\n * with their inputs. It takes an optional prefix as a parameter. If you don't\n * specify it, it generates a random id prefix. If you specify a custom prefix\n * it should begin with an letter to be HTML4 compliant.\n */\nfunction htmlIdGenerator(idPrefix) {\n  var prefix = idPrefix || \"i\".concat(_uuid.default.v1());\n  return function (suffix) {\n    return \"\".concat(prefix, \"_\").concat(suffix || _uuid.default.v1());\n  };\n}",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/services/accessibility/html_id_generator.ts"],"names":["htmlIdGenerator","idPrefix","prefix","uuid","v1","suffix"],"mappings":";;;;;;;AAAA;;;;AAEA;;;;;;;AAOO,SAASA,eAAT,CAAyBC,QAAzB,EAA4C;AACjD,MAAMC,MAAM,GAAGD,QAAQ,eAAQE,cAAKC,EAAL,EAAR,CAAvB;AACA,SAAO,UAACC,MAAD;AAAA,qBAAwBH,MAAxB,cAAkCG,MAAM,IAAIF,cAAKC,EAAL,EAA5C;AAAA,GAAP;AACD","sourcesContent":["import uuid from 'uuid';\n\n/**\n * This function returns a function to generate ids.\n * This can be used to generate unique, but predictable ids to pair labels\n * with their inputs. It takes an optional prefix as a parameter. If you don't\n * specify it, it generates a random id prefix. If you specify a custom prefix\n * it should begin with an letter to be HTML4 compliant.\n */\nexport function htmlIdGenerator(idPrefix?: string) {\n  const prefix = idPrefix || `i${uuid.v1()}`;\n  return (suffix?: string) => `${prefix}_${suffix || uuid.v1()}`;\n}\n"]}]}