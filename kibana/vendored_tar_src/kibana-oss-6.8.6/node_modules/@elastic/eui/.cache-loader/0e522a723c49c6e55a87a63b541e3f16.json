{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src-docs/src/views/accordion/accordion_example.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src-docs/src/views/accordion/accordion_example.js","mtime":1565204169427},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AccordionExample = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _services = require(\"../../services\");\n\nvar _components = require(\"../../components\");\n\nvar _components2 = require(\"../../../../src/components\");\n\nvar _accordion = _interopRequireDefault(require(\"./accordion\"));\n\nvar _accordion_multiple = _interopRequireDefault(require(\"./accordion_multiple\"));\n\nvar _accordion_form = _interopRequireDefault(require(\"./accordion_form\"));\n\nvar _accordion_extra = _interopRequireDefault(require(\"./accordion_extra\"));\n\nvar _accordion_open = _interopRequireDefault(require(\"./accordion_open\"));\n\nvar _accordion_callback = _interopRequireDefault(require(\"./accordion_callback\"));\n\nvar _accordion_grow = _interopRequireDefault(require(\"./accordion_grow\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nvar accordionSource = require('!!raw-loader!./accordion');\n\nvar accordionHtml = (0, _services.renderToHtml)(_accordion.default);\nvar accordionSnippet = \"<EuiAccordion\\n  id={accordionId}\\n  buttonContent=\\\"Clickable title\\\"\\n  >\\n    <!-- Content to show when expanded -->\\n</EuiAccordion>\\n\";\n\nvar accordionMultipleSource = require('!!raw-loader!./accordion');\n\nvar accordionMultipleHtml = (0, _services.renderToHtml)(_accordion.default);\nvar accordionMultipleSnippet = \"<EuiAccordion\\n  id={accordionId}\\n  buttonContent=\\\"Clickable title for first item\\\"\\n  paddingSize=\\\"l\\\"\\n  >\\n    <!-- Content to show when expanded -->\\n</EuiAccordion>\\n<EuiSpacer />\\n<EuiAccordion\\n  id={accordionId}\\n  buttonContent=\\\"Clickable title for second item\\\"\\n  paddingSize=\\\"l\\\"\\n  >\\n    <!-- Content to show when expanded -->\\n</EuiAccordion>\\n\";\n\nvar accordionFormSource = require('!!raw-loader!./accordion_form');\n\nvar accordionFormHtml = (0, _services.renderToHtml)(_accordion_form.default);\n\nvar accordionExtraSource = require('!!raw-loader!./accordion_extra');\n\nvar accordionExtraHtml = (0, _services.renderToHtml)(_accordion_extra.default);\nvar accordionExtraSnippet = \"<EuiAccordion\\n  id={accordionId}\\n  buttonContent=\\\"Clickable title\\\"\\n  extraAction={<EuiButton size=\\\"s\\\">Extra action!</EuiButton>}\\n  paddingSize=\\\"l\\\"\\n  >\\n    <!-- Content to show when expanded -->\\n</EuiAccordion>\\n\";\n\nvar accordionOpenSource = require('!!raw-loader!./accordion_open');\n\nvar accordionOpenHtml = (0, _services.renderToHtml)(_accordion_open.default);\nvar accordionOpenSnippet = \"<EuiAccordion\\n  id={accordionId}\\n  buttonContent=\\\"Clickable title\\\"\\n  initialIsOpen={true}\\n  >\\n    <!-- Content to show when expanded -->\\n</EuiAccordion>\\n\";\n\nvar accordionCallbackSource = require('!!raw-loader!./accordion_callback');\n\nvar accordionCallbackHtml = (0, _services.renderToHtml)(_accordion_callback.default);\nvar accordionCallbackSnippet = \"<EuiAccordion\\n  id={accordionId}\\n  buttonContent=\\\"Clickable title\\\"\\n  onToggle={isOpen => handleOnToggle(isOpen)}\\n  >\\n    <!-- Content to show when expanded -->\\n</EuiAccordion>\\n\";\n\nvar accordionGrowSource = require('!!raw-loader!./accordion_grow');\n\nvar accordionGrowHtml = (0, _services.renderToHtml)(_accordion_grow.default);\nvar AccordionExample = {\n  title: 'Accordion',\n  intro: _react.default.createElement(_react.Fragment, null, _react.default.createElement(_components2.EuiCallOut, {\n    title: \"Take care including flex group content within accordions\"\n  }, _react.default.createElement(\"p\", null, _react.default.createElement(_components2.EuiCode, null, \"EuiFlexGroup\"), \"'s negative margins can sometimes create scrollbars within \", _react.default.createElement(_components2.EuiCode, null, \"EuiAccordion\"), \" because of the overflow tricks used to hide content. If you run into this issue make sure your \", _react.default.createElement(_components2.EuiCode, null, \"paddingSize\"), \" prop is large enough to account for the \", _react.default.createElement(_components2.EuiCode, null, \"gutterSize\"), \" of any nested flex groups.\")), _react.default.createElement(_components2.EuiSpacer, {\n    size: \"l\"\n  })),\n  sections: [{\n    title: 'Unstyled',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: accordionSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: accordionHtml\n    }],\n    text: _react.default.createElement(\"div\", null, _react.default.createElement(\"p\", null, _react.default.createElement(_components2.EuiCode, null, \"EuiAccordion\"), \" has been purposely designed with minimal styles, allowing you to visually enhance it as needed (see the accordion form example). The only styling enforced by EUI is the caret icon, which indicates to users that the item can be opened.\"), _react.default.createElement(\"p\", null, \"A \", _react.default.createElement(_components2.EuiCode, null, \"buttonContent\"), \" prop defines the content of the clickable area. On click it will expose the children and animate based on the height of those children.\"), _react.default.createElement(\"p\", null, \"For styling needs, classes can be individually applied with\", ' ', _react.default.createElement(_components2.EuiCode, null, \"className\"), \" (for the entire accordion), and\", ' ', _react.default.createElement(_components2.EuiCode, null, \"buttonClassName\"), \" (for the clickable area).\")),\n    props: {\n      EuiAccordion: _components2.EuiAccordion\n    },\n    snippet: accordionSnippet,\n    demo: _react.default.createElement(_accordion.default, null)\n  }, {\n    title: 'Multiple accordions',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: accordionMultipleSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: accordionMultipleHtml\n    }],\n    text: _react.default.createElement(\"div\", null, _react.default.createElement(\"p\", null, \"Use any number of \", _react.default.createElement(_components2.EuiCode, null, \"EuiAccordion\"), \" elements to visually display them as a group.\"), _react.default.createElement(\"p\", null, \"Due to the previously mentioned bare styles, it is recommended to place an \", _react.default.createElement(_components2.EuiCode, null, \"EuiSpacer\"), \" between accordion items. Padding within each accordion item can be applied via the\", ' ', _react.default.createElement(_components2.EuiCode, null, \"paddingSize\"), \" prop.\")),\n    snippet: accordionMultipleSnippet,\n    demo: _react.default.createElement(_accordion_multiple.default, null)\n  }, {\n    title: 'Accordion can have extra actions',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: accordionExtraSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: accordionExtraHtml\n    }],\n    text: _react.default.createElement(\"p\", null, \"Use the \", _react.default.createElement(_components2.EuiCode, null, \"extraAction\"), \" prop to pass an extra action displayed on the right of any accordion. Usually this is a delete or button, but can be anything. Note that this action is separate from the click state that expands the accordion. This is needed to make it accessible.\"),\n    snippet: accordionExtraSnippet,\n    demo: _react.default.createElement(_accordion_extra.default, null)\n  }, {\n    title: 'Accordion can be opened on initial render',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: accordionOpenSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: accordionOpenHtml\n    }],\n    text: _react.default.createElement(\"p\", null, \"Use the \", _react.default.createElement(_components2.EuiCode, null, \"initialIsOpen\"), \" prop to open the accordion when first rendered.\"),\n    snippet: accordionOpenSnippet,\n    demo: _react.default.createElement(_accordion_open.default, null)\n  }, {\n    title: 'Accordion can call a function on open and close',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: accordionCallbackSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: accordionCallbackHtml\n    }],\n    text: _react.default.createElement(\"p\", null, \"Use the \", _react.default.createElement(_components2.EuiCode, null, \"onToggle\"), \" prop to pass a callback method that will be called on open and close.\"),\n    snippet: accordionCallbackSnippet,\n    demo: _react.default.createElement(_accordion_callback.default, null)\n  }, {\n    title: 'Accordion content can dynamically change height',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: accordionGrowSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: accordionGrowHtml\n    }],\n    text: _react.default.createElement(\"p\", null, \"If an accordion\\u2019s content changes height while the accordion is open, it will resize dynamically.\"),\n    demo: _react.default.createElement(_accordion_grow.default, null)\n  }, {\n    title: 'Accordion for forms',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: accordionFormSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: accordionFormHtml\n    }],\n    text: _react.default.createElement(\"p\", null, \"Putting it all together. Using the \", _react.default.createElement(_components2.EuiCode, null, \"classNames\"), \"and \", _react.default.createElement(_components2.EuiCode, null, \"extraAction\"), \" as explained above, we can style the accordion in a way common for form use.\"),\n    demo: _react.default.createElement(_accordion_form.default, null)\n  }]\n};\nexports.AccordionExample = AccordionExample;",{"version":3,"sources":["/Users/chanderprall/projects/eui/src-docs/src/views/accordion/accordion_example.js"],"names":["accordionSource","require","accordionHtml","Accordion","accordionSnippet","accordionMultipleSource","accordionMultipleHtml","accordionMultipleSnippet","accordionFormSource","accordionFormHtml","AccordionForm","accordionExtraSource","accordionExtraHtml","AccordionExtra","accordionExtraSnippet","accordionOpenSource","accordionOpenHtml","AccordionOpen","accordionOpenSnippet","accordionCallbackSource","accordionCallbackHtml","AccordionCallback","accordionCallbackSnippet","accordionGrowSource","accordionGrowHtml","AccordionGrow","AccordionExample","title","intro","sections","source","type","GuideSectionTypes","JS","code","HTML","text","props","EuiAccordion","snippet","demo"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\n\nimport { renderToHtml } from '../../services';\n\nimport { GuideSectionTypes } from '../../components';\n\nimport {\n  EuiAccordion,\n  EuiCode,\n  EuiCallOut,\n  EuiSpacer,\n} from '../../../../src/components';\n\nimport Accordion from './accordion';\nconst accordionSource = require('!!raw-loader!./accordion');\nconst accordionHtml = renderToHtml(Accordion);\nconst accordionSnippet = `<EuiAccordion\n  id={accordionId}\n  buttonContent=\"Clickable title\"\n  >\n    <!-- Content to show when expanded -->\n</EuiAccordion>\n`;\n\nimport AccordionMultiple from './accordion_multiple';\nconst accordionMultipleSource = require('!!raw-loader!./accordion');\nconst accordionMultipleHtml = renderToHtml(Accordion);\nconst accordionMultipleSnippet = `<EuiAccordion\n  id={accordionId}\n  buttonContent=\"Clickable title for first item\"\n  paddingSize=\"l\"\n  >\n    <!-- Content to show when expanded -->\n</EuiAccordion>\n<EuiSpacer />\n<EuiAccordion\n  id={accordionId}\n  buttonContent=\"Clickable title for second item\"\n  paddingSize=\"l\"\n  >\n    <!-- Content to show when expanded -->\n</EuiAccordion>\n`;\n\nimport AccordionForm from './accordion_form';\nconst accordionFormSource = require('!!raw-loader!./accordion_form');\nconst accordionFormHtml = renderToHtml(AccordionForm);\n\nimport AccordionExtra from './accordion_extra';\nconst accordionExtraSource = require('!!raw-loader!./accordion_extra');\nconst accordionExtraHtml = renderToHtml(AccordionExtra);\nconst accordionExtraSnippet = `<EuiAccordion\n  id={accordionId}\n  buttonContent=\"Clickable title\"\n  extraAction={<EuiButton size=\"s\">Extra action!</EuiButton>}\n  paddingSize=\"l\"\n  >\n    <!-- Content to show when expanded -->\n</EuiAccordion>\n`;\n\nimport AccordionOpen from './accordion_open';\nconst accordionOpenSource = require('!!raw-loader!./accordion_open');\nconst accordionOpenHtml = renderToHtml(AccordionOpen);\nconst accordionOpenSnippet = `<EuiAccordion\n  id={accordionId}\n  buttonContent=\"Clickable title\"\n  initialIsOpen={true}\n  >\n    <!-- Content to show when expanded -->\n</EuiAccordion>\n`;\n\nimport AccordionCallback from './accordion_callback';\nconst accordionCallbackSource = require('!!raw-loader!./accordion_callback');\nconst accordionCallbackHtml = renderToHtml(AccordionCallback);\nconst accordionCallbackSnippet = `<EuiAccordion\n  id={accordionId}\n  buttonContent=\"Clickable title\"\n  onToggle={isOpen => handleOnToggle(isOpen)}\n  >\n    <!-- Content to show when expanded -->\n</EuiAccordion>\n`;\n\nimport AccordionGrow from './accordion_grow';\nconst accordionGrowSource = require('!!raw-loader!./accordion_grow');\nconst accordionGrowHtml = renderToHtml(AccordionGrow);\n\nexport const AccordionExample = {\n  title: 'Accordion',\n  intro: (\n    <Fragment>\n      <EuiCallOut title=\"Take care including flex group content within accordions\">\n        <p>\n          <EuiCode>EuiFlexGroup</EuiCode>&apos;s negative margins can sometimes\n          create scrollbars within <EuiCode>EuiAccordion</EuiCode> because of\n          the overflow tricks used to hide content. If you run into this issue\n          make sure your <EuiCode>paddingSize</EuiCode> prop is large enough to\n          account for the <EuiCode>gutterSize</EuiCode> of any nested flex\n          groups.\n        </p>\n      </EuiCallOut>\n\n      <EuiSpacer size=\"l\" />\n    </Fragment>\n  ),\n  sections: [\n    {\n      title: 'Unstyled',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: accordionSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: accordionHtml,\n        },\n      ],\n      text: (\n        <div>\n          <p>\n            <EuiCode>EuiAccordion</EuiCode> has been purposely designed with\n            minimal styles, allowing you to visually enhance it as needed (see\n            the accordion form example). The only styling enforced by EUI is the\n            caret icon, which indicates to users that the item can be opened.\n          </p>\n          <p>\n            A <EuiCode>buttonContent</EuiCode> prop defines the content of the\n            clickable area. On click it will expose the children and animate\n            based on the height of those children.\n          </p>\n          <p>\n            For styling needs, classes can be individually applied with{' '}\n            <EuiCode>className</EuiCode> (for the entire accordion), and{' '}\n            <EuiCode>buttonClassName</EuiCode> (for the clickable area).\n          </p>\n        </div>\n      ),\n      props: { EuiAccordion },\n      snippet: accordionSnippet,\n      demo: <Accordion />,\n    },\n    {\n      title: 'Multiple accordions',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: accordionMultipleSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: accordionMultipleHtml,\n        },\n      ],\n      text: (\n        <div>\n          <p>\n            Use any number of <EuiCode>EuiAccordion</EuiCode> elements to\n            visually display them as a group.\n          </p>\n          <p>\n            Due to the previously mentioned bare styles, it is recommended to\n            place an <EuiCode>EuiSpacer</EuiCode> between accordion items.\n            Padding within each accordion item can be applied via the{' '}\n            <EuiCode>paddingSize</EuiCode> prop.\n          </p>\n        </div>\n      ),\n      snippet: accordionMultipleSnippet,\n      demo: <AccordionMultiple />,\n    },\n    {\n      title: 'Accordion can have extra actions',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: accordionExtraSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: accordionExtraHtml,\n        },\n      ],\n      text: (\n        <p>\n          Use the <EuiCode>extraAction</EuiCode> prop to pass an extra action\n          displayed on the right of any accordion. Usually this is a delete or\n          button, but can be anything. Note that this action is separate from\n          the click state that expands the accordion. This is needed to make it\n          accessible.\n        </p>\n      ),\n      snippet: accordionExtraSnippet,\n      demo: <AccordionExtra />,\n    },\n    {\n      title: 'Accordion can be opened on initial render',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: accordionOpenSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: accordionOpenHtml,\n        },\n      ],\n      text: (\n        <p>\n          Use the <EuiCode>initialIsOpen</EuiCode> prop to open the accordion\n          when first rendered.\n        </p>\n      ),\n      snippet: accordionOpenSnippet,\n      demo: <AccordionOpen />,\n    },\n    {\n      title: 'Accordion can call a function on open and close',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: accordionCallbackSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: accordionCallbackHtml,\n        },\n      ],\n      text: (\n        <p>\n          Use the <EuiCode>onToggle</EuiCode> prop to pass a callback method\n          that will be called on open and close.\n        </p>\n      ),\n      snippet: accordionCallbackSnippet,\n      demo: <AccordionCallback />,\n    },\n    {\n      title: 'Accordion content can dynamically change height',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: accordionGrowSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: accordionGrowHtml,\n        },\n      ],\n      text: (\n        <p>\n          If an accordion&rsquo;s content changes height while the accordion is\n          open, it will resize dynamically.\n        </p>\n      ),\n      demo: <AccordionGrow />,\n    },\n    {\n      title: 'Accordion for forms',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: accordionFormSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: accordionFormHtml,\n        },\n      ],\n      text: (\n        <p>\n          Putting it all together. Using the <EuiCode>classNames</EuiCode>\n          and <EuiCode>extraAction</EuiCode> as explained above, we can style\n          the accordion in a way common for form use.\n        </p>\n      ),\n      demo: <AccordionForm />,\n    },\n  ],\n};\n"]}]}