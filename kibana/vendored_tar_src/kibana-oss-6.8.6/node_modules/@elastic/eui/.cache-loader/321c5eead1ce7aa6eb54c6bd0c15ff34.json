{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src-docs/src/views/button/button_group.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src-docs/src/views/button/button_group.js","mtime":1565204169436},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.object.set-prototype-of\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _components = require(\"../../../../src/components\");\n\nvar _make_id = _interopRequireDefault(require(\"../../../../src/components/form/form_row/make_id\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar _default =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(_default, _Component);\n\n  function _default(props) {\n    var _this;\n\n    _classCallCheck(this, _default);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(_default).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onChange\", function (optionId) {\n      _this.setState({\n        toggleIdSelected: optionId\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onChangeMulti\", function (optionId) {\n      var newToggleIdToSelectedMap = _objectSpread({}, _this.state.toggleIdToSelectedMap, _defineProperty({}, optionId, !_this.state.toggleIdToSelectedMap[optionId]));\n\n      _this.setState({\n        toggleIdToSelectedMap: newToggleIdToSelectedMap\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onChangeIcons\", function (optionId) {\n      _this.setState({\n        toggleIconIdSelected: optionId\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onChangeIconsMulti\", function (optionId) {\n      var newToggleIconIdToSelectedMap = _objectSpread({}, _this.state.toggleIconIdToSelectedMap, _defineProperty({}, optionId, !_this.state.toggleIconIdToSelectedMap[optionId]));\n\n      _this.setState({\n        toggleIconIdToSelectedMap: newToggleIconIdToSelectedMap\n      });\n    });\n\n    var idPrefix = (0, _make_id.default)();\n    var idPrefix2 = (0, _make_id.default)();\n    var idPrefix3 = (0, _make_id.default)();\n    _this.toggleButtons = [{\n      id: \"\".concat(idPrefix, \"0\"),\n      label: 'Option one'\n    }, {\n      id: \"\".concat(idPrefix, \"1\"),\n      label: 'Option two is selected by default'\n    }, {\n      id: \"\".concat(idPrefix, \"2\"),\n      label: 'Option three'\n    }];\n    _this.toggleButtonsMulti = [{\n      id: \"\".concat(idPrefix2, \"0\"),\n      label: 'Option 1'\n    }, {\n      id: \"\".concat(idPrefix2, \"1\"),\n      label: 'Option 2 is selected by default'\n    }, {\n      id: \"\".concat(idPrefix2, \"2\"),\n      label: 'Option 3'\n    }];\n    _this.toggleButtonsIcons = [{\n      id: \"\".concat(idPrefix3, \"0\"),\n      label: 'Align left',\n      iconType: 'editorAlignLeft'\n    }, {\n      id: \"\".concat(idPrefix3, \"1\"),\n      label: 'Align center',\n      iconType: 'editorAlignCenter'\n    }, {\n      id: \"\".concat(idPrefix3, \"2\"),\n      label: 'Align right',\n      iconType: 'editorAlignRight'\n    }];\n    _this.toggleButtonsIconsMulti = [{\n      id: \"\".concat(idPrefix3, \"3\"),\n      label: 'Bold',\n      name: 'bold',\n      iconType: 'editorBold'\n    }, {\n      id: \"\".concat(idPrefix3, \"4\"),\n      label: 'Italic',\n      name: 'italic',\n      iconType: 'editorItalic'\n    }, {\n      id: \"\".concat(idPrefix3, \"5\"),\n      label: 'Underline',\n      name: 'underline',\n      iconType: 'editorUnderline'\n    }, {\n      id: \"\".concat(idPrefix3, \"6\"),\n      label: 'Strikethrough',\n      name: 'strikethrough',\n      iconType: 'editorStrike'\n    }];\n    _this.state = {\n      toggleIdSelected: \"\".concat(idPrefix, \"1\"),\n      toggleIdToSelectedMap: _defineProperty({}, \"\".concat(idPrefix2, \"1\"), true),\n      toggleIconIdSelected: \"\".concat(idPrefix3, \"1\"),\n      toggleIconIdToSelectedMap: {}\n    };\n    return _this;\n  }\n\n  _createClass(_default, [{\n    key: \"render\",\n    value: function render() {\n      return _react.default.createElement(_react.Fragment, null, _react.default.createElement(_components.EuiButtonGroup, {\n        legend: \"This is a basic group\",\n        options: this.toggleButtons,\n        idSelected: this.state.toggleIdSelected,\n        onChange: this.onChange\n      }), _react.default.createElement(_components.EuiSpacer, {\n        size: \"m\"\n      }), _react.default.createElement(_components.EuiTitle, {\n        size: \"xxs\"\n      }, _react.default.createElement(\"h3\", null, \"Primary & multi select\")), _react.default.createElement(_components.EuiSpacer, {\n        size: \"s\"\n      }), _react.default.createElement(_components.EuiButtonGroup, {\n        legend: \"This is a primary group\",\n        name: \"primary\",\n        options: this.toggleButtonsMulti,\n        idToSelectedMap: this.state.toggleIdToSelectedMap,\n        onChange: this.onChangeMulti,\n        color: \"primary\",\n        type: \"multi\"\n      }), _react.default.createElement(_components.EuiSpacer, {\n        size: \"m\"\n      }), _react.default.createElement(_components.EuiTitle, {\n        size: \"xxs\"\n      }, _react.default.createElement(\"h3\", null, \"Disabled & full width\")), _react.default.createElement(_components.EuiSpacer, {\n        size: \"s\"\n      }), _react.default.createElement(_components.EuiButtonGroup, {\n        legend: \"This is a disabled group\",\n        name: \"disabledGroup\",\n        options: this.toggleButtons,\n        idSelected: this.state.toggleIdSelected,\n        onChange: this.onChange,\n        isDisabled: true,\n        isFullWidth: true\n      }), _react.default.createElement(_components.EuiSpacer, {\n        size: \"m\"\n      }), _react.default.createElement(_components.EuiTitle, {\n        size: \"xxs\"\n      }, _react.default.createElement(\"h3\", null, \"Icons only\")), _react.default.createElement(_components.EuiSpacer, {\n        size: \"s\"\n      }), _react.default.createElement(_components.EuiButtonGroup, {\n        legend: \"Text align\",\n        name: \"textAlign\",\n        className: \"eui-displayInlineBlock\",\n        options: this.toggleButtonsIcons,\n        idSelected: this.state.toggleIconIdSelected,\n        onChange: this.onChangeIcons,\n        isIconOnly: true\n      }), \"\\xA0\\xA0\", _react.default.createElement(_components.EuiButtonGroup, {\n        legend: \"Text style\",\n        className: \"eui-displayInlineBlock\",\n        options: this.toggleButtonsIconsMulti,\n        idToSelectedMap: this.state.toggleIconIdToSelectedMap,\n        onChange: this.onChangeIconsMulti,\n        type: \"multi\",\n        isIconOnly: true\n      }));\n    }\n  }]);\n\n  return _default;\n}(_react.Component);\n\nexports.default = _default;\nmodule.exports = exports.default;",{"version":3,"sources":["/Users/chanderprall/projects/eui/src-docs/src/views/button/button_group.js"],"names":["props","optionId","setState","toggleIdSelected","newToggleIdToSelectedMap","state","toggleIdToSelectedMap","toggleIconIdSelected","newToggleIconIdToSelectedMap","toggleIconIdToSelectedMap","idPrefix","idPrefix2","idPrefix3","toggleButtons","id","label","toggleButtonsMulti","toggleButtonsIcons","iconType","toggleButtonsIconsMulti","name","onChange","onChangeMulti","onChangeIcons","onChangeIconsMulti","Component"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\n\nimport {\n  EuiButtonGroup,\n  EuiSpacer,\n  EuiTitle,\n} from '../../../../src/components';\n\nimport makeId from '../../../../src/components/form/form_row/make_id';\n\nexport default class extends Component {\n  constructor(props) {\n    super(props);\n\n    const idPrefix = makeId();\n    const idPrefix2 = makeId();\n    const idPrefix3 = makeId();\n\n    this.toggleButtons = [\n      {\n        id: `${idPrefix}0`,\n        label: 'Option one',\n      },\n      {\n        id: `${idPrefix}1`,\n        label: 'Option two is selected by default',\n      },\n      {\n        id: `${idPrefix}2`,\n        label: 'Option three',\n      },\n    ];\n\n    this.toggleButtonsMulti = [\n      {\n        id: `${idPrefix2}0`,\n        label: 'Option 1',\n      },\n      {\n        id: `${idPrefix2}1`,\n        label: 'Option 2 is selected by default',\n      },\n      {\n        id: `${idPrefix2}2`,\n        label: 'Option 3',\n      },\n    ];\n\n    this.toggleButtonsIcons = [\n      {\n        id: `${idPrefix3}0`,\n        label: 'Align left',\n        iconType: 'editorAlignLeft',\n      },\n      {\n        id: `${idPrefix3}1`,\n        label: 'Align center',\n        iconType: 'editorAlignCenter',\n      },\n      {\n        id: `${idPrefix3}2`,\n        label: 'Align right',\n        iconType: 'editorAlignRight',\n      },\n    ];\n\n    this.toggleButtonsIconsMulti = [\n      {\n        id: `${idPrefix3}3`,\n        label: 'Bold',\n        name: 'bold',\n        iconType: 'editorBold',\n      },\n      {\n        id: `${idPrefix3}4`,\n        label: 'Italic',\n        name: 'italic',\n        iconType: 'editorItalic',\n      },\n      {\n        id: `${idPrefix3}5`,\n        label: 'Underline',\n        name: 'underline',\n        iconType: 'editorUnderline',\n      },\n      {\n        id: `${idPrefix3}6`,\n        label: 'Strikethrough',\n        name: 'strikethrough',\n        iconType: 'editorStrike',\n      },\n    ];\n\n    this.state = {\n      toggleIdSelected: `${idPrefix}1`,\n      toggleIdToSelectedMap: {\n        [`${idPrefix2}1`]: true,\n      },\n      toggleIconIdSelected: `${idPrefix3}1`,\n      toggleIconIdToSelectedMap: {},\n    };\n  }\n\n  onChange = optionId => {\n    this.setState({\n      toggleIdSelected: optionId,\n    });\n  };\n\n  onChangeMulti = optionId => {\n    const newToggleIdToSelectedMap = {\n      ...this.state.toggleIdToSelectedMap,\n      ...{\n        [optionId]: !this.state.toggleIdToSelectedMap[optionId],\n      },\n    };\n\n    this.setState({\n      toggleIdToSelectedMap: newToggleIdToSelectedMap,\n    });\n  };\n\n  onChangeIcons = optionId => {\n    this.setState({\n      toggleIconIdSelected: optionId,\n    });\n  };\n\n  onChangeIconsMulti = optionId => {\n    const newToggleIconIdToSelectedMap = {\n      ...this.state.toggleIconIdToSelectedMap,\n      ...{\n        [optionId]: !this.state.toggleIconIdToSelectedMap[optionId],\n      },\n    };\n\n    this.setState({\n      toggleIconIdToSelectedMap: newToggleIconIdToSelectedMap,\n    });\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <EuiButtonGroup\n          legend=\"This is a basic group\"\n          options={this.toggleButtons}\n          idSelected={this.state.toggleIdSelected}\n          onChange={this.onChange}\n        />\n        <EuiSpacer size=\"m\" />\n        <EuiTitle size=\"xxs\">\n          <h3>Primary &amp; multi select</h3>\n        </EuiTitle>\n        <EuiSpacer size=\"s\" />\n        <EuiButtonGroup\n          legend=\"This is a primary group\"\n          name=\"primary\"\n          options={this.toggleButtonsMulti}\n          idToSelectedMap={this.state.toggleIdToSelectedMap}\n          onChange={this.onChangeMulti}\n          color=\"primary\"\n          type=\"multi\"\n        />\n        <EuiSpacer size=\"m\" />\n        <EuiTitle size=\"xxs\">\n          <h3>Disabled &amp; full width</h3>\n        </EuiTitle>\n        <EuiSpacer size=\"s\" />\n        <EuiButtonGroup\n          legend=\"This is a disabled group\"\n          name=\"disabledGroup\"\n          options={this.toggleButtons}\n          idSelected={this.state.toggleIdSelected}\n          onChange={this.onChange}\n          isDisabled\n          isFullWidth\n        />\n        <EuiSpacer size=\"m\" />\n        <EuiTitle size=\"xxs\">\n          <h3>Icons only</h3>\n        </EuiTitle>\n        <EuiSpacer size=\"s\" />\n        <EuiButtonGroup\n          legend=\"Text align\"\n          name=\"textAlign\"\n          className=\"eui-displayInlineBlock\"\n          options={this.toggleButtonsIcons}\n          idSelected={this.state.toggleIconIdSelected}\n          onChange={this.onChangeIcons}\n          isIconOnly\n        />\n        &nbsp;&nbsp;\n        <EuiButtonGroup\n          legend=\"Text style\"\n          className=\"eui-displayInlineBlock\"\n          options={this.toggleButtonsIconsMulti}\n          idToSelectedMap={this.state.toggleIconIdToSelectedMap}\n          onChange={this.onChangeIconsMulti}\n          type=\"multi\"\n          isIconOnly\n        />\n      </Fragment>\n    );\n  }\n}\n"]}]}