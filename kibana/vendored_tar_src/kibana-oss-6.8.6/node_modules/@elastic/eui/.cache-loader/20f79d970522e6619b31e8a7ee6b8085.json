{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/form/range/range_tooltip.tsx","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/form/range/range_tooltip.tsx","mtime":1565204169741},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EuiRangeTooltip = void 0;\n\nrequire(\"core-js/modules/es6.function.name\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar EuiRangeTooltip = function EuiRangeTooltip(_ref) {\n  var value = _ref.value,\n      valueAppend = _ref.valueAppend,\n      valuePrepend = _ref.valuePrepend,\n      max = _ref.max,\n      min = _ref.min,\n      name = _ref.name,\n      showTicks = _ref.showTicks;\n  // Calculate the left position based on value\n  var val = 0;\n\n  if (typeof value === 'number') {\n    val = value;\n  } else if (typeof value === 'string') {\n    val = parseFloat(value);\n  }\n\n  var decimal = (val - min) / (max - min); // Must be between 0-100%\n\n  var valuePosition = decimal <= 1 ? decimal : 1;\n  valuePosition = valuePosition >= 0 ? valuePosition : 0;\n  var valuePositionSide;\n  var valuePositionStyle;\n\n  if (valuePosition > 0.5) {\n    valuePositionSide = 'left';\n    valuePositionStyle = {\n      right: \"\".concat((1 - valuePosition) * 100, \"%\")\n    };\n  } else {\n    valuePositionSide = 'right';\n    valuePositionStyle = {\n      left: \"\".concat(valuePosition * 100, \"%\")\n    };\n  } // Change left/right position based on value (half way point)\n\n\n  var valueClasses = (0, _classnames.default)('euiRangeTooltip__value', \"euiRangeTooltip__value--\".concat(valuePositionSide), {\n    'euiRangeTooltip__value--hasTicks': showTicks\n  });\n  return _react.default.createElement(\"div\", {\n    className: \"euiRangeTooltip\"\n  }, _react.default.createElement(\"output\", {\n    className: valueClasses,\n    htmlFor: name,\n    style: valuePositionStyle\n  }, valuePrepend, value, valueAppend));\n};\n\nexports.EuiRangeTooltip = EuiRangeTooltip;\nEuiRangeTooltip.propTypes = {\n  value: _propTypes.default.oneOfType([_propTypes.default.number.isRequired, _propTypes.default.string.isRequired]),\n  valueAppend: _propTypes.default.node,\n  valuePrepend: _propTypes.default.node,\n  max: _propTypes.default.number.isRequired,\n  min: _propTypes.default.number.isRequired,\n  name: _propTypes.default.string,\n  showTicks: _propTypes.default.bool\n};\nEuiRangeTooltip.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"EuiRangeTooltip\",\n  \"props\": {\n    \"value\": {\n      \"type\": {\n        \"name\": \"union\",\n        \"value\": [{\n          \"name\": \"number\"\n        }, {\n          \"name\": \"string\"\n        }]\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"valueAppend\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"valuePrepend\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"max\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"min\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"showTicks\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/form/range/range_tooltip.tsx"],"names":["EuiRangeTooltip","value","valueAppend","valuePrepend","max","min","name","showTicks","val","parseFloat","decimal","valuePosition","valuePositionSide","valuePositionStyle","right","left","valueClasses"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AAYO,IAAMA,eAAwD,GAAG,SAA3DA,eAA2D,OAQlE;AAAA,MAPJC,KAOI,QAPJA,KAOI;AAAA,MANJC,WAMI,QANJA,WAMI;AAAA,MALJC,YAKI,QALJA,YAKI;AAAA,MAJJC,GAII,QAJJA,GAII;AAAA,MAHJC,GAGI,QAHJA,GAGI;AAAA,MAFJC,IAEI,QAFJA,IAEI;AAAA,MADJC,SACI,QADJA,SACI;AACJ;AACA,MAAIC,GAAG,GAAG,CAAV;;AACA,MAAI,OAAOP,KAAP,KAAiB,QAArB,EAA+B;AAC7BO,IAAAA,GAAG,GAAGP,KAAN;AACD,GAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AACpCO,IAAAA,GAAG,GAAGC,UAAU,CAACR,KAAD,CAAhB;AACD;;AACD,MAAMS,OAAO,GAAG,CAACF,GAAG,GAAGH,GAAP,KAAeD,GAAG,GAAGC,GAArB,CAAhB,CARI,CASJ;;AACA,MAAIM,aAAa,GAAGD,OAAO,IAAI,CAAX,GAAeA,OAAf,GAAyB,CAA7C;AACAC,EAAAA,aAAa,GAAGA,aAAa,IAAI,CAAjB,GAAqBA,aAArB,GAAqC,CAArD;AAEA,MAAIC,iBAAJ;AACA,MAAIC,kBAAJ;;AACA,MAAIF,aAAa,GAAG,GAApB,EAAyB;AACvBC,IAAAA,iBAAiB,GAAG,MAApB;AACAC,IAAAA,kBAAkB,GAAG;AAAEC,MAAAA,KAAK,YAAK,CAAC,IAAIH,aAAL,IAAsB,GAA3B;AAAP,KAArB;AACD,GAHD,MAGO;AACLC,IAAAA,iBAAiB,GAAG,OAApB;AACAC,IAAAA,kBAAkB,GAAG;AAAEE,MAAAA,IAAI,YAAKJ,aAAa,GAAG,GAArB;AAAN,KAArB;AACD,GArBG,CAuBJ;;;AACA,MAAMK,YAAY,GAAG,yBACnB,wBADmB,oCAEQJ,iBAFR,GAGnB;AACE,wCAAoCL;AADtC,GAHmB,CAArB;AAQA,SACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AACE,IAAA,SAAS,EAAES,YADb;AAEE,IAAA,OAAO,EAAEV,IAFX;AAGE,IAAA,KAAK,EAAEO;AAHT,KAIGV,YAJH,EAKGF,KALH,EAMGC,WANH,CADF,CADF;AAYD,CApDM","sourcesContent":["import React from 'react';\nimport PropTypes from \"prop-types\";\nimport classNames from 'classnames';\nexport var EuiRangeTooltip = ({\n  value,\n  valueAppend,\n  valuePrepend,\n  max,\n  min,\n  name,\n  showTicks\n}) => {\n  // Calculate the left position based on value\n  let val = 0;\n\n  if (typeof value === 'number') {\n    val = value;\n  } else if (typeof value === 'string') {\n    val = parseFloat(value);\n  }\n\n  const decimal = (val - min) / (max - min); // Must be between 0-100%\n\n  let valuePosition = decimal <= 1 ? decimal : 1;\n  valuePosition = valuePosition >= 0 ? valuePosition : 0;\n  let valuePositionSide;\n  let valuePositionStyle;\n\n  if (valuePosition > 0.5) {\n    valuePositionSide = 'left';\n    valuePositionStyle = {\n      right: `${(1 - valuePosition) * 100}%`\n    };\n  } else {\n    valuePositionSide = 'right';\n    valuePositionStyle = {\n      left: `${valuePosition * 100}%`\n    };\n  } // Change left/right position based on value (half way point)\n\n\n  const valueClasses = classNames('euiRangeTooltip__value', `euiRangeTooltip__value--${valuePositionSide}`, {\n    'euiRangeTooltip__value--hasTicks': showTicks\n  });\n  return <div className=\"euiRangeTooltip\">\n      <output className={valueClasses} htmlFor={name} style={valuePositionStyle}>\n        {valuePrepend}\n        {value}\n        {valueAppend}\n      </output>\n    </div>;\n};\nEuiRangeTooltip.propTypes = {\n  value: PropTypes.oneOfType([PropTypes.number.isRequired, PropTypes.string.isRequired]),\n  valueAppend: PropTypes.node,\n  valuePrepend: PropTypes.node,\n  max: PropTypes.number.isRequired,\n  min: PropTypes.number.isRequired,\n  name: PropTypes.string,\n  showTicks: PropTypes.bool\n};"]}]}