{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/form/form_label/form_label.tsx","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/form/form_label/form_label.tsx","mtime":1565204169726},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EuiFormLabel = void 0;\n\nrequire(\"core-js/modules/es6.object.assign\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nvar EuiFormLabel = function EuiFormLabel(_ref) {\n  var _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'label' : _ref$type,\n      isFocused = _ref.isFocused,\n      isInvalid = _ref.isInvalid,\n      children = _ref.children,\n      className = _ref.className,\n      rest = _objectWithoutProperties(_ref, [\"type\", \"isFocused\", \"isInvalid\", \"children\", \"className\"]);\n\n  var classes = (0, _classnames.default)('euiFormLabel', className, {\n    'euiFormLabel-isFocused': isFocused,\n    'euiFormLabel-isInvalid': isInvalid\n  });\n\n  if (type === 'legend') {\n    return _react.default.createElement(\"legend\", _extends({\n      className: classes\n    }, rest), children);\n  } else {\n    return _react.default.createElement(\"label\", _extends({\n      className: classes\n    }, rest), children);\n  }\n};\n\nexports.EuiFormLabel = EuiFormLabel;\nEuiFormLabel.propTypes = {\n  className: _propTypes.default.string,\n  \"aria-label\": _propTypes.default.string,\n  \"data-test-subj\": _propTypes.default.string,\n\n  /**\n     * Default type is a `label` but can be changed to a `legend`\n     * if using inside a `fieldset`.\n     */\n\n  /**\n     * Default type is a `label` but can be changed to a `legend`\n     * if using inside a `fieldset`.\n     */\n  type: _propTypes.default.oneOfType([_propTypes.default.oneOfType([_propTypes.default.oneOf([\"label\"]), _propTypes.default.oneOf([\"label\", \"legend\"])]), _propTypes.default.oneOfType([_propTypes.default.oneOf([\"legend\"]), _propTypes.default.oneOf([\"label\", \"legend\"])])]),\n  isFocused: _propTypes.default.bool,\n  isInvalid: _propTypes.default.bool\n};\nEuiFormLabel.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"EuiFormLabel\",\n  \"props\": {\n    \"type\": {\n      \"defaultValue\": {\n        \"value\": \"'label'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"union\",\n        \"value\": [{\n          \"name\": \"union\",\n          \"value\": [{\n            \"name\": \"enum\",\n            \"value\": [{\n              \"value\": \"\\\"label\\\"\",\n              \"computed\": false\n            }]\n          }, {\n            \"name\": \"enum\",\n            \"value\": [{\n              \"value\": \"\\\"label\\\"\",\n              \"computed\": false\n            }, {\n              \"value\": \"\\\"legend\\\"\",\n              \"computed\": false\n            }]\n          }]\n        }, {\n          \"name\": \"union\",\n          \"value\": [{\n            \"name\": \"enum\",\n            \"value\": [{\n              \"value\": \"\\\"legend\\\"\",\n              \"computed\": false\n            }]\n          }, {\n            \"name\": \"enum\",\n            \"value\": [{\n              \"value\": \"\\\"label\\\"\",\n              \"computed\": false\n            }, {\n              \"value\": \"\\\"legend\\\"\",\n              \"computed\": false\n            }]\n          }]\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Default type is a `label` but can be changed to a `legend`\\nif using inside a `fieldset`.\"\n    },\n    \"className\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"aria-label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"data-test-subj\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"isFocused\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"isInvalid\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/form/form_label/form_label.tsx"],"names":["EuiFormLabel","type","isFocused","isInvalid","children","className","rest","classes"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;AAKA;;;;;;;;;;AA0BO,IAAMA,YAAkD,GAAG,SAArDA,YAAqD,OAOzC;AAAA,uBANvBC,IAMuB;AAAA,MANvBA,IAMuB,0BANhB,OAMgB;AAAA,MALvBC,SAKuB,QALvBA,SAKuB;AAAA,MAJvBC,SAIuB,QAJvBA,SAIuB;AAAA,MAHvBC,QAGuB,QAHvBA,QAGuB;AAAA,MAFvBC,SAEuB,QAFvBA,SAEuB;AAAA,MADpBC,IACoB;;AACvB,MAAMC,OAAO,GAAG,yBAAW,cAAX,EAA2BF,SAA3B,EAAsC;AACpD,8BAA0BH,SAD0B;AAEpD,8BAA0BC;AAF0B,GAAtC,CAAhB;;AAKA,MAAIF,IAAI,KAAK,QAAb,EAAuB;AACrB,WACE;AACE,MAAA,SAAS,EAAEM;AADb,OAEMD,IAFN,GAGGF,QAHH,CADF;AAOD,GARD,MAQO;AACL,WACE;AACE,MAAA,SAAS,EAAEG;AADb,OAEMD,IAFN,GAGGF,QAHH,CADF;AAOD;AACF,CA9BM","sourcesContent":["import React from 'react';\nimport PropTypes from \"prop-types\";\nimport classNames from 'classnames';\nexport var EuiFormLabel = ({\n  type = 'label',\n  isFocused,\n  isInvalid,\n  children,\n  className,\n  ...rest\n}) => {\n  const classes = classNames('euiFormLabel', className, {\n    'euiFormLabel-isFocused': isFocused,\n    'euiFormLabel-isInvalid': isInvalid\n  });\n\n  if (type === 'legend') {\n    return <legend className={classes} {...rest}>\n        {children}\n      </legend>;\n  } else {\n    return <label className={classes} {...rest}>\n        {children}\n      </label>;\n  }\n};\nEuiFormLabel.propTypes = {\n  className: PropTypes.string,\n  \"aria-label\": PropTypes.string,\n  \"data-test-subj\": PropTypes.string,\n\n  /**\n     * Default type is a `label` but can be changed to a `legend`\n     * if using inside a `fieldset`.\n     */\n\n  /**\n     * Default type is a `label` but can be changed to a `legend`\n     * if using inside a `fieldset`.\n     */\n  type: PropTypes.oneOfType([PropTypes.oneOfType([PropTypes.oneOf([\"label\"]), PropTypes.oneOf([\"label\", \"legend\"])]), PropTypes.oneOfType([PropTypes.oneOf([\"legend\"]), PropTypes.oneOf([\"label\", \"legend\"])])]),\n  isFocused: PropTypes.bool,\n  isInvalid: PropTypes.bool\n};"]}]}