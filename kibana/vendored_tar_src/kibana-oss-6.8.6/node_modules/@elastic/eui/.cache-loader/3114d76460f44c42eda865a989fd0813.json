{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src-docs/src/views/tables/basic/props_info.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src-docs/src/views/tables/basic/props_info.js","mtime":1565204169550},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.propsInfo = void 0;\nvar propsInfo = {\n  EuiBasicTable: {\n    __docgenInfo: {\n      props: {\n        items: {\n          description: 'A list of objects to who in the table - an item per row',\n          required: true,\n          type: {\n            name: 'object[]'\n          }\n        },\n        itemId: {\n          description: 'Describes how to extract a unique ID from each item, used for selections & expanded rows',\n          required: false,\n          type: {\n            name: 'string | (item) => string'\n          }\n        },\n        itemIdToExpandedRowMap: {\n          description: 'Row expansion uses the `itemId` prop to identify each row',\n          required: false,\n          type: {\n            name: 'object[]'\n          }\n        },\n        cellProps: {\n          description: 'Applied to `EuiTableRowCell`',\n          required: false,\n          type: {\n            name: 'func | object[]'\n          }\n        },\n        compressed: {\n          description: 'Makes the font and padding smaller for the entire table',\n          type: {\n            name: 'bool'\n          }\n        },\n        columns: {\n          description: 'Defines the table columns',\n          required: true,\n          type: {\n            name: '(#FieldDataColumn | #ComputedColumn | #ActionsColumn)[]'\n          }\n        },\n        error: {\n          description: 'Error message to display',\n          required: false,\n          type: {\n            name: 'string'\n          }\n        },\n        hasActions: {\n          description: 'Needed at the top level for responsive positioning',\n          type: {\n            name: 'bool'\n          }\n        },\n        isExpandable: {\n          description: 'Needed at the top level for responsive positioning',\n          type: {\n            name: 'bool'\n          }\n        },\n        isSelectable: {\n          description: 'Needed at the top level for responsive positioning',\n          type: {\n            name: 'bool'\n          }\n        },\n        loading: {\n          description: 'Provides an infinite loading indicator',\n          type: {\n            name: 'bool'\n          }\n        },\n        noItemsMessage: {\n          description: 'Message to display if table is empty',\n          required: false,\n          type: {\n            name: 'node'\n          }\n        },\n        pagination: {\n          description: 'Configures pagination',\n          required: false,\n          type: {\n            name: '#Pagination'\n          }\n        },\n        responsive: {\n          description: 'If `true`, will convert table to cards in mobile view',\n          type: {\n            name: 'bool'\n          },\n          defaultValue: {\n            value: 'true'\n          }\n        },\n        rowProps: {\n          description: 'Applied to `EuiTableRow`',\n          required: false,\n          type: {\n            name: 'func | object[]'\n          }\n        },\n        sorting: {\n          description: 'Configures sorting',\n          required: false,\n          type: {\n            name: '#Sorting'\n          }\n        },\n        selection: {\n          description: 'Configures selection',\n          required: false,\n          type: {\n            name: '#Selection'\n          }\n        },\n        onChange: {\n          description: 'Called whenever pagination or sorting changes (this property is required when either ' + 'pagination or sorting is configured',\n          required: false,\n          type: {\n            name: '(criteria: #Criteria) => void'\n          }\n        }\n      }\n    }\n  },\n  Pagination: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        pageIndex: {\n          description: 'The current page (zero-based) index',\n          required: true,\n          type: {\n            name: 'number'\n          }\n        },\n        pageSize: {\n          description: 'The maximum number of items that can be shown in a single page',\n          required: true,\n          type: {\n            name: 'number'\n          }\n        },\n        totalItemCount: {\n          description: 'The total number of items the page is \"sliced\" of',\n          required: true,\n          type: {\n            name: 'number'\n          }\n        },\n        pageSizeOptions: {\n          description: 'Configures the page size dropdown options',\n          required: false,\n          defaultValue: {\n            value: '[5, 10, 20]'\n          },\n          type: {\n            name: 'number[]'\n          }\n        },\n        hidePerPageOptions: {\n          description: 'Hides the page size dropdown',\n          required: false,\n          defaultValue: {\n            value: 'false'\n          },\n          type: {\n            name: 'bool'\n          }\n        }\n      }\n    }\n  },\n  Sorting: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        sort: {\n          description: 'Indicates the property/field to sort on',\n          required: false,\n          type: {\n            name: '{ field: string, direction: \"asc\" | \"desc\" }'\n          }\n        },\n        allowNeutralSort: {\n          description: 'Enables/disables unsorting of table columns. Supported by EuiInMemoryTable.',\n          required: false,\n          type: {\n            name: 'bool'\n          }\n        }\n      }\n    }\n  },\n  Selection: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        onSelectionChanged: {\n          description: 'A callback that will be called whenever the item selection changes',\n          required: false,\n          type: {\n            name: '(selectedItems) => void'\n          }\n        },\n        selectable: {\n          description: 'A callback that is called per item to indicate whether it is selectable',\n          required: false,\n          type: {\n            name: '(item) => boolean'\n          }\n        },\n        selectableMessage: {\n          description: 'A callback that is called per item to retrieve a message for its selectable state.' + 'We display these messages as a tooltip on an unselectable checkbox',\n          required: false,\n          type: {\n            name: '(selectable, item) => string'\n          }\n        }\n      }\n    }\n  },\n  Criteria: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        page: {\n          description: 'If the shown items represents a page (slice) into a bigger set, this describes this page',\n          required: false,\n          type: {\n            name: '{ index: number, size: number }'\n          }\n        },\n        sort: {\n          description: 'If the shown items are sorted, this describes the sort criteria',\n          required: false,\n          type: {\n            name: '{ field: string, direction: \"asc\" | \"desc\" }'\n          }\n        }\n      }\n    }\n  },\n  FieldDataColumn: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      description: \"Describes a column that displays a value derived of one of the item's fields\",\n      props: {\n        field: {\n          description: 'A field of the item (may be a nested field)',\n          required: true,\n          type: {\n            name: 'string'\n          }\n        },\n        name: {\n          description: 'The display name of the column',\n          required: true,\n          type: {\n            name: 'PropTypes.node'\n          }\n        },\n        description: {\n          description: 'A description of the column (will be presented as a title over the column header',\n          required: false,\n          type: {\n            name: 'string'\n          }\n        },\n        dataType: {\n          description: 'Describes the data types of the displayed value (serves as a rendering hint for the table)',\n          required: false,\n          defaultValue: {\n            value: '\"auto\"'\n          },\n          type: {\n            name: '\"auto\" | \"string\" | \"number\" | \"date\" | \"boolean\"'\n          }\n        },\n        width: {\n          description: 'A CSS width property. Hints for the required width of the column',\n          required: false,\n          type: {\n            name: 'string (e.g. \"30%\", \"100px\", etc..)'\n          }\n        },\n        sortable: {\n          description: 'Defines whether the user can sort on this column. If a function is provided, this function returns the value to sort against.',\n          required: false,\n          defaultValue: {\n            value: 'false'\n          },\n          type: {\n            name: '\"boolean\" | \"function\"'\n          }\n        },\n        align: {\n          description: 'Defines the horizontal alignment of the column',\n          required: false,\n          defaultValue: {\n            value: '\"right\"',\n            comment: 'May change when \"dataType\" is defined'\n          },\n          type: {\n            name: '\"left\" | \"center\" | \"right\"'\n          }\n        },\n        truncateText: {\n          description: \"Indicates whether this column should truncate its content when it doesn't fit\",\n          required: false,\n          defaultValue: {\n            value: 'false'\n          },\n          type: {\n            name: 'boolean'\n          }\n        },\n        render: {\n          description: 'Describe a custom renderer function for the content',\n          required: false,\n          type: {\n            name: '(value, item) => PropTypes.node'\n          }\n        },\n        footer: {\n          description: 'Content to display in the footer beneath this column',\n          required: false,\n          type: {\n            name: 'string | PropTypes.element | ({ items, pagination }) => PropTypes.node'\n          }\n        }\n      }\n    }\n  },\n  ComputedColumn: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      description: 'Describes a column for computed values',\n      props: {\n        render: {\n          description: 'A function that computes the value for each item and renders it',\n          required: true,\n          type: {\n            name: '(item) => PropTypes.node'\n          }\n        },\n        name: {\n          description: 'The display name of the column',\n          required: false,\n          type: {\n            name: 'PropTypes.node'\n          }\n        },\n        description: {\n          description: 'A description of the column (will be presented as a title over the column header',\n          required: false,\n          type: {\n            name: 'string'\n          }\n        },\n        width: {\n          description: 'A CSS width property. Hints for the required width of the column',\n          required: false,\n          type: {\n            name: 'string (e.g. \"30%\", \"100px\", etc..)'\n          }\n        },\n        sortable: {\n          description: 'If provided, allows this column to be sorted on. Must return the value to sort against.',\n          required: false,\n          type: {\n            name: 'function'\n          }\n        },\n        truncateText: {\n          description: \"Indicates whether this column should truncate its content when it doesn't fit\",\n          required: false,\n          defaultValue: {\n            value: 'false'\n          },\n          type: {\n            name: 'boolean'\n          }\n        }\n      }\n    }\n  },\n  ActionsColumn: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      description: 'Describes a column that holds action controls (e.g. Buttons)',\n      props: {\n        actions: {\n          description: 'An array of actions to associate per item',\n          required: true,\n          type: {\n            name: '(#DefaultItemAction | #CustomItemAction)[]'\n          }\n        },\n        name: {\n          description: 'The display name of the column',\n          required: false,\n          type: {\n            name: 'PropTypes.node'\n          }\n        },\n        description: {\n          description: 'A description of the column (will be presented as a title over the column header',\n          required: false,\n          type: {\n            name: 'string'\n          }\n        },\n        width: {\n          description: 'A CSS width property. Hints for the required width of the column',\n          required: false,\n          type: {\n            name: 'string (e.g. \"30%\", \"100px\", etc..)'\n          }\n        }\n      }\n    }\n  },\n  DefaultItemAction: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      description: 'Describes an action that is displayed as a button',\n      props: {\n        name: {\n          description: 'The display name of the action (will be the button caption',\n          required: true,\n          type: {\n            name: 'string'\n          }\n        },\n        description: {\n          description: 'Describes the action (will be the button title)',\n          required: true,\n          type: {\n            name: 'string'\n          }\n        },\n        onClick: {\n          description: 'A handler function to execute the action',\n          required: true,\n          type: {\n            name: '(item) => void'\n          }\n        },\n        type: {\n          description: 'The type of action',\n          required: false,\n          defaultValue: {\n            value: '\"button\"'\n          },\n          type: {\n            name: '\"button\" | \"icon\"'\n          }\n        },\n        available: {\n          description: 'A callback function that determines whether the action is available',\n          required: false,\n          defaultValue: {\n            value: '() => true'\n          },\n          type: {\n            name: '(item) => boolean'\n          }\n        },\n        enabled: {\n          description: 'A callback function that determines whether the action is enabled',\n          required: false,\n          defaultValue: {\n            value: '() => true'\n          },\n          type: {\n            name: '(item) => boolean'\n          }\n        },\n        icon: {\n          description: 'Associates an icon with the button',\n          required: false,\n          type: {\n            name: 'string (must be one of the supported icon types)'\n          }\n        },\n        color: {\n          description: 'Defines the color of the button',\n          required: false,\n          type: {\n            name: 'string (must be one of the supported button colors)'\n          }\n        }\n      }\n    }\n  },\n  CustomItemAction: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      description: 'Describes a custom action',\n      props: {\n        render: {\n          description: 'The function that renders the action. Note that the returned node is ' + 'expected to have`onFocus` and `onBlur` functions',\n          required: true,\n          type: {\n            name: '(item, enabled) => PropTypes.node'\n          }\n        },\n        available: {\n          description: 'A callback that defines whether the action is available',\n          required: false,\n          type: {\n            name: '(item) => boolean'\n          }\n        },\n        enabled: {\n          description: 'A callback that defines whether the action is enabled',\n          required: false,\n          type: {\n            name: '(item) => boolean'\n          }\n        }\n      }\n    }\n  }\n};\nexports.propsInfo = propsInfo;",{"version":3,"sources":["/Users/chanderprall/projects/eui/src-docs/src/views/tables/basic/props_info.js"],"names":["propsInfo","EuiBasicTable","__docgenInfo","props","items","description","required","type","name","itemId","itemIdToExpandedRowMap","cellProps","compressed","columns","error","hasActions","isExpandable","isSelectable","loading","noItemsMessage","pagination","responsive","defaultValue","value","rowProps","sorting","selection","onChange","Pagination","_euiObjectType","pageIndex","pageSize","totalItemCount","pageSizeOptions","hidePerPageOptions","Sorting","sort","allowNeutralSort","Selection","onSelectionChanged","selectable","selectableMessage","Criteria","page","FieldDataColumn","field","dataType","width","sortable","align","comment","truncateText","render","footer","ComputedColumn","ActionsColumn","actions","DefaultItemAction","onClick","available","enabled","icon","color","CustomItemAction"],"mappings":"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","sourcesContent":["export const propsInfo = {\n  EuiBasicTable: {\n    __docgenInfo: {\n      props: {\n        items: {\n          description:\n            'A list of objects to who in the table - an item per row',\n          required: true,\n          type: { name: 'object[]' },\n        },\n        itemId: {\n          description:\n            'Describes how to extract a unique ID from each item, used for selections & expanded rows',\n          required: false,\n          type: { name: 'string | (item) => string' },\n        },\n        itemIdToExpandedRowMap: {\n          description:\n            'Row expansion uses the `itemId` prop to identify each row',\n          required: false,\n          type: { name: 'object[]' },\n        },\n        cellProps: {\n          description: 'Applied to `EuiTableRowCell`',\n          required: false,\n          type: { name: 'func | object[]' },\n        },\n        compressed: {\n          description:\n            'Makes the font and padding smaller for the entire table',\n          type: { name: 'bool' },\n        },\n        columns: {\n          description: 'Defines the table columns',\n          required: true,\n          type: {\n            name: '(#FieldDataColumn | #ComputedColumn | #ActionsColumn)[]',\n          },\n        },\n        error: {\n          description: 'Error message to display',\n          required: false,\n          type: { name: 'string' },\n        },\n        hasActions: {\n          description: 'Needed at the top level for responsive positioning',\n          type: { name: 'bool' },\n        },\n        isExpandable: {\n          description: 'Needed at the top level for responsive positioning',\n          type: { name: 'bool' },\n        },\n        isSelectable: {\n          description: 'Needed at the top level for responsive positioning',\n          type: { name: 'bool' },\n        },\n        loading: {\n          description: 'Provides an infinite loading indicator',\n          type: { name: 'bool' },\n        },\n        noItemsMessage: {\n          description: 'Message to display if table is empty',\n          required: false,\n          type: { name: 'node' },\n        },\n        pagination: {\n          description: 'Configures pagination',\n          required: false,\n          type: { name: '#Pagination' },\n        },\n        responsive: {\n          description: 'If `true`, will convert table to cards in mobile view',\n          type: { name: 'bool' },\n          defaultValue: { value: 'true' },\n        },\n        rowProps: {\n          description: 'Applied to `EuiTableRow`',\n          required: false,\n          type: { name: 'func | object[]' },\n        },\n        sorting: {\n          description: 'Configures sorting',\n          required: false,\n          type: { name: '#Sorting' },\n        },\n        selection: {\n          description: 'Configures selection',\n          required: false,\n          type: { name: '#Selection' },\n        },\n        onChange: {\n          description:\n            'Called whenever pagination or sorting changes (this property is required when either ' +\n            'pagination or sorting is configured',\n          required: false,\n          type: { name: '(criteria: #Criteria) => void' },\n        },\n      },\n    },\n  },\n\n  Pagination: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        pageIndex: {\n          description: 'The current page (zero-based) index',\n          required: true,\n          type: { name: 'number' },\n        },\n        pageSize: {\n          description:\n            'The maximum number of items that can be shown in a single page',\n          required: true,\n          type: { name: 'number' },\n        },\n        totalItemCount: {\n          description: 'The total number of items the page is \"sliced\" of',\n          required: true,\n          type: { name: 'number' },\n        },\n        pageSizeOptions: {\n          description: 'Configures the page size dropdown options',\n          required: false,\n          defaultValue: { value: '[5, 10, 20]' },\n          type: { name: 'number[]' },\n        },\n        hidePerPageOptions: {\n          description: 'Hides the page size dropdown',\n          required: false,\n          defaultValue: { value: 'false' },\n          type: { name: 'bool' },\n        },\n      },\n    },\n  },\n\n  Sorting: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        sort: {\n          description: 'Indicates the property/field to sort on',\n          required: false,\n          type: { name: '{ field: string, direction: \"asc\" | \"desc\" }' },\n        },\n        allowNeutralSort: {\n          description:\n            'Enables/disables unsorting of table columns. Supported by EuiInMemoryTable.',\n          required: false,\n          type: { name: 'bool' },\n        },\n      },\n    },\n  },\n\n  Selection: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        onSelectionChanged: {\n          description:\n            'A callback that will be called whenever the item selection changes',\n          required: false,\n          type: { name: '(selectedItems) => void' },\n        },\n        selectable: {\n          description:\n            'A callback that is called per item to indicate whether it is selectable',\n          required: false,\n          type: { name: '(item) => boolean' },\n        },\n        selectableMessage: {\n          description:\n            'A callback that is called per item to retrieve a message for its selectable state.' +\n            'We display these messages as a tooltip on an unselectable checkbox',\n          required: false,\n          type: { name: '(selectable, item) => string' },\n        },\n      },\n    },\n  },\n\n  Criteria: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        page: {\n          description:\n            'If the shown items represents a page (slice) into a bigger set, this describes this page',\n          required: false,\n          type: { name: '{ index: number, size: number }' },\n        },\n        sort: {\n          description:\n            'If the shown items are sorted, this describes the sort criteria',\n          required: false,\n          type: { name: '{ field: string, direction: \"asc\" | \"desc\" }' },\n        },\n      },\n    },\n  },\n\n  FieldDataColumn: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      description:\n        \"Describes a column that displays a value derived of one of the item's fields\",\n      props: {\n        field: {\n          description: 'A field of the item (may be a nested field)',\n          required: true,\n          type: { name: 'string' },\n        },\n        name: {\n          description: 'The display name of the column',\n          required: true,\n          type: { name: 'PropTypes.node' },\n        },\n        description: {\n          description:\n            'A description of the column (will be presented as a title over the column header',\n          required: false,\n          type: { name: 'string' },\n        },\n        dataType: {\n          description:\n            'Describes the data types of the displayed value (serves as a rendering hint for the table)',\n          required: false,\n          defaultValue: { value: '\"auto\"' },\n          type: { name: '\"auto\" | \"string\" | \"number\" | \"date\" | \"boolean\"' },\n        },\n        width: {\n          description:\n            'A CSS width property. Hints for the required width of the column',\n          required: false,\n          type: { name: 'string (e.g. \"30%\", \"100px\", etc..)' },\n        },\n        sortable: {\n          description:\n            'Defines whether the user can sort on this column. If a function is provided, this function returns the value to sort against.',\n          required: false,\n          defaultValue: { value: 'false' },\n          type: { name: '\"boolean\" | \"function\"' },\n        },\n        align: {\n          description: 'Defines the horizontal alignment of the column',\n          required: false,\n          defaultValue: {\n            value: '\"right\"',\n            comment: 'May change when \"dataType\" is defined',\n          },\n          type: { name: '\"left\" | \"center\" | \"right\"' },\n        },\n        truncateText: {\n          description:\n            \"Indicates whether this column should truncate its content when it doesn't fit\",\n          required: false,\n          defaultValue: { value: 'false' },\n          type: { name: 'boolean' },\n        },\n        render: {\n          description: 'Describe a custom renderer function for the content',\n          required: false,\n          type: { name: '(value, item) => PropTypes.node' },\n        },\n        footer: {\n          description: 'Content to display in the footer beneath this column',\n          required: false,\n          type: {\n            name:\n              'string | PropTypes.element | ({ items, pagination }) => PropTypes.node',\n          },\n        },\n      },\n    },\n  },\n\n  ComputedColumn: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      description: 'Describes a column for computed values',\n      props: {\n        render: {\n          description:\n            'A function that computes the value for each item and renders it',\n          required: true,\n          type: { name: '(item) => PropTypes.node' },\n        },\n        name: {\n          description: 'The display name of the column',\n          required: false,\n          type: { name: 'PropTypes.node' },\n        },\n        description: {\n          description:\n            'A description of the column (will be presented as a title over the column header',\n          required: false,\n          type: { name: 'string' },\n        },\n        width: {\n          description:\n            'A CSS width property. Hints for the required width of the column',\n          required: false,\n          type: { name: 'string (e.g. \"30%\", \"100px\", etc..)' },\n        },\n        sortable: {\n          description:\n            'If provided, allows this column to be sorted on. Must return the value to sort against.',\n          required: false,\n          type: { name: 'function' },\n        },\n        truncateText: {\n          description:\n            \"Indicates whether this column should truncate its content when it doesn't fit\",\n          required: false,\n          defaultValue: { value: 'false' },\n          type: { name: 'boolean' },\n        },\n      },\n    },\n  },\n\n  ActionsColumn: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      description:\n        'Describes a column that holds action controls (e.g. Buttons)',\n      props: {\n        actions: {\n          description: 'An array of actions to associate per item',\n          required: true,\n          type: { name: '(#DefaultItemAction | #CustomItemAction)[]' },\n        },\n        name: {\n          description: 'The display name of the column',\n          required: false,\n          type: { name: 'PropTypes.node' },\n        },\n        description: {\n          description:\n            'A description of the column (will be presented as a title over the column header',\n          required: false,\n          type: { name: 'string' },\n        },\n        width: {\n          description:\n            'A CSS width property. Hints for the required width of the column',\n          required: false,\n          type: { name: 'string (e.g. \"30%\", \"100px\", etc..)' },\n        },\n      },\n    },\n  },\n\n  DefaultItemAction: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      description: 'Describes an action that is displayed as a button',\n      props: {\n        name: {\n          description:\n            'The display name of the action (will be the button caption',\n          required: true,\n          type: { name: 'string' },\n        },\n        description: {\n          description: 'Describes the action (will be the button title)',\n          required: true,\n          type: { name: 'string' },\n        },\n        onClick: {\n          description: 'A handler function to execute the action',\n          required: true,\n          type: { name: '(item) => void' },\n        },\n        type: {\n          description: 'The type of action',\n          required: false,\n          defaultValue: { value: '\"button\"' },\n          type: { name: '\"button\" | \"icon\"' },\n        },\n        available: {\n          description:\n            'A callback function that determines whether the action is available',\n          required: false,\n          defaultValue: { value: '() => true' },\n          type: { name: '(item) => boolean' },\n        },\n        enabled: {\n          description:\n            'A callback function that determines whether the action is enabled',\n          required: false,\n          defaultValue: { value: '() => true' },\n          type: { name: '(item) => boolean' },\n        },\n        icon: {\n          description: 'Associates an icon with the button',\n          required: false,\n          type: { name: 'string (must be one of the supported icon types)' },\n        },\n        color: {\n          description: 'Defines the color of the button',\n          required: false,\n          type: { name: 'string (must be one of the supported button colors)' },\n        },\n      },\n    },\n  },\n\n  CustomItemAction: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      description: 'Describes a custom action',\n      props: {\n        render: {\n          description:\n            'The function that renders the action. Note that the returned node is ' +\n            'expected to have`onFocus` and `onBlur` functions',\n          required: true,\n          type: { name: '(item, enabled) => PropTypes.node' },\n        },\n        available: {\n          description:\n            'A callback that defines whether the action is available',\n          required: false,\n          type: { name: '(item) => boolean' },\n        },\n        enabled: {\n          description: 'A callback that defines whether the action is enabled',\n          required: false,\n          type: { name: '(item) => boolean' },\n        },\n      },\n    },\n  },\n};\n"]}]}