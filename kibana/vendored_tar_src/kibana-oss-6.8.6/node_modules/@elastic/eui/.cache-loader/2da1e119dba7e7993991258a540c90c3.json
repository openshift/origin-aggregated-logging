{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/search_bar/filters/field_value_toggle_filter.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/search_bar/filters/field_value_toggle_filter.js","mtime":1565204169978},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FieldValueToggleFilter = exports.FieldValueToggleFilterConfigType = void 0;\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/es6.object.set-prototype-of\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _filter_group = require(\"../../filter_group\");\n\nvar _predicate = require(\"../../../services/predicate\");\n\nvar _prop_types = require(\"../../../utils/prop_types\");\n\nvar _query = require(\"../query\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar FieldValueToggleFilterConfigType = _propTypes.default.shape({\n  type: _prop_types.EuiPropTypes.is('field_value_toggle').isRequired,\n  field: _propTypes.default.string.isRequired,\n  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.bool]).isRequired,\n  name: _propTypes.default.string.isRequired,\n  negatedName: _propTypes.default.string,\n  available: _propTypes.default.func,\n  // () => boolean\n  operator: _propTypes.default.oneOf(['eq', 'exact', 'gt', 'gte', 'lt', 'lte'])\n});\n\nexports.FieldValueToggleFilterConfigType = FieldValueToggleFilterConfigType;\nvar FieldValueToggleFilterPropTypes = {\n  index: _propTypes.default.number.isRequired,\n  config: FieldValueToggleFilterConfigType.isRequired,\n  query: _propTypes.default.any.isRequired,\n  onChange: _propTypes.default.func.isRequired // (value: boolean) => void\n\n};\n\nvar FieldValueToggleFilter =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(FieldValueToggleFilter, _Component);\n\n  function FieldValueToggleFilter(props) {\n    _classCallCheck(this, FieldValueToggleFilter);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(FieldValueToggleFilter).call(this, props));\n  }\n\n  _createClass(FieldValueToggleFilter, [{\n    key: \"resolveDisplay\",\n    value: function resolveDisplay(clause) {\n      var _this$props$config = this.props.config,\n          name = _this$props$config.name,\n          negatedName = _this$props$config.negatedName;\n\n      if ((0, _predicate.isNil)(clause)) {\n        return {\n          hasActiveFilters: false,\n          name: name\n        };\n      }\n\n      return _query.Query.isMust(clause) ? {\n        hasActiveFilters: true,\n        name: name\n      } : {\n        hasActiveFilters: true,\n        name: negatedName ? negatedName : \"Not \".concat(name)\n      };\n    }\n  }, {\n    key: \"valueChanged\",\n    value: function valueChanged(checked) {\n      var _this$props$config2 = this.props.config,\n          field = _this$props$config2.field,\n          value = _this$props$config2.value,\n          operator = _this$props$config2.operator;\n      var query = checked ? this.props.query.removeSimpleFieldValue(field, value) : this.props.query.addSimpleFieldValue(field, value, true, operator);\n      this.props.onChange(query);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props = this.props,\n          query = _this$props.query,\n          config = _this$props.config;\n      var clause = query.getSimpleFieldClause(config.field, config.value);\n      var checked = !(0, _predicate.isNil)(clause);\n\n      var _this$resolveDisplay = this.resolveDisplay(clause),\n          hasActiveFilters = _this$resolveDisplay.hasActiveFilters,\n          name = _this$resolveDisplay.name;\n\n      var onClick = function onClick() {\n        _this.valueChanged(checked);\n      };\n\n      return _react.default.createElement(_filter_group.EuiFilterButton, {\n        onClick: onClick,\n        hasActiveFilters: hasActiveFilters,\n        \"aria-pressed\": !!hasActiveFilters\n      }, name);\n    }\n  }]);\n\n  return FieldValueToggleFilter;\n}(_react.Component);\n\nexports.FieldValueToggleFilter = FieldValueToggleFilter;\n\n_defineProperty(FieldValueToggleFilter, \"propTypes\", FieldValueToggleFilterPropTypes);\n\nFieldValueToggleFilter.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [{\n    \"name\": \"resolveDisplay\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"clause\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"valueChanged\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"checked\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }],\n  \"displayName\": \"FieldValueToggleFilter\",\n  \"props\": {\n    \"index\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"config\": {\n      \"type\": {\n        \"name\": \"custom\",\n        \"raw\": \"FieldValueToggleFilterConfigType.isRequired\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"query\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/search_bar/filters/field_value_toggle_filter.js"],"names":["FieldValueToggleFilterConfigType","PropTypes","shape","type","EuiPropTypes","is","isRequired","field","string","value","oneOfType","number","bool","name","negatedName","available","func","operator","oneOf","FieldValueToggleFilterPropTypes","index","config","query","any","onChange","FieldValueToggleFilter","props","clause","hasActiveFilters","Query","isMust","checked","removeSimpleFieldValue","addSimpleFieldValue","getSimpleFieldClause","resolveDisplay","onClick","valueChanged","Component"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEO,IAAMA,gCAAgC,GAAGC,mBAAUC,KAAV,CAAgB;AAC9DC,EAAAA,IAAI,EAAEC,yBAAaC,EAAb,CAAgB,oBAAhB,EAAsCC,UADkB;AAE9DC,EAAAA,KAAK,EAAEN,mBAAUO,MAAV,CAAiBF,UAFsC;AAG9DG,EAAAA,KAAK,EAAER,mBAAUS,SAAV,CAAoB,CACzBT,mBAAUO,MADe,EAEzBP,mBAAUU,MAFe,EAGzBV,mBAAUW,IAHe,CAApB,EAIJN,UAP2D;AAQ9DO,EAAAA,IAAI,EAAEZ,mBAAUO,MAAV,CAAiBF,UARuC;AAS9DQ,EAAAA,WAAW,EAAEb,mBAAUO,MATuC;AAU9DO,EAAAA,SAAS,EAAEd,mBAAUe,IAVyC;AAUnC;AAC3BC,EAAAA,QAAQ,EAAEhB,mBAAUiB,KAAV,CAAgB,CAAC,IAAD,EAAO,OAAP,EAAgB,IAAhB,EAAsB,KAAtB,EAA6B,IAA7B,EAAmC,KAAnC,CAAhB;AAXoD,CAAhB,CAAzC;;;AAcP,IAAMC,+BAA+B,GAAG;AACtCC,EAAAA,KAAK,EAAEnB,mBAAUU,MAAV,CAAiBL,UADc;AAEtCe,EAAAA,MAAM,EAAErB,gCAAgC,CAACM,UAFH;AAGtCgB,EAAAA,KAAK,EAAErB,mBAAUsB,GAAV,CAAcjB,UAHiB;AAItCkB,EAAAA,QAAQ,EAAEvB,mBAAUe,IAAV,CAAeV,UAJa,CAID;;AAJC,CAAxC;;IAOamB,sB;;;;;AAGX,kCAAYC,KAAZ,EAAmB;AAAA;;AAAA,+FACXA,KADW;AAElB;;;;mCAEcC,M,EAAQ;AAAA,+BACS,KAAKD,KAAL,CAAWL,MADpB;AAAA,UACbR,IADa,sBACbA,IADa;AAAA,UACPC,WADO,sBACPA,WADO;;AAErB,UAAI,sBAAMa,MAAN,CAAJ,EAAmB;AACjB,eAAO;AAAEC,UAAAA,gBAAgB,EAAE,KAApB;AAA2Bf,UAAAA,IAAI,EAAJA;AAA3B,SAAP;AACD;;AACD,aAAOgB,aAAMC,MAAN,CAAaH,MAAb,IACH;AAAEC,QAAAA,gBAAgB,EAAE,IAApB;AAA0Bf,QAAAA,IAAI,EAAJA;AAA1B,OADG,GAEH;AACEe,QAAAA,gBAAgB,EAAE,IADpB;AAEEf,QAAAA,IAAI,EAAEC,WAAW,GAAGA,WAAH,iBAAwBD,IAAxB;AAFnB,OAFJ;AAMD;;;iCAEYkB,O,EAAS;AAAA,gCACe,KAAKL,KAAL,CAAWL,MAD1B;AAAA,UACZd,KADY,uBACZA,KADY;AAAA,UACLE,KADK,uBACLA,KADK;AAAA,UACEQ,QADF,uBACEA,QADF;AAEpB,UAAMK,KAAK,GAAGS,OAAO,GACjB,KAAKL,KAAL,CAAWJ,KAAX,CAAiBU,sBAAjB,CAAwCzB,KAAxC,EAA+CE,KAA/C,CADiB,GAEjB,KAAKiB,KAAL,CAAWJ,KAAX,CAAiBW,mBAAjB,CAAqC1B,KAArC,EAA4CE,KAA5C,EAAmD,IAAnD,EAAyDQ,QAAzD,CAFJ;AAGA,WAAKS,KAAL,CAAWF,QAAX,CAAoBF,KAApB;AACD;;;6BAEQ;AAAA;;AAAA,wBACmB,KAAKI,KADxB;AAAA,UACCJ,KADD,eACCA,KADD;AAAA,UACQD,MADR,eACQA,MADR;AAEP,UAAMM,MAAM,GAAGL,KAAK,CAACY,oBAAN,CAA2Bb,MAAM,CAACd,KAAlC,EAAyCc,MAAM,CAACZ,KAAhD,CAAf;AACA,UAAMsB,OAAO,GAAG,CAAC,sBAAMJ,MAAN,CAAjB;;AAHO,iCAI4B,KAAKQ,cAAL,CAAoBR,MAApB,CAJ5B;AAAA,UAICC,gBAJD,wBAICA,gBAJD;AAAA,UAImBf,IAJnB,wBAImBA,IAJnB;;AAKP,UAAMuB,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB,QAAA,KAAI,CAACC,YAAL,CAAkBN,OAAlB;AACD,OAFD;;AAGA,aACE,6BAAC,6BAAD;AACE,QAAA,OAAO,EAAEK,OADX;AAEE,QAAA,gBAAgB,EAAER,gBAFpB;AAGE,wBAAc,CAAC,CAACA;AAHlB,SAIGf,IAJH,CADF;AAQD;;;;EA5CyCyB,gB;;;;gBAA/Bb,sB,eACQN,+B","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { EuiFilterButton } from '../../filter_group';\nimport { isNil } from '../../../services/predicate';\nimport { EuiPropTypes } from '../../../utils/prop_types';\nimport { Query } from '../query';\n\nexport const FieldValueToggleFilterConfigType = PropTypes.shape({\n  type: EuiPropTypes.is('field_value_toggle').isRequired,\n  field: PropTypes.string.isRequired,\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.bool,\n  ]).isRequired,\n  name: PropTypes.string.isRequired,\n  negatedName: PropTypes.string,\n  available: PropTypes.func, // () => boolean\n  operator: PropTypes.oneOf(['eq', 'exact', 'gt', 'gte', 'lt', 'lte']),\n});\n\nconst FieldValueToggleFilterPropTypes = {\n  index: PropTypes.number.isRequired,\n  config: FieldValueToggleFilterConfigType.isRequired,\n  query: PropTypes.any.isRequired,\n  onChange: PropTypes.func.isRequired, // (value: boolean) => void\n};\n\nexport class FieldValueToggleFilter extends Component {\n  static propTypes = FieldValueToggleFilterPropTypes;\n\n  constructor(props) {\n    super(props);\n  }\n\n  resolveDisplay(clause) {\n    const { name, negatedName } = this.props.config;\n    if (isNil(clause)) {\n      return { hasActiveFilters: false, name };\n    }\n    return Query.isMust(clause)\n      ? { hasActiveFilters: true, name }\n      : {\n          hasActiveFilters: true,\n          name: negatedName ? negatedName : `Not ${name}`,\n        };\n  }\n\n  valueChanged(checked) {\n    const { field, value, operator } = this.props.config;\n    const query = checked\n      ? this.props.query.removeSimpleFieldValue(field, value)\n      : this.props.query.addSimpleFieldValue(field, value, true, operator);\n    this.props.onChange(query);\n  }\n\n  render() {\n    const { query, config } = this.props;\n    const clause = query.getSimpleFieldClause(config.field, config.value);\n    const checked = !isNil(clause);\n    const { hasActiveFilters, name } = this.resolveDisplay(clause);\n    const onClick = () => {\n      this.valueChanged(checked);\n    };\n    return (\n      <EuiFilterButton\n        onClick={onClick}\n        hasActiveFilters={hasActiveFilters}\n        aria-pressed={!!hasActiveFilters}>\n        {name}\n      </EuiFilterButton>\n    );\n  }\n}\n"]}]}