{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/selectable/selectable_list/selectable_list.tsx","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/selectable/selectable_list/selectable_list.tsx","mtime":1565204169996},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EuiSelectableList = void 0;\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/es6.object.assign\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.object.set-prototype-of\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _reactVirtualized = require(\"react-virtualized\");\n\nvar _services = require(\"../../../services\");\n\nvar _selectable_list_item = require(\"./selectable_list_item\");\n\nvar _highlight = require(\"../../highlight\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar EuiSelectableList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EuiSelectableList, _Component);\n\n  function EuiSelectableList(props) {\n    var _this;\n\n    _classCallCheck(this, EuiSelectableList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EuiSelectableList).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"rootId\", _this.props.rootId || (0, _services.htmlIdGenerator)());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onAddOrRemoveOption\", function (option) {\n      if (option.disabled) {\n        return;\n      }\n\n      var allowExclusions = _this.props.allowExclusions;\n\n      if (option.checked === 'on' && allowExclusions) {\n        _this.onExcludeOption(option);\n      } else if (option.checked === 'on' || option.checked === 'off') {\n        _this.onRemoveOption(option);\n      } else {\n        _this.onAddOption(option);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onAddOption\", function (addedOption) {\n      var _this$props = _this.props,\n          onOptionClick = _this$props.onOptionClick,\n          options = _this$props.options,\n          singleSelection = _this$props.singleSelection;\n      var updatedOptions = options.map(function (option) {\n        // if singleSelection is enabled, uncheck any selected option(s)\n        var updatedOption = _objectSpread({}, option);\n\n        if (singleSelection) {\n          delete updatedOption.checked;\n        } // if this is the now-selected option, check it\n\n\n        if (option === addedOption) {\n          updatedOption.checked = 'on';\n        }\n\n        return updatedOption;\n      });\n      onOptionClick(updatedOptions);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onRemoveOption\", function (removedOption) {\n      var _this$props2 = _this.props,\n          onOptionClick = _this$props2.onOptionClick,\n          singleSelection = _this$props2.singleSelection,\n          options = _this$props2.options;\n      var updatedOptions = options.map(function (option) {\n        var updatedOption = _objectSpread({}, option);\n\n        if (option === removedOption && singleSelection !== 'always') {\n          delete updatedOption.checked;\n        }\n\n        return updatedOption;\n      });\n      onOptionClick(updatedOptions);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onExcludeOption\", function (excludedOption) {\n      var _this$props3 = _this.props,\n          onOptionClick = _this$props3.onOptionClick,\n          options = _this$props3.options;\n      excludedOption.checked = 'off';\n      var updatedOptions = options.map(function (option) {\n        var updatedOption = _objectSpread({}, option);\n\n        if (option === excludedOption) {\n          updatedOption.checked = 'off';\n        }\n\n        return updatedOption;\n      });\n      onOptionClick(updatedOptions);\n    });\n\n    return _this;\n  }\n\n  _createClass(EuiSelectableList, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props4 = this.props,\n          className = _this$props4.className,\n          options = _this$props4.options,\n          searchValue = _this$props4.searchValue,\n          onOptionClick = _this$props4.onOptionClick,\n          renderOption = _this$props4.renderOption,\n          forcedHeight = _this$props4.height,\n          virtualizedProps = _this$props4.virtualizedProps,\n          rowHeight = _this$props4.rowHeight,\n          activeOptionIndex = _this$props4.activeOptionIndex,\n          rootId = _this$props4.rootId,\n          showIcons = _this$props4.showIcons,\n          singleSelection = _this$props4.singleSelection,\n          visibleOptions = _this$props4.visibleOptions,\n          allowExclusions = _this$props4.allowExclusions,\n          bordered = _this$props4.bordered,\n          rest = _objectWithoutProperties(_this$props4, [\"className\", \"options\", \"searchValue\", \"onOptionClick\", \"renderOption\", \"height\", \"virtualizedProps\", \"rowHeight\", \"activeOptionIndex\", \"rootId\", \"showIcons\", \"singleSelection\", \"visibleOptions\", \"allowExclusions\", \"bordered\"]);\n\n      var optionArray = visibleOptions || options;\n      var heightIsFull = forcedHeight === 'full';\n      var calculatedHeight = heightIsFull ? false : forcedHeight; // If calculatedHeight is still undefined, then calculate it\n\n      if (calculatedHeight === undefined) {\n        var maxVisibleOptions = 7;\n        var numVisibleOptions = optionArray.length;\n        var numVisibleMoreThanMax = optionArray.length > maxVisibleOptions;\n\n        if (numVisibleMoreThanMax) {\n          // Show only half of the last one to indicate there's more to scroll to\n          calculatedHeight = (maxVisibleOptions - 0.5) * rowHeight;\n        } else {\n          calculatedHeight = numVisibleOptions * rowHeight;\n        }\n      }\n\n      var classes = (0, _classnames.default)('euiSelectableList', {\n        'euiSelectableList-fullHeight': heightIsFull,\n        'euiSelectableList-bordered': bordered\n      }, className);\n      return _react.default.createElement(\"div\", _extends({\n        className: classes\n      }, rest), _react.default.createElement(_reactVirtualized.AutoSizer, {\n        disableHeight: !heightIsFull\n      }, function (_ref) {\n        var width = _ref.width,\n            height = _ref.height;\n        return _react.default.createElement(_reactVirtualized.List, _extends({\n          id: _this2.rootId('listbox'),\n          className: \"euiSelectableList__list\",\n          role: \"listbox\",\n          width: width,\n          height: calculatedHeight || height,\n          rowCount: optionArray.length,\n          rowHeight: rowHeight,\n          scrollToIndex: activeOptionIndex\n        }, virtualizedProps, {\n          rowRenderer: function rowRenderer(_ref2) {\n            var key = _ref2.key,\n                index = _ref2.index,\n                style = _ref2.style;\n            var option = optionArray[index];\n\n            var label = option.label,\n                isGroupLabel = option.isGroupLabel,\n                checked = option.checked,\n                disabled = option.disabled,\n                prepend = option.prepend,\n                append = option.append,\n                ref = option.ref,\n                optionRest = _objectWithoutProperties(option, [\"label\", \"isGroupLabel\", \"checked\", \"disabled\", \"prepend\", \"append\", \"ref\"]);\n\n            if (isGroupLabel) {\n              return _react.default.createElement(\"div\", _extends({\n                className: \"euiSelectableList__groupLabel\",\n                key: key,\n                style: style\n              }, optionRest), prepend, label, append);\n            }\n\n            return _react.default.createElement(_selectable_list_item.EuiSelectableListItem, _extends({\n              id: _this2.rootId(\"_option-\".concat(index)),\n              style: style,\n              key: option.label.toLowerCase(),\n              onClick: function onClick() {\n                return _this2.onAddOrRemoveOption(option);\n              },\n              ref: ref ? ref.bind(null, index) : undefined,\n              isFocused: activeOptionIndex === index,\n              title: label,\n              showIcons: showIcons,\n              checked: checked,\n              disabled: disabled,\n              prepend: prepend,\n              append: append\n            }, optionRest), renderOption ? renderOption(option, searchValue) : _react.default.createElement(_highlight.EuiHighlight, {\n              search: searchValue\n            }, label));\n          }\n        }));\n      }));\n    }\n  }]);\n\n  return EuiSelectableList;\n}(_react.Component);\n\nexports.EuiSelectableList = EuiSelectableList;\n\n_defineProperty(EuiSelectableList, \"defaultProps\", {\n  rowHeight: 32,\n  searchValue: ''\n});\n\nEuiSelectableList.propTypes = {\n  className: _propTypes.default.string,\n  \"aria-label\": _propTypes.default.string,\n  \"data-test-subj\": _propTypes.default.string,\n\n  /**\n       * The index of the option to be highlighted as pseudo-focused;\n       * Good for use when only one selection is allowed and needing to open\n       * directly to that option\n       */\n  activeOptionIndex: _propTypes.default.number,\n\n  /**\n       *  The height of each option in pixels. Defaults to `32`\n       */\n  rowHeight: _propTypes.default.number.isRequired,\n\n  /**\n       * Show the check/cross selection indicator icons\n       */\n  showIcons: _propTypes.default.bool,\n  singleSelection: _propTypes.default.oneOfType([_propTypes.default.oneOf([\"always\"]), _propTypes.default.bool.isRequired]),\n\n  /**\n       * Any props to send specifically to the react-virtualized `List`\n       */\n  virtualizedProps: _propTypes.default.any,\n\n  /**\n       * Adds a border around the list to indicate the bounds;\n       * Useful when the list scrolls, otherwise use your own container\n       */\n  bordered: _propTypes.default.bool,\n\n  /**\n     * All possible options\n     */\n  options: _propTypes.default.arrayOf(_propTypes.default.shape({\n    /**\n       * Must be unique across items (todo: fix this)\n       */\n    label: _propTypes.default.string.isRequired,\n\n    /**\n       * Leave off to indicate not selected,\n       * 'on' to indicate inclusion and\n       * 'off' to indicate exclusion\n       */\n    checked: _propTypes.default.oneOf([\"on\", \"off\", undefined]),\n    disabled: _propTypes.default.bool,\n\n    /**\n       * Set to true to indicate object is just a grouping label, not a selectable item\n       */\n    isGroupLabel: _propTypes.default.bool,\n\n    /**\n       * Node to add between the selection icon and the label\n       */\n    prepend: _propTypes.default.node,\n\n    /**\n       * Node to add to the far right of the item\n       */\n    append: _propTypes.default.node,\n    ref: _propTypes.default.func,\n    className: _propTypes.default.string,\n    \"aria-label\": _propTypes.default.string,\n    \"data-test-subj\": _propTypes.default.string\n  }).isRequired).isRequired,\n\n  /**\n     * Filtered options list (if applicable)\n     */\n  visibleOptions: _propTypes.default.arrayOf(_propTypes.default.shape({\n    label: _propTypes.default.string.isRequired,\n    checked: _propTypes.default.oneOf([\"on\", \"off\", undefined]),\n    disabled: _propTypes.default.bool,\n    isGroupLabel: _propTypes.default.bool,\n    prepend: _propTypes.default.node,\n    append: _propTypes.default.node,\n    ref: _propTypes.default.func,\n    className: _propTypes.default.string,\n    \"aria-label\": _propTypes.default.string,\n    \"data-test-subj\": _propTypes.default.string\n  }).isRequired),\n\n  /**\n     * Search value to highlight on the option render\n     */\n  searchValue: _propTypes.default.string.isRequired,\n\n  /**\n     * Returns the array of options with altered checked state\n     */\n  onOptionClick: _propTypes.default.func.isRequired,\n\n  /**\n     * Custom render for the label portion of the option;\n     * Takes (option, searchValue), returns ReactNode\n     */\n  renderOption: _propTypes.default.func,\n\n  /**\n     * Sets the max height in pixels or pass `full` to allow\n     * the whole group to fill the height of its container and\n     * allows the list grow as well\n     */\n  height: _propTypes.default.oneOfType([_propTypes.default.number.isRequired, _propTypes.default.oneOf([\"full\"])]),\n\n  /**\n     * Allow cycling through the on, off and undefined state of option.checked\n     * and not just on and undefined\n     */\n  allowExclusions: _propTypes.default.bool,\n  rootId: _propTypes.default.func\n};\nEuiSelectableList.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [{\n    \"name\": \"onAddOrRemoveOption\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"option\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"onAddOption\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"addedOption\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"onRemoveOption\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"removedOption\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"onExcludeOption\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"excludedOption\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }],\n  \"displayName\": \"EuiSelectableList\",\n  \"props\": {\n    \"rowHeight\": {\n      \"defaultValue\": {\n        \"value\": \"32\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"The height of each option in pixels. Defaults to `32`\"\n    },\n    \"searchValue\": {\n      \"defaultValue\": {\n        \"value\": \"''\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Search value to highlight on the option render\"\n    },\n    \"className\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"aria-label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"data-test-subj\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"activeOptionIndex\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"The index of the option to be highlighted as pseudo-focused;\\nGood for use when only one selection is allowed and needing to open\\ndirectly to that option\"\n    },\n    \"showIcons\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Show the check/cross selection indicator icons\"\n    },\n    \"singleSelection\": {\n      \"type\": {\n        \"name\": \"union\",\n        \"value\": [{\n          \"name\": \"enum\",\n          \"value\": [{\n            \"value\": \"\\\"always\\\"\",\n            \"computed\": false\n          }]\n        }, {\n          \"name\": \"bool\"\n        }]\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"virtualizedProps\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Any props to send specifically to the react-virtualized `List`\"\n    },\n    \"bordered\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Adds a border around the list to indicate the bounds;\\nUseful when the list scrolls, otherwise use your own container\"\n    },\n    \"options\": {\n      \"type\": {\n        \"name\": \"arrayOf\",\n        \"value\": {\n          \"name\": \"shape\",\n          \"value\": {\n            \"label\": {\n              \"name\": \"string\",\n              \"description\": \"Must be unique across items (todo: fix this)\",\n              \"required\": true\n            },\n            \"checked\": {\n              \"name\": \"enum\",\n              \"value\": [{\n                \"value\": \"\\\"on\\\"\",\n                \"computed\": false\n              }, {\n                \"value\": \"\\\"off\\\"\",\n                \"computed\": false\n              }, {\n                \"value\": \"undefined\",\n                \"computed\": true\n              }],\n              \"description\": \"Leave off to indicate not selected,\\n'on' to indicate inclusion and\\n'off' to indicate exclusion\",\n              \"required\": false\n            },\n            \"disabled\": {\n              \"name\": \"bool\",\n              \"required\": false\n            },\n            \"isGroupLabel\": {\n              \"name\": \"bool\",\n              \"description\": \"Set to true to indicate object is just a grouping label, not a selectable item\",\n              \"required\": false\n            },\n            \"prepend\": {\n              \"name\": \"node\",\n              \"description\": \"Node to add between the selection icon and the label\",\n              \"required\": false\n            },\n            \"append\": {\n              \"name\": \"node\",\n              \"description\": \"Node to add to the far right of the item\",\n              \"required\": false\n            },\n            \"ref\": {\n              \"name\": \"func\",\n              \"required\": false\n            },\n            \"className\": {\n              \"name\": \"string\",\n              \"required\": false\n            },\n            \"aria-label\": {\n              \"name\": \"string\",\n              \"required\": false\n            },\n            \"data-test-subj\": {\n              \"name\": \"string\",\n              \"required\": false\n            }\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"All possible options\"\n    },\n    \"visibleOptions\": {\n      \"type\": {\n        \"name\": \"arrayOf\",\n        \"value\": {\n          \"name\": \"shape\",\n          \"value\": {\n            \"label\": {\n              \"name\": \"string\",\n              \"required\": true\n            },\n            \"checked\": {\n              \"name\": \"enum\",\n              \"value\": [{\n                \"value\": \"\\\"on\\\"\",\n                \"computed\": false\n              }, {\n                \"value\": \"\\\"off\\\"\",\n                \"computed\": false\n              }, {\n                \"value\": \"undefined\",\n                \"computed\": true\n              }],\n              \"required\": false\n            },\n            \"disabled\": {\n              \"name\": \"bool\",\n              \"required\": false\n            },\n            \"isGroupLabel\": {\n              \"name\": \"bool\",\n              \"required\": false\n            },\n            \"prepend\": {\n              \"name\": \"node\",\n              \"required\": false\n            },\n            \"append\": {\n              \"name\": \"node\",\n              \"required\": false\n            },\n            \"ref\": {\n              \"name\": \"func\",\n              \"required\": false\n            },\n            \"className\": {\n              \"name\": \"string\",\n              \"required\": false\n            },\n            \"aria-label\": {\n              \"name\": \"string\",\n              \"required\": false\n            },\n            \"data-test-subj\": {\n              \"name\": \"string\",\n              \"required\": false\n            }\n          }\n        }\n      },\n      \"required\": false,\n      \"description\": \"Filtered options list (if applicable)\"\n    },\n    \"onOptionClick\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Returns the array of options with altered checked state\"\n    },\n    \"renderOption\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"Custom render for the label portion of the option;\\nTakes (option, searchValue), returns ReactNode\"\n    },\n    \"height\": {\n      \"type\": {\n        \"name\": \"union\",\n        \"value\": [{\n          \"name\": \"number\"\n        }, {\n          \"name\": \"enum\",\n          \"value\": [{\n            \"value\": \"\\\"full\\\"\",\n            \"computed\": false\n          }]\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Sets the max height in pixels or pass `full` to allow\\nthe whole group to fill the height of its container and\\nallows the list grow as well\"\n    },\n    \"allowExclusions\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Allow cycling through the on, off and undefined state of option.checked\\nand not just on and undefined\"\n    },\n    \"rootId\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/selectable/selectable_list/selectable_list.tsx"],"names":["EuiSelectableList","props","rootId","option","disabled","allowExclusions","checked","onExcludeOption","onRemoveOption","onAddOption","addedOption","onOptionClick","options","singleSelection","updatedOptions","map","updatedOption","removedOption","excludedOption","className","searchValue","renderOption","forcedHeight","height","virtualizedProps","rowHeight","activeOptionIndex","showIcons","visibleOptions","bordered","rest","optionArray","heightIsFull","calculatedHeight","undefined","maxVisibleOptions","numVisibleOptions","length","numVisibleMoreThanMax","classes","width","key","index","style","label","isGroupLabel","prepend","append","ref","optionRest","toLowerCase","onAddOrRemoveOption","bind","Component"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport classNames from 'classnames'; // eslint-disable-next-line import/named\n\nimport { List, AutoSizer } from 'react-virtualized';\nimport { htmlIdGenerator } from '../../../services';\nimport { EuiSelectableListItem } from './selectable_list_item'; // @ts-ignore\n\nimport { EuiHighlight } from '../../highlight';\nexport class EuiSelectableList extends Component {\n  static defaultProps = {\n    rowHeight: 32,\n    searchValue: ''\n  };\n  rootId = this.props.rootId || htmlIdGenerator();\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const {\n      className,\n      options,\n      searchValue,\n      onOptionClick,\n      renderOption,\n      height: forcedHeight,\n      virtualizedProps,\n      rowHeight,\n      activeOptionIndex,\n      rootId,\n      showIcons,\n      singleSelection,\n      visibleOptions,\n      allowExclusions,\n      bordered,\n      ...rest\n    } = this.props;\n    const optionArray = visibleOptions || options;\n    const heightIsFull = forcedHeight === 'full';\n    let calculatedHeight = heightIsFull ? false : forcedHeight; // If calculatedHeight is still undefined, then calculate it\n\n    if (calculatedHeight === undefined) {\n      const maxVisibleOptions = 7;\n      const numVisibleOptions = optionArray.length;\n      const numVisibleMoreThanMax = optionArray.length > maxVisibleOptions;\n\n      if (numVisibleMoreThanMax) {\n        // Show only half of the last one to indicate there's more to scroll to\n        calculatedHeight = (maxVisibleOptions - 0.5) * rowHeight;\n      } else {\n        calculatedHeight = numVisibleOptions * rowHeight;\n      }\n    }\n\n    const classes = classNames('euiSelectableList', {\n      'euiSelectableList-fullHeight': heightIsFull,\n      'euiSelectableList-bordered': bordered\n    }, className);\n    return <div className={classes} {...rest}>\n        <AutoSizer disableHeight={!heightIsFull}>\n          {({\n          width,\n          height\n        }) => <List id={this.rootId('listbox')} className=\"euiSelectableList__list\" role=\"listbox\" width={width} height={calculatedHeight || height} rowCount={optionArray.length} rowHeight={rowHeight} scrollToIndex={activeOptionIndex} {...virtualizedProps} rowRenderer={({\n          key,\n          index,\n          style\n        }) => {\n          const option = optionArray[index];\n          const {\n            label,\n            isGroupLabel,\n            checked,\n            disabled,\n            prepend,\n            append,\n            ref,\n            ...optionRest\n          } = option;\n\n          if (isGroupLabel) {\n            return <div className=\"euiSelectableList__groupLabel\" key={key} style={style} {...optionRest}>\n                      {prepend}\n                      {label}\n                      {append}\n                    </div>;\n          }\n\n          return <EuiSelectableListItem id={this.rootId(`_option-${index}`)} style={style} key={option.label.toLowerCase()} onClick={() => this.onAddOrRemoveOption(option)} ref={ref ? ref.bind(null, index) : undefined} isFocused={activeOptionIndex === index} title={label} showIcons={showIcons} checked={checked} disabled={disabled} prepend={prepend} append={append} {...optionRest}>\n                    {renderOption ? renderOption(option, searchValue) : <EuiHighlight search={searchValue}>{label}</EuiHighlight>}\n                  </EuiSelectableListItem>;\n        }} />}\n        </AutoSizer>\n      </div>;\n  }\n\n  onAddOrRemoveOption = option => {\n    if (option.disabled) {\n      return;\n    }\n\n    const {\n      allowExclusions\n    } = this.props;\n\n    if (option.checked === 'on' && allowExclusions) {\n      this.onExcludeOption(option);\n    } else if (option.checked === 'on' || option.checked === 'off') {\n      this.onRemoveOption(option);\n    } else {\n      this.onAddOption(option);\n    }\n  };\n  onAddOption = addedOption => {\n    const {\n      onOptionClick,\n      options,\n      singleSelection\n    } = this.props;\n    const updatedOptions = options.map(option => {\n      // if singleSelection is enabled, uncheck any selected option(s)\n      const updatedOption = { ...option\n      };\n\n      if (singleSelection) {\n        delete updatedOption.checked;\n      } // if this is the now-selected option, check it\n\n\n      if (option === addedOption) {\n        updatedOption.checked = 'on';\n      }\n\n      return updatedOption;\n    });\n    onOptionClick(updatedOptions);\n  };\n  onRemoveOption = removedOption => {\n    const {\n      onOptionClick,\n      singleSelection,\n      options\n    } = this.props;\n    const updatedOptions = options.map(option => {\n      const updatedOption = { ...option\n      };\n\n      if (option === removedOption && singleSelection !== 'always') {\n        delete updatedOption.checked;\n      }\n\n      return updatedOption;\n    });\n    onOptionClick(updatedOptions);\n  };\n  onExcludeOption = excludedOption => {\n    const {\n      onOptionClick,\n      options\n    } = this.props;\n    excludedOption.checked = 'off';\n    const updatedOptions = options.map(option => {\n      const updatedOption = { ...option\n      };\n\n      if (option === excludedOption) {\n        updatedOption.checked = 'off';\n      }\n\n      return updatedOption;\n    });\n    onOptionClick(updatedOptions);\n  };\n}\nEuiSelectableList.propTypes = {\n  className: PropTypes.string,\n  \"aria-label\": PropTypes.string,\n  \"data-test-subj\": PropTypes.string,\n\n  /**\n       * The index of the option to be highlighted as pseudo-focused;\n       * Good for use when only one selection is allowed and needing to open\n       * directly to that option\n       */\n  activeOptionIndex: PropTypes.number,\n\n  /**\n       *  The height of each option in pixels. Defaults to `32`\n       */\n  rowHeight: PropTypes.number.isRequired,\n\n  /**\n       * Show the check/cross selection indicator icons\n       */\n  showIcons: PropTypes.bool,\n  singleSelection: PropTypes.oneOfType([PropTypes.oneOf([\"always\"]), PropTypes.bool.isRequired]),\n\n  /**\n       * Any props to send specifically to the react-virtualized `List`\n       */\n  virtualizedProps: PropTypes.any,\n\n  /**\n       * Adds a border around the list to indicate the bounds;\n       * Useful when the list scrolls, otherwise use your own container\n       */\n  bordered: PropTypes.bool,\n\n  /**\n     * All possible options\n     */\n  options: PropTypes.arrayOf(PropTypes.shape({\n    /**\n       * Must be unique across items (todo: fix this)\n       */\n    label: PropTypes.string.isRequired,\n\n    /**\n       * Leave off to indicate not selected,\n       * 'on' to indicate inclusion and\n       * 'off' to indicate exclusion\n       */\n    checked: PropTypes.oneOf([\"on\", \"off\", undefined]),\n    disabled: PropTypes.bool,\n\n    /**\n       * Set to true to indicate object is just a grouping label, not a selectable item\n       */\n    isGroupLabel: PropTypes.bool,\n\n    /**\n       * Node to add between the selection icon and the label\n       */\n    prepend: PropTypes.node,\n\n    /**\n       * Node to add to the far right of the item\n       */\n    append: PropTypes.node,\n    ref: PropTypes.func,\n    className: PropTypes.string,\n    \"aria-label\": PropTypes.string,\n    \"data-test-subj\": PropTypes.string\n  }).isRequired).isRequired,\n\n  /**\n     * Filtered options list (if applicable)\n     */\n  visibleOptions: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    checked: PropTypes.oneOf([\"on\", \"off\", undefined]),\n    disabled: PropTypes.bool,\n    isGroupLabel: PropTypes.bool,\n    prepend: PropTypes.node,\n    append: PropTypes.node,\n    ref: PropTypes.func,\n    className: PropTypes.string,\n    \"aria-label\": PropTypes.string,\n    \"data-test-subj\": PropTypes.string\n  }).isRequired),\n\n  /**\n     * Search value to highlight on the option render\n     */\n  searchValue: PropTypes.string.isRequired,\n\n  /**\n     * Returns the array of options with altered checked state\n     */\n  onOptionClick: PropTypes.func.isRequired,\n\n  /**\n     * Custom render for the label portion of the option;\n     * Takes (option, searchValue), returns ReactNode\n     */\n  renderOption: PropTypes.func,\n\n  /**\n     * Sets the max height in pixels or pass `full` to allow\n     * the whole group to fill the height of its container and\n     * allows the list grow as well\n     */\n  height: PropTypes.oneOfType([PropTypes.number.isRequired, PropTypes.oneOf([\"full\"])]),\n\n  /**\n     * Allow cycling through the on, off and undefined state of option.checked\n     * and not just on and undefined\n     */\n  allowExclusions: PropTypes.bool,\n  rootId: PropTypes.func\n};"]}]}