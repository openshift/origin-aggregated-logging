{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/selectable/selectable_list/selectable_list_item.tsx","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/selectable/selectable_list/selectable_list_item.tsx","mtime":1565204169997},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EuiSelectableListItem = void 0;\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/es6.object.assign\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.object.set-prototype-of\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _icon2 = require(\"../../icon\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction resolveIconAndColor(checked) {\n  if (!checked) {\n    return {\n      icon: 'empty'\n    };\n  }\n\n  return checked === 'on' ? {\n    icon: 'check',\n    color: 'text'\n  } : {\n    icon: 'cross',\n    color: 'text'\n  };\n}\n\n// eslint-disable-next-line react/prefer-stateless-function\nvar EuiSelectableListItem =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EuiSelectableListItem, _Component);\n\n  function EuiSelectableListItem(props) {\n    _classCallCheck(this, EuiSelectableListItem);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(EuiSelectableListItem).call(this, props));\n  }\n\n  _createClass(EuiSelectableListItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          className = _this$props.className,\n          disabled = _this$props.disabled,\n          checked = _this$props.checked,\n          isFocused = _this$props.isFocused,\n          showIcons = _this$props.showIcons,\n          prepend = _this$props.prepend,\n          append = _this$props.append,\n          rest = _objectWithoutProperties(_this$props, [\"children\", \"className\", \"disabled\", \"checked\", \"isFocused\", \"showIcons\", \"prepend\", \"append\"]);\n\n      var classes = (0, _classnames.default)('euiSelectableListItem', {\n        'euiSelectableListItem-isFocused': isFocused\n      }, className);\n      var buttonIcon;\n\n      if (showIcons) {\n        var _resolveIconAndColor = resolveIconAndColor(checked),\n            _icon = _resolveIconAndColor.icon,\n            _color = _resolveIconAndColor.color;\n\n        buttonIcon = _react.default.createElement(_icon2.EuiIcon, {\n          className: \"euiSelectableListItem__icon\",\n          color: _color,\n          type: _icon\n        });\n      }\n\n      var prependNode;\n\n      if (prepend) {\n        prependNode = _react.default.createElement(\"span\", {\n          className: \"euiSelectableListItem__prepend\"\n        }, prepend);\n      }\n\n      var appendNode;\n\n      if (append) {\n        appendNode = _react.default.createElement(\"span\", {\n          className: \"euiSelectableListItem__append\"\n        }, append);\n      }\n\n      return _react.default.createElement(\"button\", _extends({\n        role: \"option\",\n        type: \"button\",\n        \"aria-selected\": isFocused,\n        className: classes,\n        disabled: disabled,\n        \"aria-disabled\": disabled\n      }, rest), _react.default.createElement(\"span\", {\n        className: \"euiSelectableListItem__content\"\n      }, buttonIcon, prependNode, _react.default.createElement(\"span\", {\n        className: \"euiSelectableListItem__text\"\n      }, children), appendNode));\n    }\n  }]);\n\n  return EuiSelectableListItem;\n}(_react.Component);\n\nexports.EuiSelectableListItem = EuiSelectableListItem;\n\n_defineProperty(EuiSelectableListItem, \"defaultProps\", {\n  showIcons: true\n});\n\nEuiSelectableListItem.propTypes = {\n  className: _propTypes.default.string,\n  \"aria-label\": _propTypes.default.string,\n  \"data-test-subj\": _propTypes.default.string,\n  children: _propTypes.default.node,\n\n  /**\n       * Applies an icon and visual styling to activated items\n       */\n  checked: _propTypes.default.oneOf([\"on\", \"off\", undefined]),\n\n  /**\n       * Shows icons based on `checked` type\n       */\n  showIcons: _propTypes.default.bool.isRequired,\n\n  /**\n       * Highlights the item for pseudo focus\n       */\n  isFocused: _propTypes.default.bool,\n  disabled: _propTypes.default.bool,\n  prepend: _propTypes.default.node,\n  append: _propTypes.default.node\n};\nEuiSelectableListItem.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"EuiSelectableListItem\",\n  \"props\": {\n    \"showIcons\": {\n      \"defaultValue\": {\n        \"value\": \"true\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Shows icons based on `checked` type\"\n    },\n    \"className\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"aria-label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"data-test-subj\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"checked\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"on\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"off\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"undefined\",\n          \"computed\": true\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Applies an icon and visual styling to activated items\"\n    },\n    \"isFocused\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Highlights the item for pseudo focus\"\n    },\n    \"disabled\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"prepend\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"append\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/selectable/selectable_list/selectable_list_item.tsx"],"names":["resolveIconAndColor","checked","icon","color","EuiSelectableListItem","props","children","className","disabled","isFocused","showIcons","prepend","append","rest","classes","buttonIcon","prependNode","appendNode","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,SAASA,mBAAT,CACEC,OADF,EAEyC;AACvC,MAAI,CAACA,OAAL,EAAc;AACZ,WAAO;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAP;AACD;;AACD,SAAOD,OAAO,KAAK,IAAZ,GACH;AAAEC,IAAAA,IAAI,EAAE,OAAR;AAAiBC,IAAAA,KAAK,EAAE;AAAxB,GADG,GAEH;AAAED,IAAAA,IAAI,EAAE,OAAR;AAAiBC,IAAAA,KAAK,EAAE;AAAxB,GAFJ;AAGD;;AAwBD;IACaC,qB;;;;;AAOX,iCAAYC,KAAZ,EAA+C;AAAA;;AAAA,8FACvCA,KADuC;AAE9C;;;;6BAEQ;AAAA,wBAWH,KAAKA,KAXF;AAAA,UAELC,QAFK,eAELA,QAFK;AAAA,UAGLC,SAHK,eAGLA,SAHK;AAAA,UAILC,QAJK,eAILA,QAJK;AAAA,UAKLP,OALK,eAKLA,OALK;AAAA,UAMLQ,SANK,eAMLA,SANK;AAAA,UAOLC,SAPK,eAOLA,SAPK;AAAA,UAQLC,OARK,eAQLA,OARK;AAAA,UASLC,MATK,eASLA,MATK;AAAA,UAUFC,IAVE;;AAaP,UAAMC,OAAO,GAAG,yBACd,uBADc,EAEd;AACE,2CAAmCL;AADrC,OAFc,EAKdF,SALc,CAAhB;AAQA,UAAIQ,UAAJ;;AACA,UAAIL,SAAJ,EAAe;AAAA,mCACWV,mBAAmB,CAACC,OAAD,CAD9B;AAAA,YACLC,KADK,wBACLA,IADK;AAAA,YACCC,MADD,wBACCA,KADD;;AAEbY,QAAAA,UAAU,GACR,6BAAC,cAAD;AACE,UAAA,SAAS,EAAC,6BADZ;AAEE,UAAA,KAAK,EAAEZ,MAFT;AAGE,UAAA,IAAI,EAAED;AAHR,UADF;AAOD;;AAED,UAAIc,WAAJ;;AACA,UAAIL,OAAJ,EAAa;AACXK,QAAAA,WAAW,GACT;AAAM,UAAA,SAAS,EAAC;AAAhB,WAAkDL,OAAlD,CADF;AAGD;;AAED,UAAIM,UAAJ;;AACA,UAAIL,MAAJ,EAAY;AACVK,QAAAA,UAAU,GACR;AAAM,UAAA,SAAS,EAAC;AAAhB,WAAiDL,MAAjD,CADF;AAGD;;AAED,aACE;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,IAAI,EAAC,QAFP;AAGE,yBAAeH,SAHjB;AAIE,QAAA,SAAS,EAAEK,OAJb;AAKE,QAAA,QAAQ,EAAEN,QALZ;AAME,yBAAeA;AANjB,SAOMK,IAPN,GAQE;AAAM,QAAA,SAAS,EAAC;AAAhB,SACGE,UADH,EAEGC,WAFH,EAGE;AAAM,QAAA,SAAS,EAAC;AAAhB,SAA+CV,QAA/C,CAHF,EAIGW,UAJH,CARF,CADF;AAiBD;;;;EA3EwCC,gB;;;;gBAA9Bd,qB,kBAGW;AACpBM,EAAAA,SAAS,EAAE;AADS,C","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport classNames from 'classnames';\nimport { EuiIcon } from '../../icon';\n\nfunction resolveIconAndColor(checked) {\n  if (!checked) {\n    return {\n      icon: 'empty'\n    };\n  }\n\n  return checked === 'on' ? {\n    icon: 'check',\n    color: 'text'\n  } : {\n    icon: 'cross',\n    color: 'text'\n  };\n} // eslint-disable-next-line react/prefer-stateless-function\n\n\nexport class EuiSelectableListItem extends Component {\n  static defaultProps = {\n    showIcons: true\n  };\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const {\n      children,\n      className,\n      disabled,\n      checked,\n      isFocused,\n      showIcons,\n      prepend,\n      append,\n      ...rest\n    } = this.props;\n    const classes = classNames('euiSelectableListItem', {\n      'euiSelectableListItem-isFocused': isFocused\n    }, className);\n    let buttonIcon;\n\n    if (showIcons) {\n      const {\n        icon,\n        color\n      } = resolveIconAndColor(checked);\n      buttonIcon = <EuiIcon className=\"euiSelectableListItem__icon\" color={color} type={icon} />;\n    }\n\n    let prependNode;\n\n    if (prepend) {\n      prependNode = <span className=\"euiSelectableListItem__prepend\">{prepend}</span>;\n    }\n\n    let appendNode;\n\n    if (append) {\n      appendNode = <span className=\"euiSelectableListItem__append\">{append}</span>;\n    }\n\n    return <button role=\"option\" type=\"button\" aria-selected={isFocused} className={classes} disabled={disabled} aria-disabled={disabled} {...rest}>\n        <span className=\"euiSelectableListItem__content\">\n          {buttonIcon}\n          {prependNode}\n          <span className=\"euiSelectableListItem__text\">{children}</span>\n          {appendNode}\n        </span>\n      </button>;\n  }\n\n}\nEuiSelectableListItem.propTypes = {\n  className: PropTypes.string,\n  \"aria-label\": PropTypes.string,\n  \"data-test-subj\": PropTypes.string,\n  children: PropTypes.node,\n\n  /**\n       * Applies an icon and visual styling to activated items\n       */\n  checked: PropTypes.oneOf([\"on\", \"off\", undefined]),\n\n  /**\n       * Shows icons based on `checked` type\n       */\n  showIcons: PropTypes.bool.isRequired,\n\n  /**\n       * Highlights the item for pseudo focus\n       */\n  isFocused: PropTypes.bool,\n  disabled: PropTypes.bool,\n  prepend: PropTypes.node,\n  append: PropTypes.node\n};"]}]}