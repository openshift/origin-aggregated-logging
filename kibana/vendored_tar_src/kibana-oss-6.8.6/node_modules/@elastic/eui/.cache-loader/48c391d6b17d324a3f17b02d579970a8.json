{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src-docs/src/views/guidelines/toasts.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src-docs/src/views/guidelines/toasts.js","mtime":1565204169490},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ToastGuidelines = void 0;\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/es6.object.set-prototype-of\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _components = require(\"../../components\");\n\nvar _components2 = require(\"../../../../src/components\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nvar ToastGuidelines =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ToastGuidelines, _Component);\n\n  function ToastGuidelines(props) {\n    var _this;\n\n    _classCallCheck(this, ToastGuidelines);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ToastGuidelines).call(this, props));\n    _this.state = {\n      isModalVisible: false\n    };\n    _this.closeModal = _this.closeModal.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.showModal = _this.showModal.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(ToastGuidelines, [{\n    key: \"closeModal\",\n    value: function closeModal() {\n      this.setState({\n        isModalVisible: false\n      });\n    }\n  }, {\n    key: \"showModal\",\n    value: function showModal() {\n      this.setState({\n        isModalVisible: true\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var modal;\n\n      if (this.state.isModalVisible) {\n        modal = _react.default.createElement(_components2.EuiOverlayMask, null, _react.default.createElement(_components2.EuiModal, {\n          onClose: this.closeModal\n        }, _react.default.createElement(_components2.EuiModalHeader, null, _react.default.createElement(_components2.EuiModalHeaderTitle, null, \"Your visualization has an error\")), _react.default.createElement(_components2.EuiModalBody, null, _react.default.createElement(_components2.EuiCallOut, {\n          title: \"The maximum bucket size of 200 was exceeded\",\n          color: \"danger\",\n          size: \"s\",\n          iconType: \"alert\"\n        }), _react.default.createElement(_components2.EuiSpacer, {\n          size: \"s\"\n        }), _react.default.createElement(_components2.EuiCodeBlock, null, \"--- FAKE ERROR ---\\nAn extremely long error trace can exist in a modal so you have time\\nand space to read it properly. Alternatively just link to a full page.\\n---\\n                \")), _react.default.createElement(_components2.EuiModalFooter, null, _react.default.createElement(_components2.EuiButton, {\n          onClick: this.closeModal,\n          fill: true\n        }, \"Close\"))));\n      }\n\n      return _react.default.createElement(_components.GuidePage, {\n        title: \"Toast guidelines\",\n        componentLinkTo: \"/display/toast\"\n      }, _react.default.createElement(_components2.EuiText, {\n        grow: false,\n        className: \"guideSection__text\"\n      }, _react.default.createElement(\"p\", null, \"This page documents patterns for using toasts, short messages that appears on the lower right corner and time out after a few seconds. They are a popular design choice because they don't need to fit in a layout and don't disrupt the user.\")), _react.default.createElement(_components.GuideRuleTitle, null, \"Toast types\"), _react.default.createElement(_components2.EuiSpacer, {\n        size: \"xl\"\n      }), _react.default.createElement(_components2.EuiFlexGroup, {\n        alignItems: \"center\"\n      }, _react.default.createElement(_components2.EuiFlexItem, {\n        grow: false,\n        style: {\n          minWidth: 120\n        }\n      }, _react.default.createElement(_components2.EuiToast, {\n        style: {\n          width: 300\n        },\n        title: \"Your report is complete\",\n        color: \"success\"\n      })), _react.default.createElement(_components2.EuiFlexItem, null, _react.default.createElement(_components2.EuiText, {\n        className: \"guideSection__text\"\n      }, _react.default.createElement(\"h4\", null, \"Success toasts indicate that everything worked out\"), _react.default.createElement(\"p\", null, \"They are the most-commonly used toasts.\")))), _react.default.createElement(_components2.EuiSpacer, null), _react.default.createElement(_components2.EuiFlexGroup, {\n        alignItems: \"center\"\n      }, _react.default.createElement(_components2.EuiFlexItem, {\n        grow: false,\n        style: {\n          minWidth: 120\n        }\n      }, _react.default.createElement(_components2.EuiToast, {\n        style: {\n          width: 300\n        },\n        title: \"Node 726 is having trouble\",\n        color: \"warning\"\n      })), _react.default.createElement(_components2.EuiFlexItem, null, _react.default.createElement(_components2.EuiText, {\n        className: \"guideSection__text\"\n      }, _react.default.createElement(\"h4\", null, \"Warning toasts direct user attention to a potential problem\"), _react.default.createElement(\"p\", null, \"These toasts work well in monitoring apps when something significant requires action.\")))), _react.default.createElement(_components2.EuiSpacer, null), _react.default.createElement(_components2.EuiFlexGroup, {\n        alignItems: \"center\"\n      }, _react.default.createElement(_components2.EuiFlexItem, {\n        grow: false,\n        style: {\n          minWidth: 120\n        }\n      }, _react.default.createElement(_components2.EuiToast, {\n        style: {\n          width: 300\n        },\n        title: \"Search failed.  Check your Elasticsearch connection.\",\n        color: \"danger\"\n      })), _react.default.createElement(_components2.EuiFlexItem, null, _react.default.createElement(_components2.EuiText, {\n        className: \"guideSection__text\"\n      }, _react.default.createElement(\"h4\", null, \"Error toasts report a problem\"), _react.default.createElement(\"p\", null, \"An error toast might let users know an action didn't complete or that a form has errors.\")))), _react.default.createElement(_components2.EuiSpacer, null), _react.default.createElement(_components2.EuiFlexGroup, {\n        alignItems: \"center\"\n      }, _react.default.createElement(_components2.EuiFlexItem, {\n        grow: false,\n        style: {\n          minWidth: 120\n        }\n      }, _react.default.createElement(\"div\", null, _react.default.createElement(_components2.EuiToast, {\n        style: {\n          width: 300\n        },\n        title: \"Please wait while your report is created\",\n        color: \"primary\"\n      }))), _react.default.createElement(_components2.EuiFlexItem, null, _react.default.createElement(_components2.EuiText, {\n        className: \"guideSection__text\"\n      }, _react.default.createElement(\"h4\", null, \"Info toasts relay neutral information\"), _react.default.createElement(\"p\", null, \"The default toast, an info toast might notify users about an ongoing action.\")))), _react.default.createElement(_components2.EuiSpacer, null), _react.default.createElement(_components.GuideRuleTitle, null, \"Use a toast for a timely message\"), _react.default.createElement(_components.GuideRule, {\n        description: \"Toasts are appropriate for short feedback related to a user action. A toast should contain a message about a current action, not a historical action.\"\n      }, _react.default.createElement(_components.GuideRuleExample, {\n        type: \"do\",\n        panel: false,\n        frame: true,\n        text: \"Do. Use a toast for a brief message about the current action.\"\n      }, _react.default.createElement(_components2.EuiToast, {\n        style: {\n          maxWidth: 300\n        },\n        title: \"Your folder was moved\",\n        color: \"success\"\n      })), _react.default.createElement(_components.GuideRuleExample, {\n        panel: false,\n        type: \"dont\",\n        frame: true,\n        text: \"Don't greet users with a toast when they open a page.\"\n      }, _react.default.createElement(\"div\", {\n        style: {\n          textAlign: 'center'\n        }\n      }, _react.default.createElement(_components2.EuiToast, {\n        style: {\n          maxWidth: 300\n        },\n        title: \"Haven't seen you in a while\",\n        color: \"primary\"\n      })))), _react.default.createElement(_components.GuideRuleTitle, null, \"Most often, it's a single line of text\"), _react.default.createElement(_components.GuideRule, {\n        description: \"By default, a toast stays on the screen 10 seconds. Users should be able read the message in 6 to 7 seconds. The message should get straight to the point and rarely include more than one line. \"\n      }, _react.default.createElement(_components.GuideRuleExample, {\n        panel: false,\n        frame: true,\n        type: \"do\",\n        text: \"Do. A single line of text is readable at a glance.\"\n      }, _react.default.createElement(\"div\", {\n        style: {\n          textAlign: 'center'\n        }\n      }, _react.default.createElement(_components2.EuiToast, {\n        style: {\n          maxWidth: 300\n        },\n        title: \"Check your form for errors\",\n        color: \"danger\"\n      }))), _react.default.createElement(_components.GuideRuleExample, {\n        type: \"dont\",\n        panel: false,\n        frame: true,\n        text: \"Don't cram a lot of detail into a toast. These errors should persist in callouts and validations on the form. They don't need to be spelled out in the toast.\"\n      }, _react.default.createElement(\"div\", null, _react.default.createElement(_components2.EuiToast, {\n        style: {\n          maxWidth: 300\n        },\n        title: \"Your form has errors\",\n        color: \"danger\"\n      }, _react.default.createElement(_components2.EuiText, {\n        className: \"guideSection__text\"\n      }, _react.default.createElement(\"ul\", null, _react.default.createElement(\"li\", null, \"Username is a required field.\"), _react.default.createElement(\"li\", null, \"Password must be at least 6 characters long.\"), _react.default.createElement(\"li\", null, \"Email is a required field.\"))))))), _react.default.createElement(_components.GuideRuleTitle, null, \"Toasts should only contain a single action\"), _react.default.createElement(_components.GuideRule, {\n        description: \"A toast can have a single action, styled as a standard button. If more actions are needed, or if the action is important enough to interrupt the user, use a modal instead.\"\n      }, _react.default.createElement(_components.GuideRuleExample, {\n        panel: false,\n        type: \"do\",\n        frame: true,\n        text: \"Do. Use only one action per toast and favor a one-word label. Align actions to the right, which follows our button guidelines for usage within restricted width containers.\"\n      }, _react.default.createElement(_components2.EuiToast, {\n        style: {\n          maxWidth: 300\n        },\n        color: \"success\",\n        title: \"Your report is complete\"\n      }, _react.default.createElement(\"div\", {\n        style: {\n          textAlign: 'right'\n        }\n      }, _react.default.createElement(_components2.EuiButton, {\n        size: \"s\"\n      }, \"Download\")))), _react.default.createElement(_components.GuideRuleExample, {\n        type: \"dont\",\n        panel: false,\n        frame: true,\n        text: \"Don't use multiple actions. Don't align buttons in toasts to the left. This message is better in a confirmation modal.\"\n      }, _react.default.createElement(_components2.EuiToast, {\n        style: {\n          maxWidth: 300\n        },\n        title: \"All messages will be deleted\",\n        color: \"danger\"\n      }, _react.default.createElement(_components2.EuiFlexGroup, {\n        justifyContent: \"flexEnd\",\n        gutterSize: \"s\"\n      }, _react.default.createElement(_components2.EuiFlexItem, {\n        grow: false\n      }, _react.default.createElement(_components2.EuiButton, {\n        size: \"s\"\n      }, \"Cancel\")), _react.default.createElement(_components2.EuiFlexItem, {\n        grow: false\n      }, _react.default.createElement(_components2.EuiButton, {\n        size: \"s\",\n        color: \"danger\"\n      }, \"Delete\")))))), _react.default.createElement(_components2.EuiSpacer, {\n        size: \"l\"\n      }), _react.default.createElement(_components.GuideRuleTitle, null, \"Icons should emphasize actions\"), _react.default.createElement(_components.GuideRule, {\n        description: \"An icon on the left of the message can help define the message type.\"\n      }, _react.default.createElement(_components.GuideRuleExample, {\n        panel: false,\n        type: \"do\",\n        frame: true,\n        text: \"Do. The check icon reinforces that the action succeeded. The alert icon helps users understand the message is an error.\"\n      }, _react.default.createElement(\"div\", null, _react.default.createElement(_components2.EuiToast, {\n        style: {\n          maxWidth: 300\n        },\n        title: \"Your dashboard was updated\",\n        iconType: \"check\",\n        color: \"success\"\n      }), _react.default.createElement(_components2.EuiSpacer, null), _react.default.createElement(_components2.EuiToast, {\n        style: {\n          maxWidth: 300\n        },\n        title: \"A dashboard named 'MyDashboard' already exists\",\n        iconType: \"alert\",\n        color: \"danger\"\n      }))), _react.default.createElement(_components.GuideRuleExample, {\n        type: \"dont\",\n        panel: false,\n        frame: true,\n        text: \"Don't use icons that are hard to understand. They distract from the message.\"\n      }, _react.default.createElement(_components2.EuiToast, {\n        color: \"primary\",\n        style: {\n          maxWidth: 300\n        },\n        title: \"Message sent\",\n        iconType: \"help\"\n      }))), _react.default.createElement(_components.GuideRuleTitle, null, \"Display one toast at a time\"), _react.default.createElement(_components.GuideRule, {\n        description: \"Users should be able to take in all the details from one toast before the next one arrives.\"\n      }, _react.default.createElement(_components.GuideRuleExample, {\n        panel: false,\n        type: \"do\",\n        frame: true,\n        text: \"Do. Display one toast at a time.\"\n      }, _react.default.createElement(_components2.EuiToast, {\n        style: {\n          maxWidth: 300\n        },\n        color: \"primary\",\n        title: \"3 new messages\"\n      })), _react.default.createElement(_components.GuideRuleExample, {\n        type: \"dont\",\n        panel: false,\n        frame: true,\n        text: \"Don't stack toasts.\"\n      }, _react.default.createElement(\"div\", null, _react.default.createElement(_components2.EuiToast, {\n        style: {\n          maxWidth: 300\n        },\n        color: \"danger\",\n        title: \"There was a problem with your node\"\n      }, _react.default.createElement(\"div\", {\n        style: {\n          textAlign: 'right'\n        }\n      }, _react.default.createElement(_components2.EuiButton, {\n        size: \"s\"\n      }, \"Learn more\"))), _react.default.createElement(_components2.EuiSpacer, null), _react.default.createElement(_components2.EuiToast, {\n        color: \"primary\",\n        style: {\n          maxWidth: 300\n        },\n        title: \"3 new messages\"\n      })))), _react.default.createElement(_components.GuideRuleTitle, null, \"Keep messages as short as possible\"), _react.default.createElement(_components.GuideRule, {\n        description: \"For common actions such as create, add, delete, remove, and save, include the object type, the object name if available, and the past tense of the action. \"\n      }, _react.default.createElement(_components.GuideRuleExample, {\n        panel: false,\n        type: \"do\",\n        frame: true,\n        text: \"Do. Include the object name if it's not too long. Use single quotation marks around the object name if it helps clarify meaning.\"\n      }, _react.default.createElement(\"div\", null, _react.default.createElement(_components2.EuiToast, {\n        color: \"success\",\n        style: {\n          maxWidth: 300\n        },\n        title: \"User 'Casey Smith' was added\"\n      }))), _react.default.createElement(_components.GuideRuleExample, {\n        type: \"dont\",\n        panel: false,\n        frame: true,\n        text: \"Don't use the generic \\\"Your object.\\\"\"\n      }, _react.default.createElement(_components2.EuiToast, {\n        color: \"success\",\n        style: {\n          maxWidth: 300\n        },\n        title: \"Your object has been saved\"\n      }))), _react.default.createElement(_components.GuideRule, {\n        description: \"Don't include the word \\\"successfully.\\\" It's implied.\"\n      }, _react.default.createElement(_components.GuideRuleExample, {\n        panel: false,\n        frame: true,\n        type: \"do\",\n        text: \"Do. Use this format for a success message.\"\n      }, _react.default.createElement(_components2.EuiToast, {\n        color: \"success\",\n        style: {\n          maxWidth: 300\n        },\n        title: \"Dashboard 'My_dashboard' was saved\"\n      })), _react.default.createElement(_components.GuideRuleExample, {\n        type: \"dont\",\n        panel: false,\n        frame: true,\n        text: \"Don't include \\\"successfully.\\\"\"\n      }, _react.default.createElement(_components2.EuiToast, {\n        color: \"success\",\n        style: {\n          maxWidth: 300\n        },\n        title: \"Dashboard 'My_dashboard' was successfully saved\"\n      }))), _react.default.createElement(_components.GuideRule, {\n        description: \"For a message about multiple objects, include the object count, but not the names of the objects.\"\n      }, _react.default.createElement(_components.GuideRuleExample, {\n        panel: false,\n        type: \"do\",\n        frame: true,\n        text: \"Do. Include the object count.\"\n      }, _react.default.createElement(_components2.EuiToast, {\n        color: \"success\",\n        style: {\n          maxWidth: 300\n        },\n        title: \"4 visualizations were deleted\"\n      })), _react.default.createElement(_components.GuideRuleExample, {\n        panel: false,\n        type: \"dont\",\n        frame: true,\n        text: \"Don't overwhelm the user by listing the names of all the objects.\"\n      }, _react.default.createElement(_components2.EuiToast, {\n        color: \"success\",\n        style: {\n          maxWidth: 300\n        },\n        title: \"Visualization 1, Visualization 2, Visualization 3, and Visualization 4 were deleted\"\n      }))), _react.default.createElement(_components.GuideRuleTitle, null, \"Use call-to-action buttons when the content needs more room\"), _react.default.createElement(_components.GuideRule, {\n        description: \"Occassionally the content of a toast is too involved to fit into the constrained space of a toast. This is common in long error messages. In these cases use the toast to deliver the summary of the information and use a button to provide a call-to-action for the full message.\"\n      }, _react.default.createElement(_components.GuideRuleExample, {\n        panel: false,\n        type: \"do\",\n        frame: true,\n        text: \"Use the toast message to provide a summary and a button to link to the full content\"\n      }, _react.default.createElement(_components2.EuiToast, {\n        style: {\n          maxWidth: 300\n        },\n        color: \"danger\",\n        title: \"Your visualization has an error\"\n      }, _react.default.createElement(\"p\", null, \"The maximum bucket size of 200 was exceeded.\"), _react.default.createElement(\"div\", {\n        style: {\n          textAlign: 'right'\n        }\n      }, _react.default.createElement(_components2.EuiButton, {\n        size: \"s\",\n        color: \"danger\",\n        onClick: this.showModal\n      }, \"See the full error\"), modal))), _react.default.createElement(_components.GuideRuleExample, {\n        type: \"dont\",\n        panel: false,\n        frame: true,\n        text: \"Don't cram a lot of content into the small space of a toast.\"\n      }, _react.default.createElement(_components2.EuiToast, {\n        style: {\n          maxWidth: 300\n        },\n        color: \"danger\",\n        title: \"Your visualization has an error\"\n      }, _react.default.createElement(_components2.EuiCallOut, {\n        title: \"The maximum bucket size of 200 was exceeded\",\n        color: \"danger\"\n      }, _react.default.createElement(\"p\", null, \"An extremely long error trace.\"))))));\n    }\n  }]);\n\n  return ToastGuidelines;\n}(_react.Component);\n\nexports.ToastGuidelines = ToastGuidelines;\nToastGuidelines.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [{\n    \"name\": \"closeModal\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [],\n    \"returns\": null\n  }, {\n    \"name\": \"showModal\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [],\n    \"returns\": null\n  }],\n  \"displayName\": \"ToastGuidelines\"\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src-docs/src/views/guidelines/toasts.js"],"names":["ToastGuidelines","props","state","isModalVisible","closeModal","bind","showModal","setState","modal","minWidth","width","maxWidth","textAlign","Component"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport {\n  GuidePage,\n  GuideRule,\n  GuideRuleExample,\n  GuideRuleTitle,\n} from '../../components';\n\nimport {\n  EuiText,\n  EuiButton,\n  EuiSpacer,\n  EuiFlexGroup,\n  EuiFlexItem,\n  EuiToast,\n  EuiCallOut,\n  EuiModal,\n  EuiModalBody,\n  EuiModalFooter,\n  EuiModalHeader,\n  EuiModalHeaderTitle,\n  EuiOverlayMask,\n  EuiCodeBlock,\n} from '../../../../src/components';\n\nexport class ToastGuidelines extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isModalVisible: false,\n    };\n\n    this.closeModal = this.closeModal.bind(this);\n    this.showModal = this.showModal.bind(this);\n  }\n\n  closeModal() {\n    this.setState({ isModalVisible: false });\n  }\n\n  showModal() {\n    this.setState({ isModalVisible: true });\n  }\n\n  render() {\n    let modal;\n\n    if (this.state.isModalVisible) {\n      modal = (\n        <EuiOverlayMask>\n          <EuiModal onClose={this.closeModal}>\n            <EuiModalHeader>\n              <EuiModalHeaderTitle>\n                Your visualization has an error\n              </EuiModalHeaderTitle>\n            </EuiModalHeader>\n\n            <EuiModalBody>\n              <EuiCallOut\n                title=\"The maximum bucket size of 200 was exceeded\"\n                color=\"danger\"\n                size=\"s\"\n                iconType=\"alert\"\n              />\n              <EuiSpacer size=\"s\" />\n              <EuiCodeBlock>\n                {`--- FAKE ERROR ---\nAn extremely long error trace can exist in a modal so you have time\nand space to read it properly. Alternatively just link to a full page.\n---\n                `}\n              </EuiCodeBlock>\n            </EuiModalBody>\n\n            <EuiModalFooter>\n              <EuiButton onClick={this.closeModal} fill>\n                Close\n              </EuiButton>\n            </EuiModalFooter>\n          </EuiModal>\n        </EuiOverlayMask>\n      );\n    }\n    return (\n      <GuidePage title=\"Toast guidelines\" componentLinkTo=\"/display/toast\">\n        <EuiText grow={false} className=\"guideSection__text\">\n          <p>\n            This page documents patterns for using toasts, short messages that\n            appears on the lower right corner and time out after a few seconds.\n            They are a popular design choice because they don&apos;t need to fit\n            in a layout and don&apos;t disrupt the user.\n          </p>\n        </EuiText>\n\n        <GuideRuleTitle>Toast types</GuideRuleTitle>\n\n        <EuiSpacer size=\"xl\" />\n\n        <EuiFlexGroup alignItems=\"center\">\n          <EuiFlexItem grow={false} style={{ minWidth: 120 }}>\n            <EuiToast\n              style={{ width: 300 }}\n              title=\"Your report is complete\"\n              color=\"success\"\n            />\n          </EuiFlexItem>\n\n          <EuiFlexItem>\n            <EuiText className=\"guideSection__text\">\n              <h4>Success toasts indicate that everything worked out</h4>\n              <p>They are the most-commonly used toasts.</p>\n            </EuiText>\n          </EuiFlexItem>\n        </EuiFlexGroup>\n\n        <EuiSpacer />\n\n        <EuiFlexGroup alignItems=\"center\">\n          <EuiFlexItem grow={false} style={{ minWidth: 120 }}>\n            <EuiToast\n              style={{ width: 300 }}\n              title=\"Node 726 is having trouble\"\n              color=\"warning\"\n            />\n          </EuiFlexItem>\n\n          <EuiFlexItem>\n            <EuiText className=\"guideSection__text\">\n              <h4>\n                Warning toasts direct user attention to a potential problem\n              </h4>\n              <p>\n                These toasts work well in monitoring apps when something\n                significant requires action.\n              </p>\n            </EuiText>\n          </EuiFlexItem>\n        </EuiFlexGroup>\n\n        <EuiSpacer />\n\n        <EuiFlexGroup alignItems=\"center\">\n          <EuiFlexItem grow={false} style={{ minWidth: 120 }}>\n            <EuiToast\n              style={{ width: 300 }}\n              title=\"Search failed.  Check your Elasticsearch connection.\"\n              color=\"danger\"\n            />\n          </EuiFlexItem>\n\n          <EuiFlexItem>\n            <EuiText className=\"guideSection__text\">\n              <h4>Error toasts report a problem</h4>\n              <p>\n                An error toast might let users know an action didn&apos;t\n                complete or that a form has errors.\n              </p>\n            </EuiText>\n          </EuiFlexItem>\n        </EuiFlexGroup>\n\n        <EuiSpacer />\n\n        <EuiFlexGroup alignItems=\"center\">\n          <EuiFlexItem grow={false} style={{ minWidth: 120 }}>\n            <div>\n              <EuiToast\n                style={{ width: 300 }}\n                title=\"Please wait while your report is created\"\n                color=\"primary\"\n              />\n            </div>\n          </EuiFlexItem>\n\n          <EuiFlexItem>\n            <EuiText className=\"guideSection__text\">\n              <h4>Info toasts relay neutral information</h4>\n              <p>\n                The default toast, an info toast might notify users about an\n                ongoing action.\n              </p>\n            </EuiText>\n          </EuiFlexItem>\n        </EuiFlexGroup>\n\n        <EuiSpacer />\n\n        <GuideRuleTitle>Use a toast for a timely message</GuideRuleTitle>\n\n        <GuideRule\n          description=\"Toasts are appropriate for short feedback related to a user action.\n          A toast should contain a message about a current action, not a historical action.\">\n          <GuideRuleExample\n            type=\"do\"\n            panel={false}\n            frame\n            text=\"Do. Use a toast for a brief message about the current action.\">\n            <EuiToast\n              style={{ maxWidth: 300 }}\n              title=\"Your folder was moved\"\n              color=\"success\"\n            />\n          </GuideRuleExample>\n\n          <GuideRuleExample\n            panel={false}\n            type=\"dont\"\n            frame\n            text=\"Don't greet users with a toast when they open a page.\">\n            <div style={{ textAlign: 'center' }}>\n              <EuiToast\n                style={{ maxWidth: 300 }}\n                title=\"Haven't seen you in a while\"\n                color=\"primary\"\n              />\n            </div>\n          </GuideRuleExample>\n        </GuideRule>\n\n        <GuideRuleTitle>\n          Most often, it&apos;s a single line of text\n        </GuideRuleTitle>\n\n        <GuideRule\n          description=\"By default, a toast stays on the screen 10 seconds.\n          Users should be able read the message in 6 to 7 seconds.\n          The message should get straight to the point and rarely include more than one line.\n\n          \">\n          <GuideRuleExample\n            panel={false}\n            frame\n            type=\"do\"\n            text=\"Do. A single line of text is readable at a glance.\">\n            <div style={{ textAlign: 'center' }}>\n              <EuiToast\n                style={{ maxWidth: 300 }}\n                title=\"Check your form for errors\"\n                color=\"danger\"\n              />\n            </div>\n          </GuideRuleExample>\n\n          <GuideRuleExample\n            type=\"dont\"\n            panel={false}\n            frame\n            text=\"Don't cram a lot of detail into a toast.\n            These errors should persist in callouts and validations on the form.\n            They don't need to be spelled out in the toast.\">\n            <div>\n              <EuiToast\n                style={{ maxWidth: 300 }}\n                title=\"Your form has errors\"\n                color=\"danger\">\n                <EuiText className=\"guideSection__text\">\n                  <ul>\n                    <li>Username is a required field.</li>\n                    <li>Password must be at least 6 characters long.</li>\n                    <li>Email is a required field.</li>\n                  </ul>\n                </EuiText>\n              </EuiToast>\n            </div>\n          </GuideRuleExample>\n        </GuideRule>\n\n        <GuideRuleTitle>\n          Toasts should only contain a single action\n        </GuideRuleTitle>\n\n        <GuideRule\n          description=\"A toast can have a single action, styled as a standard button.\n          If more actions are needed, or if the action is important enough to\n          interrupt the user, use a modal instead.\">\n          <GuideRuleExample\n            panel={false}\n            type=\"do\"\n            frame\n            text=\"Do. Use only one action per toast and favor a one-word label.\n              Align actions to the right, which follows our button guidelines for\n              usage within restricted width containers.\">\n            <EuiToast\n              style={{ maxWidth: 300 }}\n              color=\"success\"\n              title=\"Your report is complete\">\n              <div style={{ textAlign: 'right' }}>\n                <EuiButton size=\"s\">Download</EuiButton>\n              </div>\n            </EuiToast>\n          </GuideRuleExample>\n\n          <GuideRuleExample\n            type=\"dont\"\n            panel={false}\n            frame\n            text=\"Don't use multiple actions. Don't align buttons in toasts to the left.\n              This message is better in a confirmation modal.\">\n            <EuiToast\n              style={{ maxWidth: 300 }}\n              title=\"All messages will be deleted\"\n              color=\"danger\">\n              <EuiFlexGroup justifyContent=\"flexEnd\" gutterSize=\"s\">\n                <EuiFlexItem grow={false}>\n                  <EuiButton size=\"s\">Cancel</EuiButton>\n                </EuiFlexItem>\n                <EuiFlexItem grow={false}>\n                  <EuiButton size=\"s\" color=\"danger\">\n                    Delete\n                  </EuiButton>\n                </EuiFlexItem>\n              </EuiFlexGroup>\n            </EuiToast>\n          </GuideRuleExample>\n        </GuideRule>\n\n        <EuiSpacer size=\"l\" />\n\n        <GuideRuleTitle>Icons should emphasize actions</GuideRuleTitle>\n\n        <GuideRule description=\"An icon on the left of the message can help define the message type.\">\n          <GuideRuleExample\n            panel={false}\n            type=\"do\"\n            frame\n            text=\"Do. The check icon reinforces that the action succeeded.\n                The alert icon helps users understand the message is an error.\">\n            <div>\n              <EuiToast\n                style={{ maxWidth: 300 }}\n                title=\"Your dashboard was updated\"\n                iconType=\"check\"\n                color=\"success\"\n              />\n\n              <EuiSpacer />\n\n              <EuiToast\n                style={{ maxWidth: 300 }}\n                title=\"A dashboard named 'MyDashboard' already exists\"\n                iconType=\"alert\"\n                color=\"danger\"\n              />\n            </div>\n          </GuideRuleExample>\n\n          <GuideRuleExample\n            type=\"dont\"\n            panel={false}\n            frame\n            text=\"Don't use icons that are hard to understand. They distract from the message.\">\n            <EuiToast\n              color=\"primary\"\n              style={{ maxWidth: 300 }}\n              title=\"Message sent\"\n              iconType=\"help\"\n            />\n          </GuideRuleExample>\n        </GuideRule>\n\n        <GuideRuleTitle>Display one toast at a time</GuideRuleTitle>\n\n        <GuideRule\n          description=\"Users should be able to take\n          in all the details from one toast before the next one arrives.\">\n          <GuideRuleExample\n            panel={false}\n            type=\"do\"\n            frame\n            text=\"Do. Display one toast at a time.\">\n            <EuiToast\n              style={{ maxWidth: 300 }}\n              color=\"primary\"\n              title=\"3 new messages\"\n            />\n          </GuideRuleExample>\n\n          <GuideRuleExample\n            type=\"dont\"\n            panel={false}\n            frame\n            text=\"Don't stack toasts.\">\n            <div>\n              <EuiToast\n                style={{ maxWidth: 300 }}\n                color=\"danger\"\n                title=\"There was a problem with your node\">\n                <div style={{ textAlign: 'right' }}>\n                  <EuiButton size=\"s\">Learn more</EuiButton>\n                </div>\n              </EuiToast>\n              <EuiSpacer />\n\n              <EuiToast\n                color=\"primary\"\n                style={{ maxWidth: 300 }}\n                title=\"3 new messages\"\n              />\n            </div>\n          </GuideRuleExample>\n        </GuideRule>\n\n        <GuideRuleTitle>Keep messages as short as possible</GuideRuleTitle>\n\n        <GuideRule\n          description=\"For common actions such as create, add, delete, remove, and save,\n          include the object type, the object name if available, and the past tense of the action.\n          \">\n          <GuideRuleExample\n            panel={false}\n            type=\"do\"\n            frame\n            text=\"Do. Include the object name if it's not too long.\n            Use single quotation marks around the object name if it helps clarify meaning.\">\n            <div>\n              <EuiToast\n                color=\"success\"\n                style={{ maxWidth: 300 }}\n                title=\"User 'Casey Smith' was added\"\n              />\n            </div>\n          </GuideRuleExample>\n\n          <GuideRuleExample\n            type=\"dont\"\n            panel={false}\n            frame\n            text='Don&apos;t use the generic \"Your object.\"'>\n            <EuiToast\n              color=\"success\"\n              style={{ maxWidth: 300 }}\n              title=\"Your object has been saved\"\n            />\n          </GuideRuleExample>\n        </GuideRule>\n\n        <GuideRule description=\"Don't include the word &quot;successfully.&quot; It's implied.\">\n          <GuideRuleExample\n            panel={false}\n            frame\n            type=\"do\"\n            text=\"Do. Use this format for a success message.\">\n            <EuiToast\n              color=\"success\"\n              style={{ maxWidth: 300 }}\n              title=\"Dashboard 'My_dashboard' was saved\"\n            />\n          </GuideRuleExample>\n\n          <GuideRuleExample\n            type=\"dont\"\n            panel={false}\n            frame\n            text='Don&apos;t include \"successfully.\"'>\n            <EuiToast\n              color=\"success\"\n              style={{ maxWidth: 300 }}\n              title=\"Dashboard 'My_dashboard' was successfully saved\"\n            />\n          </GuideRuleExample>\n        </GuideRule>\n\n        <GuideRule description=\"For a message about multiple objects, include the object count, but not the names of the objects.\">\n          <GuideRuleExample\n            panel={false}\n            type=\"do\"\n            frame\n            text=\"Do. Include the object count.\">\n            <EuiToast\n              color=\"success\"\n              style={{ maxWidth: 300 }}\n              title=\"4 visualizations were deleted\"\n            />\n          </GuideRuleExample>\n          <GuideRuleExample\n            panel={false}\n            type=\"dont\"\n            frame\n            text=\"Don't overwhelm the user by listing the names of all the objects.\">\n            <EuiToast\n              color=\"success\"\n              style={{ maxWidth: 300 }}\n              title=\"Visualization 1, Visualization 2, Visualization 3, and Visualization 4 were deleted\"\n            />\n          </GuideRuleExample>\n        </GuideRule>\n\n        <GuideRuleTitle>\n          Use call-to-action buttons when the content needs more room\n        </GuideRuleTitle>\n\n        <GuideRule\n          description=\"Occassionally the content of a toast is too involved to fit into the constrained space of a toast.\n          This is common in long error messages. In these cases use the toast to deliver the summary of the\n          information and use a button to provide a call-to-action for the full message.\">\n          <GuideRuleExample\n            panel={false}\n            type=\"do\"\n            frame\n            text=\"Use the toast message to provide a summary and a button to link to the full content\">\n            <EuiToast\n              style={{ maxWidth: 300 }}\n              color=\"danger\"\n              title=\"Your visualization has an error\">\n              <p>The maximum bucket size of 200 was exceeded.</p>\n              <div style={{ textAlign: 'right' }}>\n                <EuiButton size=\"s\" color=\"danger\" onClick={this.showModal}>\n                  See the full error\n                </EuiButton>\n                {modal}\n              </div>\n            </EuiToast>\n          </GuideRuleExample>\n\n          <GuideRuleExample\n            type=\"dont\"\n            panel={false}\n            frame\n            text=\"Don't cram a lot of content into the small space of a toast.\">\n            <EuiToast\n              style={{ maxWidth: 300 }}\n              color=\"danger\"\n              title=\"Your visualization has an error\">\n              <EuiCallOut\n                title=\"The maximum bucket size of 200 was exceeded\"\n                color=\"danger\">\n                <p>An extremely long error trace.</p>\n              </EuiCallOut>\n            </EuiToast>\n          </GuideRuleExample>\n        </GuideRule>\n      </GuidePage>\n    );\n  }\n}\n"]}]}