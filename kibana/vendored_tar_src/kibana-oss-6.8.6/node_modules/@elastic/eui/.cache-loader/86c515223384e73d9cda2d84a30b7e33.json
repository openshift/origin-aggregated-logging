{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src-docs/src/views/tables/in_memory/props_info.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src-docs/src/views/tables/in_memory/props_info.js","mtime":1565204169558},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.propsInfo = void 0;\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nvar _objects = require(\"../../../../../src/services/objects\");\n\nvar _props_info = require(\"../basic/props_info\");\n\nvar _props_info2 = require(\"../../search_bar/props_info\");\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar basicTableProps = (0, _objects.omit)(_props_info.propsInfo, ['EuiBasicTable', 'Pagination']);\nvar searchBarProps = (0, _objects.omit)(_props_info2.propsInfo, ['EuiSearchBar']);\n\nvar propsInfo = _objectSpread({\n  EuiBasicTableContainer: {\n    __docgenInfo: {\n      props: {\n        items: {\n          description: 'A list of objects representing the full data set that can be displayed by the table',\n          required: false,\n          type: {\n            name: 'object[]'\n          }\n        },\n        message: {\n          description: \"A message to be shown by the table. When set, the message will be displayed\\n          instead of the configured items\",\n          required: false,\n          type: {\n            name: 'string'\n          }\n        },\n        error: {\n          description: \"An error message to be shown by the table. Takes precedence over the\\n          configured `message` or `items`\",\n          required: false,\n          type: {\n            name: 'string'\n          }\n        },\n        loading: {\n          description: 'When set to `true` the table will be displayed in a \"loading\" mode',\n          required: false,\n          type: {\n            name: 'boolean'\n          }\n        },\n        columns: _props_info.propsInfo.EuiBasicTable.__docgenInfo.props.columns,\n        pagination: {\n          description: 'Enables/disables pagination. Can be an object that configured pagination when enabled',\n          required: false,\n          type: {\n            name: 'boolean | #Pagination'\n          }\n        },\n        sorting: {\n          description: 'Enables/disables sorting. Can be an object that configures initial sorting when enabled',\n          required: false,\n          type: {\n            name: 'boolean | #Sorting'\n          }\n        },\n        allowNeutralSort: {\n          description: 'Enables/disables unsorting of table columns. Defaults to true.',\n          required: false,\n          type: {\n            name: 'boolean'\n          }\n        },\n        search: {\n          description: 'Configures a search bar for the table',\n          required: false,\n          type: {\n            name: 'boolean | #Search'\n          }\n        },\n        selection: _props_info.propsInfo.EuiBasicTable.__docgenInfo.props.selection,\n        onTableChange: {\n          description: \"Callback for when table pagination or sorting is changed. This is meant to\\n          be informational only, and not used to set any state as the in-memory table already\\n          manages this state.\",\n          required: false,\n          type: {\n            name: 'function'\n          }\n        }\n      }\n    }\n  },\n  Pagination: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        initialPageIndex: {\n          description: 'Configures the default page to show',\n          defaultValue: {\n            value: 0\n          },\n          required: false,\n          type: {\n            name: 'number'\n          }\n        },\n        initialPageSize: {\n          description: 'Configures the default page size to show, must be one of \"pageSizeOptions\"',\n          required: false,\n          type: {\n            name: 'number'\n          }\n        },\n        pageSizeOptions: _props_info.propsInfo.Pagination.__docgenInfo.props.pageSizeOptions\n      }\n    }\n  },\n  Search: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        defaultQuery: {\n          description: 'Sets the default query of the search bar',\n          required: false,\n          type: {\n            name: '#Query'\n          }\n        },\n        box: {\n          description: 'Configures the search box of the search bar ',\n          required: false,\n          type: {\n            name: '#SearchBox'\n          }\n        },\n        filters: {\n          description: 'Configures the search filters of the search bar ',\n          required: false,\n          type: {\n            name: '#SearchFilters'\n          }\n        },\n        onChange: {\n          description: \"Callback for when the search bar value changes. By default this will prevent in-memory\\n          searching. Return `true` to allow in-memory searching.\",\n          required: false,\n          type: {\n            name: 'function'\n          }\n        },\n        executeQueryOptions: {\n          description: \"Options that are passed directly into the Query.execute call which is\\n          performed whenever the search bar query changed.\",\n          required: false,\n          type: {\n            name: '#Query'\n          }\n        }\n      }\n    }\n  }\n}, basicTableProps, searchBarProps);\n\nexports.propsInfo = propsInfo;",{"version":3,"sources":["/Users/chanderprall/projects/eui/src-docs/src/views/tables/in_memory/props_info.js"],"names":["basicTableProps","basicPropsInfo","searchBarProps","searchBarPropsInfo","propsInfo","EuiBasicTableContainer","__docgenInfo","props","items","description","required","type","name","message","error","loading","columns","EuiBasicTable","pagination","sorting","allowNeutralSort","search","selection","onTableChange","Pagination","_euiObjectType","initialPageIndex","defaultValue","value","initialPageSize","pageSizeOptions","Search","defaultQuery","box","filters","onChange","executeQueryOptions"],"mappings":"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","sourcesContent":["import { omit } from '../../../../../src/services/objects';\nimport { propsInfo as basicPropsInfo } from '../basic/props_info';\nimport { propsInfo as searchBarPropsInfo } from '../../search_bar/props_info';\n\nconst basicTableProps = omit(basicPropsInfo, ['EuiBasicTable', 'Pagination']);\nconst searchBarProps = omit(searchBarPropsInfo, ['EuiSearchBar']);\n\nexport const propsInfo = {\n  EuiBasicTableContainer: {\n    __docgenInfo: {\n      props: {\n        items: {\n          description:\n            'A list of objects representing the full data set that can be displayed by the table',\n          required: false,\n          type: { name: 'object[]' },\n        },\n        message: {\n          description: `A message to be shown by the table. When set, the message will be displayed\n          instead of the configured items`,\n          required: false,\n          type: { name: 'string' },\n        },\n        error: {\n          description: `An error message to be shown by the table. Takes precedence over the\n          configured \\`message\\` or \\`items\\``,\n          required: false,\n          type: { name: 'string' },\n        },\n        loading: {\n          description:\n            'When set to `true` the table will be displayed in a \"loading\" mode',\n          required: false,\n          type: { name: 'boolean' },\n        },\n        columns: basicPropsInfo.EuiBasicTable.__docgenInfo.props.columns,\n        pagination: {\n          description:\n            'Enables/disables pagination. Can be an object that configured pagination when enabled',\n          required: false,\n          type: { name: 'boolean | #Pagination' },\n        },\n        sorting: {\n          description:\n            'Enables/disables sorting. Can be an object that configures initial sorting when enabled',\n          required: false,\n          type: { name: 'boolean | #Sorting' },\n        },\n        allowNeutralSort: {\n          description:\n            'Enables/disables unsorting of table columns. Defaults to true.',\n          required: false,\n          type: { name: 'boolean' },\n        },\n        search: {\n          description: 'Configures a search bar for the table',\n          required: false,\n          type: { name: 'boolean | #Search' },\n        },\n        selection: basicPropsInfo.EuiBasicTable.__docgenInfo.props.selection,\n        onTableChange: {\n          description: `Callback for when table pagination or sorting is changed. This is meant to\n          be informational only, and not used to set any state as the in-memory table already\n          manages this state.`,\n          required: false,\n          type: { name: 'function' },\n        },\n      },\n    },\n  },\n\n  Pagination: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        initialPageIndex: {\n          description: 'Configures the default page to show',\n          defaultValue: { value: 0 },\n          required: false,\n          type: { name: 'number' },\n        },\n        initialPageSize: {\n          description:\n            'Configures the default page size to show, must be one of \"pageSizeOptions\"',\n          required: false,\n          type: { name: 'number' },\n        },\n        pageSizeOptions:\n          basicPropsInfo.Pagination.__docgenInfo.props.pageSizeOptions,\n      },\n    },\n  },\n\n  Search: {\n    __docgenInfo: {\n      _euiObjectType: 'type',\n      props: {\n        defaultQuery: {\n          description: 'Sets the default query of the search bar',\n          required: false,\n          type: { name: '#Query' },\n        },\n        box: {\n          description: 'Configures the search box of the search bar ',\n          required: false,\n          type: { name: '#SearchBox' },\n        },\n        filters: {\n          description: 'Configures the search filters of the search bar ',\n          required: false,\n          type: { name: '#SearchFilters' },\n        },\n        onChange: {\n          description: `Callback for when the search bar value changes. By default this will prevent in-memory\n          searching. Return \\`true\\` to allow in-memory searching.`,\n          required: false,\n          type: { name: 'function' },\n        },\n        executeQueryOptions: {\n          description: `Options that are passed directly into the Query.execute call which is\n          performed whenever the search bar query changed.`,\n          required: false,\n          type: { name: '#Query' },\n        },\n      },\n    },\n  },\n\n  ...basicTableProps,\n  ...searchBarProps,\n};\n"]}]}