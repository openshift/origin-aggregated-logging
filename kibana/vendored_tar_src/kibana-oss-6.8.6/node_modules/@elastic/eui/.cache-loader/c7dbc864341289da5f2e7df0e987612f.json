{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/search_bar/query/date_value.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/search_bar/query/date_value.js","mtime":1566922762740},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dateValueParser = exports.dateValue = exports.isDateValue = exports.dateValuesEqual = exports.DATE_TYPE = void 0;\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nvar _predicate = require(\"../../../services/predicate\");\n\nvar _date_format = require(\"./date_format\");\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar DATE_TYPE = 'date';\nexports.DATE_TYPE = DATE_TYPE;\n\nvar dateValuesEqual = function dateValuesEqual(v1, v2) {\n  return v1.raw === v2.raw && v1.granularity === v2.granularity && v1.text === v2.text;\n};\n\nexports.dateValuesEqual = dateValuesEqual;\n\nvar isDateValue = function isDateValue(value) {\n  return !!value && value.type === DATE_TYPE && !!value.raw && !!value.text && !!value.resolve;\n};\n\nexports.isDateValue = isDateValue;\n\nvar dateValue = function dateValue(raw, granularity) {\n  var dateFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _date_format.dateFormat;\n\n  if (!raw) {\n    return undefined;\n  }\n\n  if ((0, _predicate.isDateLike)(raw)) {\n    return {\n      type: DATE_TYPE,\n      raw: raw,\n      granularity: granularity,\n      text: dateFormat.print(raw),\n      resolve: function resolve() {\n        return (0, _moment.default)(raw);\n      }\n    };\n  }\n\n  if ((0, _predicate.isNumber)(raw)) {\n    return {\n      type: DATE_TYPE,\n      raw: raw,\n      granularity: granularity,\n      text: raw.toString(),\n      resolve: function resolve() {\n        return (0, _moment.default)(raw);\n      }\n    };\n  }\n\n  var text = raw.toString();\n  return {\n    type: DATE_TYPE,\n    raw: raw,\n    granularity: granularity,\n    text: text,\n    resolve: function resolve() {\n      return dateFormat.parse(text);\n    }\n  };\n};\n\nexports.dateValue = dateValue;\n\nvar dateValueParser = function dateValueParser() {\n  var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _date_format.dateFormat;\n  return function (text) {\n    var parsed = format.parse(text);\n    return dateValue(text, (0, _date_format.dateGranularity)(parsed), format);\n  };\n};\n\nexports.dateValueParser = dateValueParser;",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/search_bar/query/date_value.js"],"names":["DATE_TYPE","dateValuesEqual","v1","v2","raw","granularity","text","isDateValue","value","type","resolve","dateValue","dateFormat","defaultDateFormat","undefined","print","toString","parse","dateValueParser","format","parsed"],"mappings":";;;;;;;;;AAAA;;AACA;;AAIA;;;;AAEO,IAAMA,SAAS,GAAG,MAAlB;;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,EAAD,EAAKC,EAAL,EAAY;AACzC,SACED,EAAE,CAACE,GAAH,KAAWD,EAAE,CAACC,GAAd,IACAF,EAAE,CAACG,WAAH,KAAmBF,EAAE,CAACE,WADtB,IAEAH,EAAE,CAACI,IAAH,KAAYH,EAAE,CAACG,IAHjB;AAKD,CANM;;;;AAQA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,KAAK,EAAI;AAClC,SACE,CAAC,CAACA,KAAF,IACAA,KAAK,CAACC,IAAN,KAAeT,SADf,IAEA,CAAC,CAACQ,KAAK,CAACJ,GAFR,IAGA,CAAC,CAACI,KAAK,CAACF,IAHR,IAIA,CAAC,CAACE,KAAK,CAACE,OALV;AAOD,CARM;;;;AAUA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACP,GAAD,EAAMC,WAAN,EAAsD;AAAA,MAAnCO,UAAmC,uEAAtBC,uBAAsB;;AAC7E,MAAI,CAACT,GAAL,EAAU;AACR,WAAOU,SAAP;AACD;;AACD,MAAI,2BAAWV,GAAX,CAAJ,EAAqB;AACnB,WAAO;AACLK,MAAAA,IAAI,EAAET,SADD;AAELI,MAAAA,GAAG,EAAHA,GAFK;AAGLC,MAAAA,WAAW,EAAXA,WAHK;AAILC,MAAAA,IAAI,EAAEM,UAAU,CAACG,KAAX,CAAiBX,GAAjB,CAJD;AAKLM,MAAAA,OAAO,EAAE;AAAA,eAAM,qBAAON,GAAP,CAAN;AAAA;AALJ,KAAP;AAOD;;AACD,MAAI,yBAASA,GAAT,CAAJ,EAAmB;AACjB,WAAO;AACLK,MAAAA,IAAI,EAAET,SADD;AAELI,MAAAA,GAAG,EAAHA,GAFK;AAGLC,MAAAA,WAAW,EAAXA,WAHK;AAILC,MAAAA,IAAI,EAAEF,GAAG,CAACY,QAAJ,EAJD;AAKLN,MAAAA,OAAO,EAAE;AAAA,eAAM,qBAAON,GAAP,CAAN;AAAA;AALJ,KAAP;AAOD;;AACD,MAAME,IAAI,GAAGF,GAAG,CAACY,QAAJ,EAAb;AACA,SAAO;AACLP,IAAAA,IAAI,EAAET,SADD;AAELI,IAAAA,GAAG,EAAHA,GAFK;AAGLC,IAAAA,WAAW,EAAXA,WAHK;AAILC,IAAAA,IAAI,EAAJA,IAJK;AAKLI,IAAAA,OAAO,EAAE;AAAA,aAAME,UAAU,CAACK,KAAX,CAAiBX,IAAjB,CAAN;AAAA;AALJ,GAAP;AAOD,CA9BM;;;;AAgCA,IAAMY,eAAe,GAAG,SAAlBA,eAAkB,GAAgC;AAAA,MAA/BC,MAA+B,uEAAtBN,uBAAsB;AAC7D,SAAO,UAAAP,IAAI,EAAI;AACb,QAAMc,MAAM,GAAGD,MAAM,CAACF,KAAP,CAAaX,IAAb,CAAf;AACA,WAAOK,SAAS,CAACL,IAAD,EAAO,kCAAgBc,MAAhB,CAAP,EAAgCD,MAAhC,CAAhB;AACD,GAHD;AAID,CALM","sourcesContent":["import { isDateLike, isNumber } from '../../../services/predicate';\nimport {\n  dateFormat as defaultDateFormat,\n  dateGranularity,\n} from './date_format';\nimport moment from 'moment';\n\nexport const DATE_TYPE = 'date';\n\nexport const dateValuesEqual = (v1, v2) => {\n  return (\n    v1.raw === v2.raw &&\n    v1.granularity === v2.granularity &&\n    v1.text === v2.text\n  );\n};\n\nexport const isDateValue = value => {\n  return (\n    !!value &&\n    value.type === DATE_TYPE &&\n    !!value.raw &&\n    !!value.text &&\n    !!value.resolve\n  );\n};\n\nexport const dateValue = (raw, granularity, dateFormat = defaultDateFormat) => {\n  if (!raw) {\n    return undefined;\n  }\n  if (isDateLike(raw)) {\n    return {\n      type: DATE_TYPE,\n      raw,\n      granularity,\n      text: dateFormat.print(raw),\n      resolve: () => moment(raw),\n    };\n  }\n  if (isNumber(raw)) {\n    return {\n      type: DATE_TYPE,\n      raw,\n      granularity,\n      text: raw.toString(),\n      resolve: () => moment(raw),\n    };\n  }\n  const text = raw.toString();\n  return {\n    type: DATE_TYPE,\n    raw,\n    granularity,\n    text,\n    resolve: () => dateFormat.parse(text),\n  };\n};\n\nexport const dateValueParser = (format = defaultDateFormat) => {\n  return text => {\n    const parsed = format.parse(text);\n    return dateValue(text, dateGranularity(parsed), format);\n  };\n};\n"]}]}