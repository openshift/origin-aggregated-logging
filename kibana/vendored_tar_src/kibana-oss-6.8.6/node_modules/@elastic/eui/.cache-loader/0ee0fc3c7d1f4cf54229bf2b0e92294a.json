{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/search_bar/query/date_format.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/search_bar/query/date_format.js","mtime":1565204169985},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dateFormat = exports.dateGranularity = exports.printIso8601 = exports.Granularity = void 0;\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.object.freeze\");\n\nvar _format = require(\"../../../services/format\");\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar utc = _moment.default.utc;\nvar GRANULARITY_KEY = '__eui_granularity';\nvar FORMAT_KEY = '__eui_format';\nvar Granularity = Object.freeze({\n  DAY: {\n    es: 'd',\n    js: 'day',\n    isSame: function isSame(d1, d2) {\n      return d1.isSame(d2, 'day');\n    },\n    start: function start(date) {\n      return date.startOf('day');\n    },\n    startOfNext: function startOfNext(date) {\n      return date.add(1, 'days').startOf('day');\n    },\n    iso8601: function iso8601(date) {\n      return date.format('YYYY-MM-DD');\n    }\n  },\n  WEEK: {\n    es: 'w',\n    js: 'week',\n    isSame: function isSame(d1, d2) {\n      return d1.isSame(d2, 'week');\n    },\n    start: function start(date) {\n      return date.startOf('week');\n    },\n    startOfNext: function startOfNext(date) {\n      return date.add(1, 'weeks').startOf('week');\n    },\n    iso8601: function iso8601(date) {\n      return date.format('YYYY-MM-DD');\n    }\n  },\n  MONTH: {\n    es: 'M',\n    js: 'month',\n    isSame: function isSame(d1, d2) {\n      return d1.isSame(d2, 'month');\n    },\n    start: function start(date) {\n      return date.startOf('month');\n    },\n    startOfNext: function startOfNext(date) {\n      return date.add(1, 'months').startOf('month');\n    },\n    iso8601: function iso8601(date) {\n      return date.format('YYYY-MM');\n    }\n  },\n  YEAR: {\n    es: 'y',\n    js: 'year',\n    isSame: function isSame(d1, d2) {\n      return d1.isSame(d2, 'year');\n    },\n    start: function start(date) {\n      return date.startOf('year');\n    },\n    startOfNext: function startOfNext(date) {\n      return date.add(1, 'years').startOf('year');\n    },\n    iso8601: function iso8601(date) {\n      return date.format('YYYY');\n    }\n  }\n});\nexports.Granularity = Granularity;\n\nvar parseTime = function parseTime(value) {\n  var parsed = utc(value, ['HH:mm', 'H:mm', 'H:mm', 'h:mm a', 'h:mm A', 'hh:mm a', 'hh:mm A'], true);\n\n  if (parsed.isValid()) {\n    parsed[FORMAT_KEY] = parsed.creationData().format;\n    return parsed;\n  }\n};\n\nvar parseDay = function parseDay(value) {\n  var parsed = null;\n\n  switch (value.toLowerCase()) {\n    case 'today':\n      parsed = utc().startOf('day');\n      parsed[GRANULARITY_KEY] = Granularity.DAY;\n      parsed[FORMAT_KEY] = value;\n      return parsed;\n\n    case 'yesterday':\n      parsed = utc().subtract(1, 'days').startOf('day');\n      parsed[GRANULARITY_KEY] = Granularity.DAY;\n      parsed[FORMAT_KEY] = value;\n      return parsed;\n\n    case 'tomorrow':\n      parsed = utc().add(1, 'days').startOf('day');\n      parsed[GRANULARITY_KEY] = Granularity.DAY;\n      parsed[FORMAT_KEY] = value;\n      return parsed;\n\n    default:\n      parsed = utc(value, ['ddd', 'dddd', 'D MMM YY', 'Do MMM YY', 'D MMM YYYY', 'Do MMM YYYY', 'DD MMM YY', 'DD MMM YYYY', 'D MMMM YY', 'Do MMMM YY', 'D MMMM YYYY', 'Do MMMM YYYY', 'DD MMMM YY', 'DD MMMM YYYY', 'YYYY-MM-DD'], true);\n\n      if (parsed.isValid()) {\n        try {\n          parsed[GRANULARITY_KEY] = Granularity.DAY;\n          parsed[FORMAT_KEY] = parsed.creationData().format;\n          return parsed;\n        } catch (e) {\n          console.error(e);\n        }\n      }\n\n  }\n};\n\nvar parseWeek = function parseWeek(value) {\n  var parsed = null;\n\n  switch (value.toLowerCase()) {\n    case 'this week':\n      parsed = utc();\n      break;\n\n    case 'last week':\n      parsed = utc().subtract(1, 'weeks');\n      break;\n\n    case 'next week':\n      parsed = utc().add(1, 'weeks');\n      break;\n\n    default:\n      var match = value.match(/week ([1-9][1-9]?)/i);\n\n      if (match) {\n        var weekNr = Number(match[1]);\n        parsed = utc().weeks(weekNr);\n      }\n\n  }\n\n  if (parsed && parsed.isValid()) {\n    parsed = parsed.startOf('week');\n    parsed[GRANULARITY_KEY] = Granularity.WEEK;\n    parsed[FORMAT_KEY] = parsed.creationData().format;\n    return parsed;\n  }\n};\n\nvar parseMonth = function parseMonth(value) {\n  var parsed = null;\n\n  switch (value.toLowerCase()) {\n    case 'this month':\n      parsed = utc();\n      break;\n\n    case 'next month':\n      parsed = utc().endOf('month').add(2, 'days');\n      break;\n\n    case 'last month':\n      parsed = utc().startOf('month').subtract(2, 'days');\n      break;\n\n    default:\n      parsed = utc(value, ['MMM', 'MMMM'], true);\n\n      if (parsed.isValid()) {\n        var now = utc();\n        parsed.year(now.year);\n      } else {\n        parsed = utc(value, ['MMM YY', 'MMMM YY', 'MMM YYYY', 'MMMM YYYY', 'YYYY MMM', 'YYYY MMMM', 'YYYY-MM'], true);\n      }\n\n  }\n\n  if (parsed.isValid()) {\n    parsed.startOf('month');\n    parsed[GRANULARITY_KEY] = Granularity.MONTH;\n    parsed[FORMAT_KEY] = parsed.creationData().format;\n    return parsed;\n  }\n};\n\nvar parseYear = function parseYear(value) {\n  var parsed = null;\n\n  switch (value.toLowerCase()) {\n    case 'this year':\n      parsed = utc().startOf('year');\n      parsed[GRANULARITY_KEY] = Granularity.YEAR;\n      parsed[FORMAT_KEY] = value;\n      return parsed;\n\n    case 'next year':\n      parsed = utc().endOf('year').add(2, 'months').startOf('year');\n      parsed[GRANULARITY_KEY] = Granularity.YEAR;\n      parsed[FORMAT_KEY] = value;\n      return parsed;\n\n    case 'last year':\n      parsed = utc().startOf('year').subtract(2, 'months').startOf('year');\n      parsed[GRANULARITY_KEY] = Granularity.YEAR;\n      parsed[FORMAT_KEY] = value;\n      return parsed;\n\n    default:\n      parsed = utc(value, ['YY', 'YYYY'], true);\n\n      if (parsed.isValid()) {\n        parsed[GRANULARITY_KEY] = Granularity.YEAR;\n        parsed[FORMAT_KEY] = parsed.creationData().format;\n        return parsed;\n      }\n\n  }\n};\n\nvar parseDefault = function parseDefault(value) {\n  var parsed = utc(value, [_moment.default.ISO_8601, _moment.default.RFC_2822, 'DD MMM YY HH:mm', 'DD MMM YY HH:mm:ss', 'DD MMM YYYY HH:mm', 'DD MMM YYYY HH:mm:ss', 'DD MMMM YYYY HH:mm', 'DD MMMM YYYY HH:mm:ss'], true);\n\n  if (!parsed.isValid()) {\n    var time = Date.parse(value);\n    var offset = (0, _moment.default)(time).utcOffset();\n    parsed = utc(time);\n    parsed.add(offset, 'minutes');\n  }\n\n  if (parsed.isValid()) {\n    parsed[FORMAT_KEY] = parsed.creationData().format;\n  }\n\n  return parsed;\n};\n\nvar printDay = function printDay(now, date, format) {\n  if (format.match(/yesterday|tomorrow|today/i)) {\n    if (now.isSame(date, 'day')) {\n      return 'today';\n    }\n\n    if (now.subtract(1, 'day').isSame(date, 'day')) {\n      return 'yesterday';\n    }\n\n    if (now.add(1, 'day').isSame(date, 'day')) {\n      return 'tomorrow';\n    }\n\n    if (now.isSame(date, 'week')) {\n      return date.format('dddd');\n    }\n  }\n\n  return date.format(format);\n};\n\nvar printWeek = function printWeek(now, date, format) {\n  if (format.match(/(?:this|next|last) week/i)) {\n    if (now.isSame(date, 'week')) {\n      return 'This Week';\n    }\n\n    if (now.startOf('week').subtract(2, 'days').isSame(date, 'week')) {\n      return 'Last Week';\n    }\n\n    if (now.endOf('week').add(2, 'days').isSame(date, 'week')) {\n      return 'Next Week';\n    }\n  }\n\n  return date.format(format);\n};\n\nvar printMonth = function printMonth(now, date, format) {\n  if (format.match(/(?:this|next|last) month/i)) {\n    if (now.isSame(date, 'month')) {\n      return 'This Month';\n    }\n\n    if (now.startOf('month').subtract(2, 'days').isSame(date, 'month')) {\n      return 'Last Month';\n    }\n\n    if (now.endOf('month').add(2, 'days').isSame(date, 'month')) {\n      return 'Next Month';\n    }\n  }\n\n  return date.format(format);\n};\n\nvar printYear = function printYear(now, date, format) {\n  if (format.match(/(?:this|next|last) year/i)) {\n    if (now.isSame(date, 'year')) {\n      return 'This Year';\n    }\n\n    if (now.startOf('year').subtract(2, 'months').isSame(date, 'year')) {\n      return 'Last Year';\n    }\n\n    if (now.endOf('year').add(2, 'months').isSame(date, 'year')) {\n      return 'Next Year';\n    }\n  }\n\n  return date.format(format);\n};\n\nvar printIso8601 = function printIso8601(value) {\n  return utc(value).format(_moment.default.defaultFormatUtc);\n};\n\nexports.printIso8601 = printIso8601;\n\nvar dateGranularity = function dateGranularity(parsedDate) {\n  return parsedDate[GRANULARITY_KEY];\n};\n\nexports.dateGranularity = dateGranularity;\nvar dateFormat = Object.freeze({\n  parse: function parse(value) {\n    var parsed = parseDay(value) || parseMonth(value) || parseYear(value) || parseWeek(value) || parseTime(value) || parseDefault(value);\n\n    if (!parsed) {\n      throw new Error(\"could not parse [\".concat(value, \"] as date\"));\n    }\n\n    return parsed;\n  },\n  print: function print(date) {\n    var defaultGranularity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n    date = _moment.default.isMoment(date) ? date : utc(date);\n    var now = utc();\n    var format = date[FORMAT_KEY];\n\n    if (!format) {\n      return date.format(_format.dateFormatAliases.iso8601);\n    }\n\n    var granularity = date[GRANULARITY_KEY] || defaultGranularity;\n\n    switch (granularity) {\n      case Granularity.DAY:\n        return printDay(now, date, format);\n\n      case Granularity.WEEK:\n        return printWeek(now, date, format);\n\n      case Granularity.MONTH:\n        return printMonth(now, date, format);\n\n      case Granularity.YEAR:\n        return printYear(now, date, format);\n\n      default:\n        return date.format(format);\n    }\n  }\n});\nexports.dateFormat = dateFormat;",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/search_bar/query/date_format.js"],"names":["utc","moment","GRANULARITY_KEY","FORMAT_KEY","Granularity","Object","freeze","DAY","es","js","isSame","d1","d2","start","date","startOf","startOfNext","add","iso8601","format","WEEK","MONTH","YEAR","parseTime","value","parsed","isValid","creationData","parseDay","toLowerCase","subtract","e","console","error","parseWeek","match","weekNr","Number","weeks","parseMonth","endOf","now","year","parseYear","parseDefault","ISO_8601","RFC_2822","time","Date","parse","offset","utcOffset","printDay","printWeek","printMonth","printYear","printIso8601","defaultFormatUtc","dateGranularity","parsedDate","dateFormat","Error","print","defaultGranularity","undefined","isMoment","dateFormatAliases","granularity"],"mappings":"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","sourcesContent":["import { dateFormatAliases } from '../../../services/format';\nimport moment from 'moment';\n\nconst utc = moment.utc;\n\nconst GRANULARITY_KEY = '__eui_granularity';\nconst FORMAT_KEY = '__eui_format';\n\nexport const Granularity = Object.freeze({\n  DAY: {\n    es: 'd',\n    js: 'day',\n    isSame: (d1, d2) => d1.isSame(d2, 'day'),\n    start: date => date.startOf('day'),\n    startOfNext: date => date.add(1, 'days').startOf('day'),\n    iso8601: date => date.format('YYYY-MM-DD'),\n  },\n  WEEK: {\n    es: 'w',\n    js: 'week',\n    isSame: (d1, d2) => d1.isSame(d2, 'week'),\n    start: date => date.startOf('week'),\n    startOfNext: date => date.add(1, 'weeks').startOf('week'),\n    iso8601: date => date.format('YYYY-MM-DD'),\n  },\n  MONTH: {\n    es: 'M',\n    js: 'month',\n    isSame: (d1, d2) => d1.isSame(d2, 'month'),\n    start: date => date.startOf('month'),\n    startOfNext: date => date.add(1, 'months').startOf('month'),\n    iso8601: date => date.format('YYYY-MM'),\n  },\n  YEAR: {\n    es: 'y',\n    js: 'year',\n    isSame: (d1, d2) => d1.isSame(d2, 'year'),\n    start: date => date.startOf('year'),\n    startOfNext: date => date.add(1, 'years').startOf('year'),\n    iso8601: date => date.format('YYYY'),\n  },\n});\n\nconst parseTime = value => {\n  const parsed = utc(\n    value,\n    ['HH:mm', 'H:mm', 'H:mm', 'h:mm a', 'h:mm A', 'hh:mm a', 'hh:mm A'],\n    true\n  );\n  if (parsed.isValid()) {\n    parsed[FORMAT_KEY] = parsed.creationData().format;\n    return parsed;\n  }\n};\n\nconst parseDay = value => {\n  let parsed = null;\n  switch (value.toLowerCase()) {\n    case 'today':\n      parsed = utc().startOf('day');\n      parsed[GRANULARITY_KEY] = Granularity.DAY;\n      parsed[FORMAT_KEY] = value;\n      return parsed;\n    case 'yesterday':\n      parsed = utc()\n        .subtract(1, 'days')\n        .startOf('day');\n      parsed[GRANULARITY_KEY] = Granularity.DAY;\n      parsed[FORMAT_KEY] = value;\n      return parsed;\n    case 'tomorrow':\n      parsed = utc()\n        .add(1, 'days')\n        .startOf('day');\n      parsed[GRANULARITY_KEY] = Granularity.DAY;\n      parsed[FORMAT_KEY] = value;\n      return parsed;\n    default:\n      parsed = utc(\n        value,\n        [\n          'ddd',\n          'dddd',\n          'D MMM YY',\n          'Do MMM YY',\n          'D MMM YYYY',\n          'Do MMM YYYY',\n          'DD MMM YY',\n          'DD MMM YYYY',\n          'D MMMM YY',\n          'Do MMMM YY',\n          'D MMMM YYYY',\n          'Do MMMM YYYY',\n          'DD MMMM YY',\n          'DD MMMM YYYY',\n          'YYYY-MM-DD',\n        ],\n        true\n      );\n      if (parsed.isValid()) {\n        try {\n          parsed[GRANULARITY_KEY] = Granularity.DAY;\n          parsed[FORMAT_KEY] = parsed.creationData().format;\n          return parsed;\n        } catch (e) {\n          console.error(e);\n        }\n      }\n  }\n};\n\nconst parseWeek = value => {\n  let parsed = null;\n  switch (value.toLowerCase()) {\n    case 'this week':\n      parsed = utc();\n      break;\n    case 'last week':\n      parsed = utc().subtract(1, 'weeks');\n      break;\n    case 'next week':\n      parsed = utc().add(1, 'weeks');\n      break;\n    default:\n      const match = value.match(/week ([1-9][1-9]?)/i);\n      if (match) {\n        const weekNr = Number(match[1]);\n        parsed = utc().weeks(weekNr);\n      }\n  }\n  if (parsed && parsed.isValid()) {\n    parsed = parsed.startOf('week');\n    parsed[GRANULARITY_KEY] = Granularity.WEEK;\n    parsed[FORMAT_KEY] = parsed.creationData().format;\n    return parsed;\n  }\n};\n\nconst parseMonth = value => {\n  let parsed = null;\n  switch (value.toLowerCase()) {\n    case 'this month':\n      parsed = utc();\n      break;\n    case 'next month':\n      parsed = utc()\n        .endOf('month')\n        .add(2, 'days');\n      break;\n    case 'last month':\n      parsed = utc()\n        .startOf('month')\n        .subtract(2, 'days');\n      break;\n    default:\n      parsed = utc(value, ['MMM', 'MMMM'], true);\n      if (parsed.isValid()) {\n        const now = utc();\n        parsed.year(now.year);\n      } else {\n        parsed = utc(\n          value,\n          [\n            'MMM YY',\n            'MMMM YY',\n            'MMM YYYY',\n            'MMMM YYYY',\n            'YYYY MMM',\n            'YYYY MMMM',\n            'YYYY-MM',\n          ],\n          true\n        );\n      }\n  }\n  if (parsed.isValid()) {\n    parsed.startOf('month');\n    parsed[GRANULARITY_KEY] = Granularity.MONTH;\n    parsed[FORMAT_KEY] = parsed.creationData().format;\n    return parsed;\n  }\n};\n\nconst parseYear = value => {\n  let parsed = null;\n  switch (value.toLowerCase()) {\n    case 'this year':\n      parsed = utc().startOf('year');\n      parsed[GRANULARITY_KEY] = Granularity.YEAR;\n      parsed[FORMAT_KEY] = value;\n      return parsed;\n    case 'next year':\n      parsed = utc()\n        .endOf('year')\n        .add(2, 'months')\n        .startOf('year');\n      parsed[GRANULARITY_KEY] = Granularity.YEAR;\n      parsed[FORMAT_KEY] = value;\n      return parsed;\n    case 'last year':\n      parsed = utc()\n        .startOf('year')\n        .subtract(2, 'months')\n        .startOf('year');\n      parsed[GRANULARITY_KEY] = Granularity.YEAR;\n      parsed[FORMAT_KEY] = value;\n      return parsed;\n    default:\n      parsed = utc(value, ['YY', 'YYYY'], true);\n      if (parsed.isValid()) {\n        parsed[GRANULARITY_KEY] = Granularity.YEAR;\n        parsed[FORMAT_KEY] = parsed.creationData().format;\n        return parsed;\n      }\n  }\n};\n\nconst parseDefault = value => {\n  let parsed = utc(\n    value,\n    [\n      moment.ISO_8601,\n      moment.RFC_2822,\n      'DD MMM YY HH:mm',\n      'DD MMM YY HH:mm:ss',\n      'DD MMM YYYY HH:mm',\n      'DD MMM YYYY HH:mm:ss',\n      'DD MMMM YYYY HH:mm',\n      'DD MMMM YYYY HH:mm:ss',\n    ],\n    true\n  );\n  if (!parsed.isValid()) {\n    const time = Date.parse(value);\n    const offset = moment(time).utcOffset();\n    parsed = utc(time);\n    parsed.add(offset, 'minutes');\n  }\n  if (parsed.isValid()) {\n    parsed[FORMAT_KEY] = parsed.creationData().format;\n  }\n  return parsed;\n};\n\nconst printDay = (now, date, format) => {\n  if (format.match(/yesterday|tomorrow|today/i)) {\n    if (now.isSame(date, 'day')) {\n      return 'today';\n    }\n    if (now.subtract(1, 'day').isSame(date, 'day')) {\n      return 'yesterday';\n    }\n    if (now.add(1, 'day').isSame(date, 'day')) {\n      return 'tomorrow';\n    }\n    if (now.isSame(date, 'week')) {\n      return date.format('dddd');\n    }\n  }\n  return date.format(format);\n};\n\nconst printWeek = (now, date, format) => {\n  if (format.match(/(?:this|next|last) week/i)) {\n    if (now.isSame(date, 'week')) {\n      return 'This Week';\n    }\n    if (\n      now\n        .startOf('week')\n        .subtract(2, 'days')\n        .isSame(date, 'week')\n    ) {\n      return 'Last Week';\n    }\n    if (\n      now\n        .endOf('week')\n        .add(2, 'days')\n        .isSame(date, 'week')\n    ) {\n      return 'Next Week';\n    }\n  }\n  return date.format(format);\n};\n\nconst printMonth = (now, date, format) => {\n  if (format.match(/(?:this|next|last) month/i)) {\n    if (now.isSame(date, 'month')) {\n      return 'This Month';\n    }\n    if (\n      now\n        .startOf('month')\n        .subtract(2, 'days')\n        .isSame(date, 'month')\n    ) {\n      return 'Last Month';\n    }\n    if (\n      now\n        .endOf('month')\n        .add(2, 'days')\n        .isSame(date, 'month')\n    ) {\n      return 'Next Month';\n    }\n  }\n  return date.format(format);\n};\n\nconst printYear = (now, date, format) => {\n  if (format.match(/(?:this|next|last) year/i)) {\n    if (now.isSame(date, 'year')) {\n      return 'This Year';\n    }\n    if (\n      now\n        .startOf('year')\n        .subtract(2, 'months')\n        .isSame(date, 'year')\n    ) {\n      return 'Last Year';\n    }\n    if (\n      now\n        .endOf('year')\n        .add(2, 'months')\n        .isSame(date, 'year')\n    ) {\n      return 'Next Year';\n    }\n  }\n  return date.format(format);\n};\n\nexport const printIso8601 = value => {\n  return utc(value).format(moment.defaultFormatUtc);\n};\n\nexport const dateGranularity = parsedDate => {\n  return parsedDate[GRANULARITY_KEY];\n};\n\nexport const dateFormat = Object.freeze({\n  parse(value) {\n    const parsed =\n      parseDay(value) ||\n      parseMonth(value) ||\n      parseYear(value) ||\n      parseWeek(value) ||\n      parseTime(value) ||\n      parseDefault(value);\n    if (!parsed) {\n      throw new Error(`could not parse [${value}] as date`);\n    }\n    return parsed;\n  },\n\n  print(date, defaultGranularity = undefined) {\n    date = moment.isMoment(date) ? date : utc(date);\n    const now = utc();\n    const format = date[FORMAT_KEY];\n    if (!format) {\n      return date.format(dateFormatAliases.iso8601);\n    }\n    const granularity = date[GRANULARITY_KEY] || defaultGranularity;\n    switch (granularity) {\n      case Granularity.DAY:\n        return printDay(now, date, format);\n      case Granularity.WEEK:\n        return printWeek(now, date, format);\n      case Granularity.MONTH:\n        return printMonth(now, date, format);\n      case Granularity.YEAR:\n        return printYear(now, date, format);\n      default:\n        return date.format(format);\n    }\n  },\n});\n"]}]}