{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/button/button_icon/button_icon.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/button/button_icon/button_icon.js","mtime":1567534071239},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EuiButtonIcon = exports.COLORS = void 0;\n\nrequire(\"core-js/modules/es6.object.assign\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _services = require(\"../../../services\");\n\nvar _icon = require(\"../../icon\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nvar accessibleButtonIcon = function accessibleButtonIcon(props, propName, componentName) {\n  if (props['aria-label']) {\n    return;\n  }\n\n  if (props['aria-labelledby']) {\n    return;\n  }\n\n  throw new Error(\"\".concat(componentName, \" requires aria-label or aria-labelledby to be specified because icon-only\\n    buttons are screen-reader-inaccessible without them.\"));\n};\n\nvar colorToClassNameMap = {\n  danger: 'euiButtonIcon--danger',\n  disabled: 'euiButtonIcon--disabled',\n  ghost: 'euiButtonIcon--ghost',\n  primary: 'euiButtonIcon--primary',\n  subdued: 'euiButtonIcon--subdued',\n  success: 'euiButtonIcon--success',\n  text: 'euiButtonIcon--text',\n  warning: 'euiButtonIcon--warning'\n};\nvar COLORS = Object.keys(colorToClassNameMap);\nexports.COLORS = COLORS;\n\nvar EuiButtonIcon = function EuiButtonIcon(_ref) {\n  var className = _ref.className,\n      iconType = _ref.iconType,\n      iconSize = _ref.iconSize,\n      color = _ref.color,\n      isDisabled = _ref.isDisabled,\n      href = _ref.href,\n      type = _ref.type,\n      target = _ref.target,\n      rel = _ref.rel,\n      buttonRef = _ref.buttonRef,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"iconType\", \"iconSize\", \"color\", \"isDisabled\", \"href\", \"type\", \"target\", \"rel\", \"buttonRef\"]);\n\n  var classes = (0, _classnames.default)('euiButtonIcon', colorToClassNameMap[color], className); // Add an icon to the button if one exists.\n\n  var buttonIcon;\n\n  if (iconType) {\n    buttonIcon = _react.default.createElement(_icon.EuiIcon, {\n      className: \"euiButtonIcon__icon\",\n      type: iconType,\n      size: iconSize,\n      \"aria-hidden\": \"true\"\n    });\n  } // <a> elements don't respect the `disabled` attribute. So if we're disabled, we'll just pretend\n  // this is a button and piggyback off its disabled styles.\n\n\n  if (href && !isDisabled) {\n    var secureRel = (0, _services.getSecureRelForTarget)({\n      href: href,\n      target: target,\n      rel: rel\n    });\n    return _react.default.createElement(\"a\", _extends({\n      className: classes,\n      href: href,\n      target: target,\n      rel: secureRel,\n      ref: buttonRef\n    }, rest), buttonIcon);\n  } else {\n    return _react.default.createElement(\"button\", _extends({\n      disabled: isDisabled,\n      className: classes,\n      type: type,\n      ref: buttonRef\n    }, rest), buttonIcon);\n  }\n};\n\nexports.EuiButtonIcon = EuiButtonIcon;\nEuiButtonIcon.propTypes = {\n  children: _propTypes.default.node,\n  className: _propTypes.default.string,\n  iconType: _icon.IconPropType,\n  iconSize: _propTypes.default.oneOf(_icon.ICON_SIZES),\n  color: _propTypes.default.oneOf(COLORS),\n  isDisabled: _propTypes.default.bool,\n  'aria-label': accessibleButtonIcon,\n  href: _propTypes.default.string,\n  target: _propTypes.default.string,\n  rel: _propTypes.default.string,\n  onClick: _propTypes.default.func,\n  type: _propTypes.default.string,\n  buttonRef: _propTypes.default.func\n};\nEuiButtonIcon.defaultProps = {\n  type: 'button',\n  color: 'primary',\n  iconSize: 'm'\n};\nEuiButtonIcon.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"EuiButtonIcon\",\n  \"props\": {\n    \"type\": {\n      \"defaultValue\": {\n        \"value\": \"'button'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"color\": {\n      \"defaultValue\": {\n        \"value\": \"'primary'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"danger\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"disabled\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"ghost\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"primary\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"subdued\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"success\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"text\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"warning\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"iconSize\": {\n      \"defaultValue\": {\n        \"value\": \"'m'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"enum\",\n        \"computed\": true,\n        \"value\": \"ICON_SIZES\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"className\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"iconType\": {\n      \"type\": {\n        \"name\": \"custom\",\n        \"raw\": \"IconPropType\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"isDisabled\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"aria-label\": {\n      \"type\": {\n        \"name\": \"custom\",\n        \"raw\": \"accessibleButtonIcon\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"href\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"target\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"rel\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"onClick\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"buttonRef\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/button/button_icon/button_icon.js"],"names":["accessibleButtonIcon","props","propName","componentName","Error","colorToClassNameMap","danger","disabled","ghost","primary","subdued","success","text","warning","COLORS","Object","keys","EuiButtonIcon","className","iconType","iconSize","color","isDisabled","href","type","target","rel","buttonRef","rest","classes","buttonIcon","secureRel","propTypes","children","PropTypes","node","string","IconPropType","oneOf","ICON_SIZES","bool","onClick","func","defaultProps"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AAEA;;;;;;;;;;AAEA,IAAMA,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,KAAD,EAAQC,QAAR,EAAkBC,aAAlB,EAAoC;AAC/D,MAAIF,KAAK,CAAC,YAAD,CAAT,EAAyB;AACvB;AACD;;AAED,MAAIA,KAAK,CAAC,iBAAD,CAAT,EAA8B;AAC5B;AACD;;AAED,QAAM,IAAIG,KAAJ,WACDD,aADC,yIAAN;AAID,CAbD;;AAeA,IAAME,mBAAmB,GAAG;AAC1BC,EAAAA,MAAM,EAAE,uBADkB;AAE1BC,EAAAA,QAAQ,EAAE,yBAFgB;AAG1BC,EAAAA,KAAK,EAAE,sBAHmB;AAI1BC,EAAAA,OAAO,EAAE,wBAJiB;AAK1BC,EAAAA,OAAO,EAAE,wBALiB;AAM1BC,EAAAA,OAAO,EAAE,wBANiB;AAO1BC,EAAAA,IAAI,EAAE,qBAPoB;AAQ1BC,EAAAA,OAAO,EAAE;AARiB,CAA5B;AAWO,IAAMC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYX,mBAAZ,CAAf;;;AAEA,IAAMY,aAAa,GAAG,SAAhBA,aAAgB,OAYvB;AAAA,MAXJC,SAWI,QAXJA,SAWI;AAAA,MAVJC,QAUI,QAVJA,QAUI;AAAA,MATJC,QASI,QATJA,QASI;AAAA,MARJC,KAQI,QARJA,KAQI;AAAA,MAPJC,UAOI,QAPJA,UAOI;AAAA,MANJC,IAMI,QANJA,IAMI;AAAA,MALJC,IAKI,QALJA,IAKI;AAAA,MAJJC,MAII,QAJJA,MAII;AAAA,MAHJC,GAGI,QAHJA,GAGI;AAAA,MAFJC,SAEI,QAFJA,SAEI;AAAA,MADDC,IACC;;AACJ,MAAMC,OAAO,GAAG,yBACd,eADc,EAEdxB,mBAAmB,CAACgB,KAAD,CAFL,EAGdH,SAHc,CAAhB,CADI,CAOJ;;AACA,MAAIY,UAAJ;;AAEA,MAAIX,QAAJ,EAAc;AACZW,IAAAA,UAAU,GACR,6BAAC,aAAD;AACE,MAAA,SAAS,EAAC,qBADZ;AAEE,MAAA,IAAI,EAAEX,QAFR;AAGE,MAAA,IAAI,EAAEC,QAHR;AAIE,qBAAY;AAJd,MADF;AAQD,GAnBG,CAqBJ;AACA;;;AACA,MAAIG,IAAI,IAAI,CAACD,UAAb,EAAyB;AACvB,QAAMS,SAAS,GAAG,qCAAsB;AAAER,MAAAA,IAAI,EAAJA,IAAF;AAAQE,MAAAA,MAAM,EAANA,MAAR;AAAgBC,MAAAA,GAAG,EAAHA;AAAhB,KAAtB,CAAlB;AAEA,WACE;AACE,MAAA,SAAS,EAAEG,OADb;AAEE,MAAA,IAAI,EAAEN,IAFR;AAGE,MAAA,MAAM,EAAEE,MAHV;AAIE,MAAA,GAAG,EAAEM,SAJP;AAKE,MAAA,GAAG,EAAEJ;AALP,OAMMC,IANN,GAOGE,UAPH,CADF;AAWD,GAdD,MAcO;AACL,WACE;AACE,MAAA,QAAQ,EAAER,UADZ;AAEE,MAAA,SAAS,EAAEO,OAFb;AAGE,MAAA,IAAI,EAAEL,IAHR;AAIE,MAAA,GAAG,EAAEG;AAJP,OAKMC,IALN,GAMGE,UANH,CADF;AAUD;AACF,CA7DM;;;AA+DPb,aAAa,CAACe,SAAd,GAA0B;AACxBC,EAAAA,QAAQ,EAAEC,mBAAUC,IADI;AAExBjB,EAAAA,SAAS,EAAEgB,mBAAUE,MAFG;AAGxBjB,EAAAA,QAAQ,EAAEkB,kBAHc;AAIxBjB,EAAAA,QAAQ,EAAEc,mBAAUI,KAAV,CAAgBC,gBAAhB,CAJc;AAKxBlB,EAAAA,KAAK,EAAEa,mBAAUI,KAAV,CAAgBxB,MAAhB,CALiB;AAMxBQ,EAAAA,UAAU,EAAEY,mBAAUM,IANE;AAOxB,gBAAcxC,oBAPU;AAQxBuB,EAAAA,IAAI,EAAEW,mBAAUE,MARQ;AASxBX,EAAAA,MAAM,EAAES,mBAAUE,MATM;AAUxBV,EAAAA,GAAG,EAAEQ,mBAAUE,MAVS;AAWxBK,EAAAA,OAAO,EAAEP,mBAAUQ,IAXK;AAYxBlB,EAAAA,IAAI,EAAEU,mBAAUE,MAZQ;AAaxBT,EAAAA,SAAS,EAAEO,mBAAUQ;AAbG,CAA1B;AAgBAzB,aAAa,CAAC0B,YAAd,GAA6B;AAC3BnB,EAAAA,IAAI,EAAE,QADqB;AAE3BH,EAAAA,KAAK,EAAE,SAFoB;AAG3BD,EAAAA,QAAQ,EAAE;AAHiB,CAA7B","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport { getSecureRelForTarget } from '../../../services';\n\nimport { ICON_SIZES, IconPropType, EuiIcon } from '../../icon';\n\nconst accessibleButtonIcon = (props, propName, componentName) => {\n  if (props['aria-label']) {\n    return;\n  }\n\n  if (props['aria-labelledby']) {\n    return;\n  }\n\n  throw new Error(\n    `${componentName} requires aria-label or aria-labelledby to be specified because icon-only\n    buttons are screen-reader-inaccessible without them.`\n  );\n};\n\nconst colorToClassNameMap = {\n  danger: 'euiButtonIcon--danger',\n  disabled: 'euiButtonIcon--disabled',\n  ghost: 'euiButtonIcon--ghost',\n  primary: 'euiButtonIcon--primary',\n  subdued: 'euiButtonIcon--subdued',\n  success: 'euiButtonIcon--success',\n  text: 'euiButtonIcon--text',\n  warning: 'euiButtonIcon--warning',\n};\n\nexport const COLORS = Object.keys(colorToClassNameMap);\n\nexport const EuiButtonIcon = ({\n  className,\n  iconType,\n  iconSize,\n  color,\n  isDisabled,\n  href,\n  type,\n  target,\n  rel,\n  buttonRef,\n  ...rest\n}) => {\n  const classes = classNames(\n    'euiButtonIcon',\n    colorToClassNameMap[color],\n    className\n  );\n\n  // Add an icon to the button if one exists.\n  let buttonIcon;\n\n  if (iconType) {\n    buttonIcon = (\n      <EuiIcon\n        className=\"euiButtonIcon__icon\"\n        type={iconType}\n        size={iconSize}\n        aria-hidden=\"true\"\n      />\n    );\n  }\n\n  // <a> elements don't respect the `disabled` attribute. So if we're disabled, we'll just pretend\n  // this is a button and piggyback off its disabled styles.\n  if (href && !isDisabled) {\n    const secureRel = getSecureRelForTarget({ href, target, rel });\n\n    return (\n      <a\n        className={classes}\n        href={href}\n        target={target}\n        rel={secureRel}\n        ref={buttonRef}\n        {...rest}>\n        {buttonIcon}\n      </a>\n    );\n  } else {\n    return (\n      <button\n        disabled={isDisabled}\n        className={classes}\n        type={type}\n        ref={buttonRef}\n        {...rest}>\n        {buttonIcon}\n      </button>\n    );\n  }\n};\n\nEuiButtonIcon.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  iconType: IconPropType,\n  iconSize: PropTypes.oneOf(ICON_SIZES),\n  color: PropTypes.oneOf(COLORS),\n  isDisabled: PropTypes.bool,\n  'aria-label': accessibleButtonIcon,\n  href: PropTypes.string,\n  target: PropTypes.string,\n  rel: PropTypes.string,\n  onClick: PropTypes.func,\n  type: PropTypes.string,\n  buttonRef: PropTypes.func,\n};\n\nEuiButtonIcon.defaultProps = {\n  type: 'button',\n  color: 'primary',\n  iconSize: 'm',\n};\n"]}]}