{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/button/button.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/button/button.js","mtime":1567534071236},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EuiButton = exports.ICON_SIDES = exports.SIZES = exports.COLORS = void 0;\n\nrequire(\"core-js/modules/es6.object.assign\");\n\nrequire(\"core-js/modules/es6.array.fill\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _loading = require(\"../loading\");\n\nvar _services = require(\"../../services\");\n\nvar _icon = require(\"../icon\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nvar colorToClassNameMap = {\n  primary: 'euiButton--primary',\n  secondary: 'euiButton--secondary',\n  warning: 'euiButton--warning',\n  danger: 'euiButton--danger',\n  ghost: 'euiButton--ghost',\n  text: 'euiButton--text'\n};\nvar COLORS = Object.keys(colorToClassNameMap);\nexports.COLORS = COLORS;\nvar sizeToClassNameMap = {\n  s: 'euiButton--small',\n  m: null\n};\nvar SIZES = Object.keys(sizeToClassNameMap);\nexports.SIZES = SIZES;\nvar iconSideToClassNameMap = {\n  left: null,\n  right: 'euiButton--iconRight'\n};\nvar ICON_SIDES = Object.keys(iconSideToClassNameMap);\nexports.ICON_SIDES = ICON_SIDES;\n\nvar EuiButton = function EuiButton(_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      iconType = _ref.iconType,\n      iconSide = _ref.iconSide,\n      color = _ref.color,\n      size = _ref.size,\n      fill = _ref.fill,\n      isDisabled = _ref.isDisabled,\n      isLoading = _ref.isLoading,\n      href = _ref.href,\n      target = _ref.target,\n      rel = _ref.rel,\n      type = _ref.type,\n      buttonRef = _ref.buttonRef,\n      contentProps = _ref.contentProps,\n      textProps = _ref.textProps,\n      fullWidth = _ref.fullWidth,\n      rest = _objectWithoutProperties(_ref, [\"children\", \"className\", \"iconType\", \"iconSide\", \"color\", \"size\", \"fill\", \"isDisabled\", \"isLoading\", \"href\", \"target\", \"rel\", \"type\", \"buttonRef\", \"contentProps\", \"textProps\", \"fullWidth\"]);\n\n  // If in the loading state, force disabled to true\n  isDisabled = isLoading ? true : isDisabled;\n  var classes = (0, _classnames.default)('euiButton', colorToClassNameMap[color], sizeToClassNameMap[size], iconSideToClassNameMap[iconSide], className, {\n    'euiButton--fill': fill,\n    'euiButton--fullWidth': fullWidth\n  });\n  var contentClassNames = (0, _classnames.default)('euiButton__content', contentProps && contentProps.className);\n  var textClassNames = (0, _classnames.default)('euiButton__text', textProps && textProps.className); // Add an icon to the button if one exists.\n\n  var buttonIcon;\n\n  if (isLoading) {\n    buttonIcon = _react.default.createElement(_loading.EuiLoadingSpinner, {\n      className: \"euiButton__spinner\",\n      size: \"m\"\n    });\n  } else if (iconType) {\n    buttonIcon = _react.default.createElement(_icon.EuiIcon, {\n      className: \"euiButton__icon\",\n      type: iconType,\n      size: \"m\",\n      \"aria-hidden\": \"true\"\n    });\n  }\n\n  var innerNode = _react.default.createElement(\"span\", _extends({}, contentProps, {\n    className: contentClassNames\n  }), buttonIcon, _react.default.createElement(\"span\", _extends({}, textProps, {\n    className: textClassNames\n  }), children)); // <a> elements don't respect the `disabled` attribute. So if we're disabled, we'll just pretend\n  // this is a button and piggyback off its disabled styles.\n\n\n  if (href && !isDisabled) {\n    var secureRel = (0, _services.getSecureRelForTarget)({\n      href: href,\n      target: target,\n      rel: rel\n    });\n    return _react.default.createElement(\"a\", _extends({\n      className: classes,\n      href: href,\n      target: target,\n      rel: secureRel,\n      ref: buttonRef\n    }, rest), innerNode);\n  } else {\n    return _react.default.createElement(\"button\", _extends({\n      disabled: isDisabled,\n      className: classes,\n      type: type,\n      ref: buttonRef\n    }, rest), innerNode);\n  }\n};\n\nexports.EuiButton = EuiButton;\nEuiButton.propTypes = {\n  children: _propTypes.default.node,\n  className: _propTypes.default.string,\n\n  /**\n   * See EuiIcon\n   */\n  iconType: _icon.IconPropType,\n  iconSide: _propTypes.default.oneOf(ICON_SIDES),\n\n  /**\n   * Add more focus to an action\n   */\n  fill: _propTypes.default.bool,\n\n  /**\n   * Define the color of the button\n   */\n  color: _propTypes.default.oneOf(COLORS),\n  size: _propTypes.default.oneOf(SIZES),\n\n  /**\n   * Expands button to fill the width of the parent\n   */\n  fullWidth: _propTypes.default.bool,\n  isDisabled: _propTypes.default.bool,\n  href: _propTypes.default.string,\n  target: _propTypes.default.string,\n  rel: _propTypes.default.string,\n  onClick: _propTypes.default.func,\n\n  /**\n   * Adds/swaps for loading spinner & disables\n   */\n  isLoading: _propTypes.default.bool,\n\n  /**\n   * Standard HTML attribute\n   */\n  type: _propTypes.default.string,\n  buttonRef: _propTypes.default.func,\n\n  /**\n   * Passes props to `euiButton__content` span\n   */\n  contentProps: _propTypes.default.object,\n\n  /**\n   * Passes props to `euiButton__text` span\n   */\n  textProps: _propTypes.default.object\n};\nEuiButton.defaultProps = {\n  size: 'm',\n  type: 'button',\n  iconSide: 'left',\n  color: 'primary',\n  fill: false\n};\nEuiButton.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"EuiButton\",\n  \"props\": {\n    \"size\": {\n      \"defaultValue\": {\n        \"value\": \"'m'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"s\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"m\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"type\": {\n      \"defaultValue\": {\n        \"value\": \"'button'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Standard HTML attribute\"\n    },\n    \"iconSide\": {\n      \"defaultValue\": {\n        \"value\": \"'left'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"left\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"right\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"color\": {\n      \"defaultValue\": {\n        \"value\": \"'primary'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"primary\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"secondary\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"warning\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"danger\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"ghost\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"text\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Define the color of the button\"\n    },\n    \"fill\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Add more focus to an action\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"className\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"iconType\": {\n      \"type\": {\n        \"name\": \"custom\",\n        \"raw\": \"IconPropType\"\n      },\n      \"required\": false,\n      \"description\": \"See EuiIcon\"\n    },\n    \"fullWidth\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Expands button to fill the width of the parent\"\n    },\n    \"isDisabled\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"href\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"target\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"rel\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"onClick\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"isLoading\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Adds/swaps for loading spinner & disables\"\n    },\n    \"buttonRef\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"contentProps\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": false,\n      \"description\": \"Passes props to `euiButton__content` span\"\n    },\n    \"textProps\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": false,\n      \"description\": \"Passes props to `euiButton__text` span\"\n    }\n  }\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/button/button.js"],"names":["colorToClassNameMap","primary","secondary","warning","danger","ghost","text","COLORS","Object","keys","sizeToClassNameMap","s","m","SIZES","iconSideToClassNameMap","left","right","ICON_SIDES","EuiButton","children","className","iconType","iconSide","color","size","fill","isDisabled","isLoading","href","target","rel","type","buttonRef","contentProps","textProps","fullWidth","rest","classes","contentClassNames","textClassNames","buttonIcon","innerNode","secureRel","propTypes","PropTypes","node","string","IconPropType","oneOf","bool","onClick","func","object","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AAEA;;AAEA;;;;;;;;;;AAEA,IAAMA,mBAAmB,GAAG;AAC1BC,EAAAA,OAAO,EAAE,oBADiB;AAE1BC,EAAAA,SAAS,EAAE,sBAFe;AAG1BC,EAAAA,OAAO,EAAE,oBAHiB;AAI1BC,EAAAA,MAAM,EAAE,mBAJkB;AAK1BC,EAAAA,KAAK,EAAE,kBALmB;AAM1BC,EAAAA,IAAI,EAAE;AANoB,CAA5B;AASO,IAAMC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYT,mBAAZ,CAAf;;AAEP,IAAMU,kBAAkB,GAAG;AACzBC,EAAAA,CAAC,EAAE,kBADsB;AAEzBC,EAAAA,CAAC,EAAE;AAFsB,CAA3B;AAKO,IAAMC,KAAK,GAAGL,MAAM,CAACC,IAAP,CAAYC,kBAAZ,CAAd;;AAEP,IAAMI,sBAAsB,GAAG;AAC7BC,EAAAA,IAAI,EAAE,IADuB;AAE7BC,EAAAA,KAAK,EAAE;AAFsB,CAA/B;AAKO,IAAMC,UAAU,GAAGT,MAAM,CAACC,IAAP,CAAYK,sBAAZ,CAAnB;;;AAEA,IAAMI,SAAS,GAAG,SAAZA,SAAY,OAmBnB;AAAA,MAlBJC,QAkBI,QAlBJA,QAkBI;AAAA,MAjBJC,SAiBI,QAjBJA,SAiBI;AAAA,MAhBJC,QAgBI,QAhBJA,QAgBI;AAAA,MAfJC,QAeI,QAfJA,QAeI;AAAA,MAdJC,KAcI,QAdJA,KAcI;AAAA,MAbJC,IAaI,QAbJA,IAaI;AAAA,MAZJC,IAYI,QAZJA,IAYI;AAAA,MAXJC,UAWI,QAXJA,UAWI;AAAA,MAVJC,SAUI,QAVJA,SAUI;AAAA,MATJC,IASI,QATJA,IASI;AAAA,MARJC,MAQI,QARJA,MAQI;AAAA,MAPJC,GAOI,QAPJA,GAOI;AAAA,MANJC,IAMI,QANJA,IAMI;AAAA,MALJC,SAKI,QALJA,SAKI;AAAA,MAJJC,YAII,QAJJA,YAII;AAAA,MAHJC,SAGI,QAHJA,SAGI;AAAA,MAFJC,SAEI,QAFJA,SAEI;AAAA,MADDC,IACC;;AACJ;AACAV,EAAAA,UAAU,GAAGC,SAAS,GAAG,IAAH,GAAUD,UAAhC;AAEA,MAAMW,OAAO,GAAG,yBACd,WADc,EAEdrC,mBAAmB,CAACuB,KAAD,CAFL,EAGdb,kBAAkB,CAACc,IAAD,CAHJ,EAIdV,sBAAsB,CAACQ,QAAD,CAJR,EAKdF,SALc,EAMd;AACE,uBAAmBK,IADrB;AAEE,4BAAwBU;AAF1B,GANc,CAAhB;AAYA,MAAMG,iBAAiB,GAAG,yBACxB,oBADwB,EAExBL,YAAY,IAAIA,YAAY,CAACb,SAFL,CAA1B;AAKA,MAAMmB,cAAc,GAAG,yBACrB,iBADqB,EAErBL,SAAS,IAAIA,SAAS,CAACd,SAFF,CAAvB,CArBI,CA0BJ;;AACA,MAAIoB,UAAJ;;AAEA,MAAIb,SAAJ,EAAe;AACba,IAAAA,UAAU,GAAG,6BAAC,0BAAD;AAAmB,MAAA,SAAS,EAAC,oBAA7B;AAAkD,MAAA,IAAI,EAAC;AAAvD,MAAb;AACD,GAFD,MAEO,IAAInB,QAAJ,EAAc;AACnBmB,IAAAA,UAAU,GACR,6BAAC,aAAD;AACE,MAAA,SAAS,EAAC,iBADZ;AAEE,MAAA,IAAI,EAAEnB,QAFR;AAGE,MAAA,IAAI,EAAC,GAHP;AAIE,qBAAY;AAJd,MADF;AAQD;;AAED,MAAMoB,SAAS,GACb,kDAAUR,YAAV;AAAwB,IAAA,SAAS,EAAEK;AAAnC,MACGE,UADH,EAEE,kDAAUN,SAAV;AAAqB,IAAA,SAAS,EAAEK;AAAhC,MACGpB,QADH,CAFF,CADF,CA1CI,CAmDJ;AACA;;;AACA,MAAIS,IAAI,IAAI,CAACF,UAAb,EAAyB;AACvB,QAAMgB,SAAS,GAAG,qCAAsB;AAAEd,MAAAA,IAAI,EAAJA,IAAF;AAAQC,MAAAA,MAAM,EAANA,MAAR;AAAgBC,MAAAA,GAAG,EAAHA;AAAhB,KAAtB,CAAlB;AAEA,WACE;AACE,MAAA,SAAS,EAAEO,OADb;AAEE,MAAA,IAAI,EAAET,IAFR;AAGE,MAAA,MAAM,EAAEC,MAHV;AAIE,MAAA,GAAG,EAAEa,SAJP;AAKE,MAAA,GAAG,EAAEV;AALP,OAMMI,IANN,GAOGK,SAPH,CADF;AAWD,GAdD,MAcO;AACL,WACE;AACE,MAAA,QAAQ,EAAEf,UADZ;AAEE,MAAA,SAAS,EAAEW,OAFb;AAGE,MAAA,IAAI,EAAEN,IAHR;AAIE,MAAA,GAAG,EAAEC;AAJP,OAKMI,IALN,GAMGK,SANH,CADF;AAUD;AACF,CAlGM;;;AAoGPvB,SAAS,CAACyB,SAAV,GAAsB;AACpBxB,EAAAA,QAAQ,EAAEyB,mBAAUC,IADA;AAEpBzB,EAAAA,SAAS,EAAEwB,mBAAUE,MAFD;;AAIpB;;;AAGAzB,EAAAA,QAAQ,EAAE0B,kBAPU;AAQpBzB,EAAAA,QAAQ,EAAEsB,mBAAUI,KAAV,CAAgB/B,UAAhB,CARU;;AAUpB;;;AAGAQ,EAAAA,IAAI,EAAEmB,mBAAUK,IAbI;;AAepB;;;AAGA1B,EAAAA,KAAK,EAAEqB,mBAAUI,KAAV,CAAgBzC,MAAhB,CAlBa;AAmBpBiB,EAAAA,IAAI,EAAEoB,mBAAUI,KAAV,CAAgBnC,KAAhB,CAnBc;;AAqBpB;;;AAGAsB,EAAAA,SAAS,EAAES,mBAAUK,IAxBD;AAyBpBvB,EAAAA,UAAU,EAAEkB,mBAAUK,IAzBF;AA0BpBrB,EAAAA,IAAI,EAAEgB,mBAAUE,MA1BI;AA2BpBjB,EAAAA,MAAM,EAAEe,mBAAUE,MA3BE;AA4BpBhB,EAAAA,GAAG,EAAEc,mBAAUE,MA5BK;AA6BpBI,EAAAA,OAAO,EAAEN,mBAAUO,IA7BC;;AA+BpB;;;AAGAxB,EAAAA,SAAS,EAAEiB,mBAAUK,IAlCD;;AAoCpB;;;AAGAlB,EAAAA,IAAI,EAAEa,mBAAUE,MAvCI;AAwCpBd,EAAAA,SAAS,EAAEY,mBAAUO,IAxCD;;AA0CpB;;;AAGAlB,EAAAA,YAAY,EAAEW,mBAAUQ,MA7CJ;;AA+CpB;;;AAGAlB,EAAAA,SAAS,EAAEU,mBAAUQ;AAlDD,CAAtB;AAqDAlC,SAAS,CAACmC,YAAV,GAAyB;AACvB7B,EAAAA,IAAI,EAAE,GADiB;AAEvBO,EAAAA,IAAI,EAAE,QAFiB;AAGvBT,EAAAA,QAAQ,EAAE,MAHa;AAIvBC,EAAAA,KAAK,EAAE,SAJgB;AAKvBE,EAAAA,IAAI,EAAE;AALiB,CAAzB","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport { EuiLoadingSpinner } from '../loading';\n\nimport { getSecureRelForTarget } from '../../services';\n\nimport { IconPropType, EuiIcon } from '../icon';\n\nconst colorToClassNameMap = {\n  primary: 'euiButton--primary',\n  secondary: 'euiButton--secondary',\n  warning: 'euiButton--warning',\n  danger: 'euiButton--danger',\n  ghost: 'euiButton--ghost',\n  text: 'euiButton--text',\n};\n\nexport const COLORS = Object.keys(colorToClassNameMap);\n\nconst sizeToClassNameMap = {\n  s: 'euiButton--small',\n  m: null,\n};\n\nexport const SIZES = Object.keys(sizeToClassNameMap);\n\nconst iconSideToClassNameMap = {\n  left: null,\n  right: 'euiButton--iconRight',\n};\n\nexport const ICON_SIDES = Object.keys(iconSideToClassNameMap);\n\nexport const EuiButton = ({\n  children,\n  className,\n  iconType,\n  iconSide,\n  color,\n  size,\n  fill,\n  isDisabled,\n  isLoading,\n  href,\n  target,\n  rel,\n  type,\n  buttonRef,\n  contentProps,\n  textProps,\n  fullWidth,\n  ...rest\n}) => {\n  // If in the loading state, force disabled to true\n  isDisabled = isLoading ? true : isDisabled;\n\n  const classes = classNames(\n    'euiButton',\n    colorToClassNameMap[color],\n    sizeToClassNameMap[size],\n    iconSideToClassNameMap[iconSide],\n    className,\n    {\n      'euiButton--fill': fill,\n      'euiButton--fullWidth': fullWidth,\n    }\n  );\n\n  const contentClassNames = classNames(\n    'euiButton__content',\n    contentProps && contentProps.className\n  );\n\n  const textClassNames = classNames(\n    'euiButton__text',\n    textProps && textProps.className\n  );\n\n  // Add an icon to the button if one exists.\n  let buttonIcon;\n\n  if (isLoading) {\n    buttonIcon = <EuiLoadingSpinner className=\"euiButton__spinner\" size=\"m\" />;\n  } else if (iconType) {\n    buttonIcon = (\n      <EuiIcon\n        className=\"euiButton__icon\"\n        type={iconType}\n        size=\"m\"\n        aria-hidden=\"true\"\n      />\n    );\n  }\n\n  const innerNode = (\n    <span {...contentProps} className={contentClassNames}>\n      {buttonIcon}\n      <span {...textProps} className={textClassNames}>\n        {children}\n      </span>\n    </span>\n  );\n\n  // <a> elements don't respect the `disabled` attribute. So if we're disabled, we'll just pretend\n  // this is a button and piggyback off its disabled styles.\n  if (href && !isDisabled) {\n    const secureRel = getSecureRelForTarget({ href, target, rel });\n\n    return (\n      <a\n        className={classes}\n        href={href}\n        target={target}\n        rel={secureRel}\n        ref={buttonRef}\n        {...rest}>\n        {innerNode}\n      </a>\n    );\n  } else {\n    return (\n      <button\n        disabled={isDisabled}\n        className={classes}\n        type={type}\n        ref={buttonRef}\n        {...rest}>\n        {innerNode}\n      </button>\n    );\n  }\n};\n\nEuiButton.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n\n  /**\n   * See EuiIcon\n   */\n  iconType: IconPropType,\n  iconSide: PropTypes.oneOf(ICON_SIDES),\n\n  /**\n   * Add more focus to an action\n   */\n  fill: PropTypes.bool,\n\n  /**\n   * Define the color of the button\n   */\n  color: PropTypes.oneOf(COLORS),\n  size: PropTypes.oneOf(SIZES),\n\n  /**\n   * Expands button to fill the width of the parent\n   */\n  fullWidth: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  href: PropTypes.string,\n  target: PropTypes.string,\n  rel: PropTypes.string,\n  onClick: PropTypes.func,\n\n  /**\n   * Adds/swaps for loading spinner & disables\n   */\n  isLoading: PropTypes.bool,\n\n  /**\n   * Standard HTML attribute\n   */\n  type: PropTypes.string,\n  buttonRef: PropTypes.func,\n\n  /**\n   * Passes props to `euiButton__content` span\n   */\n  contentProps: PropTypes.object,\n\n  /**\n   * Passes props to `euiButton__text` span\n   */\n  textProps: PropTypes.object,\n};\n\nEuiButton.defaultProps = {\n  size: 'm',\n  type: 'button',\n  iconSide: 'left',\n  color: 'primary',\n  fill: false,\n};\n"]}]}