{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/list_group/list_group_item.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/list_group/list_group_item.js","mtime":1567534071276},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EuiListGroupItem = exports.SIZES = void 0;\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/es6.object.assign\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _button = require(\"../button\");\n\nvar _icon = require(\"../icon\");\n\nvar _tool_tip = require(\"../tool_tip\");\n\nvar _inner_text = require(\"../inner_text\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nvar sizeToClassNameMap = {\n  xs: 'euiListGroupItem--xSmall',\n  s: 'euiListGroupItem--small',\n  m: 'euiListGroupItem--medium',\n  l: 'euiListGroupItem--large'\n};\nvar SIZES = Object.keys(sizeToClassNameMap);\nexports.SIZES = SIZES;\n\nvar EuiListGroupItem = function EuiListGroupItem(_ref) {\n  var label = _ref.label,\n      isActive = _ref.isActive,\n      isDisabled = _ref.isDisabled,\n      href = _ref.href,\n      className = _ref.className,\n      iconType = _ref.iconType,\n      icon = _ref.icon,\n      extraAction = _ref.extraAction,\n      onClick = _ref.onClick,\n      size = _ref.size,\n      showToolTip = _ref.showToolTip,\n      wrapText = _ref.wrapText,\n      rest = _objectWithoutProperties(_ref, [\"label\", \"isActive\", \"isDisabled\", \"href\", \"className\", \"iconType\", \"icon\", \"extraAction\", \"onClick\", \"size\", \"showToolTip\", \"wrapText\"]);\n\n  var classes = (0, _classnames.default)('euiListGroupItem', sizeToClassNameMap[size], {\n    'euiListGroupItem-isActive': isActive,\n    'euiListGroupItem-isDisabled': isDisabled,\n    'euiListGroupItem-isClickable': href || onClick,\n    'euiListGroupItem-hasExtraAction': extraAction,\n    'euiListGroupItem--wrapText': wrapText\n  }, className);\n  var iconNode;\n\n  if (iconType) {\n    iconNode = _react.default.createElement(_icon.EuiIcon, {\n      className: \"euiListGroupItem__icon\",\n      type: iconType\n    });\n\n    if (icon) {\n      console.warn('Both `iconType` and `icon` were passed to EuiListGroupItem but only one can exist. The `iconType` was used.');\n    }\n  } else if (icon) {\n    iconNode = _react.default.cloneElement(icon, {\n      className: (0, _classnames.default)('euiListGroupItem__icon', icon.props.className)\n    });\n  }\n\n  var extraActionNode;\n\n  if (extraAction) {\n    var _iconType = extraAction.iconType,\n        alwaysShow = extraAction.alwaysShow,\n        _rest = _objectWithoutProperties(extraAction, [\"iconType\", \"alwaysShow\"]);\n\n    var extraActionClasses = (0, _classnames.default)('euiListGroupItem__extraAction', {\n      'euiListGroupItem__extraAction-alwaysShow': alwaysShow\n    });\n    extraActionNode = _react.default.createElement(_button.EuiButtonIcon, _extends({\n      className: extraActionClasses,\n      iconType: _iconType\n    }, _rest, {\n      disabled: isDisabled\n    }));\n  } // Only add the label as the title attribute if it's possibly truncated\n  // Also ensure the value of the title attribute is a string\n\n\n  var _useInnerText = (0, _inner_text.useInnerText)(),\n      _useInnerText2 = _slicedToArray(_useInnerText, 2),\n      ref = _useInnerText2[0],\n      innerText = _useInnerText2[1];\n\n  var shouldRenderTitle = !wrapText && !showToolTip;\n  var labelContent = shouldRenderTitle ? _react.default.createElement(\"span\", {\n    ref: ref,\n    className: \"euiListGroupItem__label\",\n    title: typeof label === 'string' ? label : innerText\n  }, label) : _react.default.createElement(\"span\", {\n    className: \"euiListGroupItem__label\"\n  }, label); // Handle the variety of interaction behavior\n\n  var itemContent;\n\n  if (href && !isDisabled) {\n    itemContent = _react.default.createElement(\"a\", _extends({\n      href: href,\n      className: \"euiListGroupItem__button\"\n    }, rest), iconNode, labelContent);\n\n    if (onClick) {\n      console.warn('Both `href` and `onClick` were passed to EuiListGroupItem but only one can exist. The `href` was used.');\n    }\n  } else if (href && isDisabled || onClick) {\n    itemContent = _react.default.createElement(\"button\", _extends({\n      type: \"button\",\n      className: \"euiListGroupItem__button\",\n      disabled: isDisabled,\n      onClick: onClick\n    }, rest), iconNode, labelContent);\n  } else {\n    itemContent = _react.default.createElement(\"span\", _extends({\n      className: \"euiListGroupItem__text\"\n    }, rest), iconNode, labelContent);\n  }\n\n  if (showToolTip) {\n    itemContent = _react.default.createElement(\"li\", {\n      className: classes\n    }, _react.default.createElement(_tool_tip.EuiToolTip, {\n      anchorClassName: \"euiListGroupItem__tooltip\",\n      content: label,\n      position: \"right\",\n      delay: \"long\",\n      size: \"s\"\n    }, itemContent));\n  } else {\n    itemContent = _react.default.createElement(\"li\", {\n      className: classes\n    }, itemContent, extraActionNode);\n  }\n\n  return _react.default.createElement(_react.Fragment, null, itemContent);\n};\n\nexports.EuiListGroupItem = EuiListGroupItem;\nEuiListGroupItem.propTypes = {\n  className: _propTypes.default.string,\n\n  /**\n   * Set the size of the label text\n   */\n  size: _propTypes.default.oneOf(SIZES),\n\n  /**\n   * Content to be displyed in the list item\n   */\n  label: _propTypes.default.node.isRequired,\n\n  /**\n   * Apply styles indicating an item is active\n   */\n  isActive: _propTypes.default.bool,\n\n  /**\n   * Apply styles indicating an item is disabled\n   */\n  isDisabled: _propTypes.default.bool,\n\n  /**\n   * Make the list item label a link\n   */\n  href: _propTypes.default.string,\n\n  /**\n   * Adds `EuiIcon` of `EuiIcon.type`\n   */\n  iconType: _icon.IconPropType,\n\n  /**\n   * Custom node to pass as the icon. Cannot be used in conjunction\n   * with `iconType`.\n   */\n  icon: _propTypes.default.element,\n\n  /**\n   * Display tooltip on list item\n   */\n  showToolTip: _propTypes.default.bool,\n\n  /**\n   * Adds an `EuiButtonIcon` to the right side of the item; `iconType` is required;\n   * pass `alwaysShow` if you don't want the default behavior of only showing on hover\n   */\n  extraAction: _propTypes.default.shape({\n    iconType: _icon.IconPropType.isRequired,\n    alwaysShow: _propTypes.default.bool\n  }),\n  onClick: _propTypes.default.func,\n\n  /**\n   * Allow link text to wrap\n   */\n  wrapText: _propTypes.default.bool\n};\nEuiListGroupItem.defaultProps = {\n  isActive: false,\n  isDisabled: false,\n  size: 'm',\n  showToolTip: false\n};\nEuiListGroupItem.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"EuiListGroupItem\",\n  \"props\": {\n    \"isActive\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Apply styles indicating an item is active\"\n    },\n    \"isDisabled\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Apply styles indicating an item is disabled\"\n    },\n    \"size\": {\n      \"defaultValue\": {\n        \"value\": \"'m'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"xs\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"s\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"m\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"l\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Set the size of the label text\"\n    },\n    \"showToolTip\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Display tooltip on list item\"\n    },\n    \"className\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": true,\n      \"description\": \"Content to be displyed in the list item\"\n    },\n    \"href\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Make the list item label a link\"\n    },\n    \"iconType\": {\n      \"type\": {\n        \"name\": \"custom\",\n        \"raw\": \"IconPropType\"\n      },\n      \"required\": false,\n      \"description\": \"Adds `EuiIcon` of `EuiIcon.type`\"\n    },\n    \"icon\": {\n      \"type\": {\n        \"name\": \"element\"\n      },\n      \"required\": false,\n      \"description\": \"Custom node to pass as the icon. Cannot be used in conjunction\\nwith `iconType`.\"\n    },\n    \"extraAction\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {\n          \"iconType\": {\n            \"name\": \"custom\",\n            \"raw\": \"IconPropType.isRequired\",\n            \"required\": true\n          },\n          \"alwaysShow\": {\n            \"name\": \"bool\",\n            \"required\": false\n          }\n        }\n      },\n      \"required\": false,\n      \"description\": \"Adds an `EuiButtonIcon` to the right side of the item; `iconType` is required;\\npass `alwaysShow` if you don't want the default behavior of only showing on hover\"\n    },\n    \"onClick\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"wrapText\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Allow link text to wrap\"\n    }\n  }\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/list_group/list_group_item.js"],"names":["sizeToClassNameMap","xs","s","m","l","SIZES","Object","keys","EuiListGroupItem","label","isActive","isDisabled","href","className","iconType","icon","extraAction","onClick","size","showToolTip","wrapText","rest","classes","iconNode","console","warn","React","cloneElement","props","extraActionNode","alwaysShow","extraActionClasses","ref","innerText","shouldRenderTitle","labelContent","itemContent","propTypes","PropTypes","string","oneOf","node","isRequired","bool","IconPropType","element","shape","func","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,kBAAkB,GAAG;AACzBC,EAAAA,EAAE,EAAE,0BADqB;AAEzBC,EAAAA,CAAC,EAAE,yBAFsB;AAGzBC,EAAAA,CAAC,EAAE,0BAHsB;AAIzBC,EAAAA,CAAC,EAAE;AAJsB,CAA3B;AAOO,IAAMC,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYP,kBAAZ,CAAd;;;AAEA,IAAMQ,gBAAgB,GAAG,SAAnBA,gBAAmB,OAc1B;AAAA,MAbJC,KAaI,QAbJA,KAaI;AAAA,MAZJC,QAYI,QAZJA,QAYI;AAAA,MAXJC,UAWI,QAXJA,UAWI;AAAA,MAVJC,IAUI,QAVJA,IAUI;AAAA,MATJC,SASI,QATJA,SASI;AAAA,MARJC,QAQI,QARJA,QAQI;AAAA,MAPJC,IAOI,QAPJA,IAOI;AAAA,MANJC,WAMI,QANJA,WAMI;AAAA,MALJC,OAKI,QALJA,OAKI;AAAA,MAJJC,IAII,QAJJA,IAII;AAAA,MAHJC,WAGI,QAHJA,WAGI;AAAA,MAFJC,QAEI,QAFJA,QAEI;AAAA,MADDC,IACC;;AACJ,MAAMC,OAAO,GAAG,yBACd,kBADc,EAEdtB,kBAAkB,CAACkB,IAAD,CAFJ,EAGd;AACE,iCAA6BR,QAD/B;AAEE,mCAA+BC,UAFjC;AAGE,oCAAgCC,IAAI,IAAIK,OAH1C;AAIE,uCAAmCD,WAJrC;AAKE,kCAA8BI;AALhC,GAHc,EAUdP,SAVc,CAAhB;AAaA,MAAIU,QAAJ;;AAEA,MAAIT,QAAJ,EAAc;AACZS,IAAAA,QAAQ,GAAG,6BAAC,aAAD;AAAS,MAAA,SAAS,EAAC,wBAAnB;AAA4C,MAAA,IAAI,EAAET;AAAlD,MAAX;;AAEA,QAAIC,IAAJ,EAAU;AACRS,MAAAA,OAAO,CAACC,IAAR,CACE,6GADF;AAGD;AACF,GARD,MAQO,IAAIV,IAAJ,EAAU;AACfQ,IAAAA,QAAQ,GAAGG,eAAMC,YAAN,CAAmBZ,IAAnB,EAAyB;AAClCF,MAAAA,SAAS,EAAE,yBAAW,wBAAX,EAAqCE,IAAI,CAACa,KAAL,CAAWf,SAAhD;AADuB,KAAzB,CAAX;AAGD;;AAED,MAAIgB,eAAJ;;AAEA,MAAIb,WAAJ,EAAiB;AAAA,QACPF,SADO,GAC2BE,WAD3B,CACPF,QADO;AAAA,QACGgB,UADH,GAC2Bd,WAD3B,CACGc,UADH;AAAA,QACkBT,KADlB,4BAC2BL,WAD3B;;AAGf,QAAMe,kBAAkB,GAAG,yBAAW,+BAAX,EAA4C;AACrE,kDAA4CD;AADyB,KAA5C,CAA3B;AAIAD,IAAAA,eAAe,GACb,6BAAC,qBAAD;AACE,MAAA,SAAS,EAAEE,kBADb;AAEE,MAAA,QAAQ,EAAEjB;AAFZ,OAGMO,KAHN;AAIE,MAAA,QAAQ,EAAEV;AAJZ,OADF;AAQD,GA/CG,CAiDJ;AACA;;;AAlDI,sBAmDqB,+BAnDrB;AAAA;AAAA,MAmDGqB,GAnDH;AAAA,MAmDQC,SAnDR;;AAoDJ,MAAMC,iBAAiB,GAAG,CAACd,QAAD,IAAa,CAACD,WAAxC;AACA,MAAMgB,YAAY,GAAGD,iBAAiB,GACpC;AACE,IAAA,GAAG,EAAEF,GADP;AAEE,IAAA,SAAS,EAAC,yBAFZ;AAGE,IAAA,KAAK,EAAE,OAAOvB,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCwB;AAH7C,KAIGxB,KAJH,CADoC,GAQpC;AAAM,IAAA,SAAS,EAAC;AAAhB,KAA2CA,KAA3C,CARF,CArDI,CAgEJ;;AACA,MAAI2B,WAAJ;;AAEA,MAAIxB,IAAI,IAAI,CAACD,UAAb,EAAyB;AACvByB,IAAAA,WAAW,GACT;AAAG,MAAA,IAAI,EAAExB,IAAT;AAAe,MAAA,SAAS,EAAC;AAAzB,OAAwDS,IAAxD,GACGE,QADH,EAEGY,YAFH,CADF;;AAOA,QAAIlB,OAAJ,EAAa;AACXO,MAAAA,OAAO,CAACC,IAAR,CACE,wGADF;AAGD;AACF,GAbD,MAaO,IAAKb,IAAI,IAAID,UAAT,IAAwBM,OAA5B,EAAqC;AAC1CmB,IAAAA,WAAW,GACT;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,SAAS,EAAC,0BAFZ;AAGE,MAAA,QAAQ,EAAEzB,UAHZ;AAIE,MAAA,OAAO,EAAEM;AAJX,OAKMI,IALN,GAMGE,QANH,EAOGY,YAPH,CADF;AAWD,GAZM,MAYA;AACLC,IAAAA,WAAW,GACT;AAAM,MAAA,SAAS,EAAC;AAAhB,OAA6Cf,IAA7C,GACGE,QADH,EAEGY,YAFH,CADF;AAMD;;AAED,MAAIhB,WAAJ,EAAiB;AACfiB,IAAAA,WAAW,GACT;AAAI,MAAA,SAAS,EAAEd;AAAf,OACE,6BAAC,oBAAD;AACE,MAAA,eAAe,EAAC,2BADlB;AAEE,MAAA,OAAO,EAAEb,KAFX;AAGE,MAAA,QAAQ,EAAC,OAHX;AAIE,MAAA,KAAK,EAAC,MAJR;AAKE,MAAA,IAAI,EAAC;AALP,OAMG2B,WANH,CADF,CADF;AAYD,GAbD,MAaO;AACLA,IAAAA,WAAW,GACT;AAAI,MAAA,SAAS,EAAEd;AAAf,OACGc,WADH,EAEGP,eAFH,CADF;AAMD;;AAED,SAAO,6BAAC,eAAD,QAAWO,WAAX,CAAP;AACD,CA1IM;;;AA4IP5B,gBAAgB,CAAC6B,SAAjB,GAA6B;AAC3BxB,EAAAA,SAAS,EAAEyB,mBAAUC,MADM;;AAG3B;;;AAGArB,EAAAA,IAAI,EAAEoB,mBAAUE,KAAV,CAAgBnC,KAAhB,CANqB;;AAQ3B;;;AAGAI,EAAAA,KAAK,EAAE6B,mBAAUG,IAAV,CAAeC,UAXK;;AAa3B;;;AAGAhC,EAAAA,QAAQ,EAAE4B,mBAAUK,IAhBO;;AAkB3B;;;AAGAhC,EAAAA,UAAU,EAAE2B,mBAAUK,IArBK;;AAuB3B;;;AAGA/B,EAAAA,IAAI,EAAE0B,mBAAUC,MA1BW;;AA4B3B;;;AAGAzB,EAAAA,QAAQ,EAAE8B,kBA/BiB;;AAiC3B;;;;AAIA7B,EAAAA,IAAI,EAAEuB,mBAAUO,OArCW;;AAuC3B;;;AAGA1B,EAAAA,WAAW,EAAEmB,mBAAUK,IA1CI;;AA4C3B;;;;AAIA3B,EAAAA,WAAW,EAAEsB,mBAAUQ,KAAV,CAAgB;AAC3BhC,IAAAA,QAAQ,EAAE8B,mBAAaF,UADI;AAE3BZ,IAAAA,UAAU,EAAEQ,mBAAUK;AAFK,GAAhB,CAhDc;AAqD3B1B,EAAAA,OAAO,EAAEqB,mBAAUS,IArDQ;;AAuD3B;;;AAGA3B,EAAAA,QAAQ,EAAEkB,mBAAUK;AA1DO,CAA7B;AA6DAnC,gBAAgB,CAACwC,YAAjB,GAAgC;AAC9BtC,EAAAA,QAAQ,EAAE,KADoB;AAE9BC,EAAAA,UAAU,EAAE,KAFkB;AAG9BO,EAAAA,IAAI,EAAE,GAHwB;AAI9BC,EAAAA,WAAW,EAAE;AAJiB,CAAhC","sourcesContent":["import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport { EuiButtonIcon } from '../button';\nimport { IconPropType, EuiIcon } from '../icon';\nimport { EuiToolTip } from '../tool_tip';\nimport { useInnerText } from '../inner_text';\n\nconst sizeToClassNameMap = {\n  xs: 'euiListGroupItem--xSmall',\n  s: 'euiListGroupItem--small',\n  m: 'euiListGroupItem--medium',\n  l: 'euiListGroupItem--large',\n};\n\nexport const SIZES = Object.keys(sizeToClassNameMap);\n\nexport const EuiListGroupItem = ({\n  label,\n  isActive,\n  isDisabled,\n  href,\n  className,\n  iconType,\n  icon,\n  extraAction,\n  onClick,\n  size,\n  showToolTip,\n  wrapText,\n  ...rest\n}) => {\n  const classes = classNames(\n    'euiListGroupItem',\n    sizeToClassNameMap[size],\n    {\n      'euiListGroupItem-isActive': isActive,\n      'euiListGroupItem-isDisabled': isDisabled,\n      'euiListGroupItem-isClickable': href || onClick,\n      'euiListGroupItem-hasExtraAction': extraAction,\n      'euiListGroupItem--wrapText': wrapText,\n    },\n    className\n  );\n\n  let iconNode;\n\n  if (iconType) {\n    iconNode = <EuiIcon className=\"euiListGroupItem__icon\" type={iconType} />;\n\n    if (icon) {\n      console.warn(\n        'Both `iconType` and `icon` were passed to EuiListGroupItem but only one can exist. The `iconType` was used.'\n      );\n    }\n  } else if (icon) {\n    iconNode = React.cloneElement(icon, {\n      className: classNames('euiListGroupItem__icon', icon.props.className),\n    });\n  }\n\n  let extraActionNode;\n\n  if (extraAction) {\n    const { iconType, alwaysShow, ...rest } = extraAction;\n\n    const extraActionClasses = classNames('euiListGroupItem__extraAction', {\n      'euiListGroupItem__extraAction-alwaysShow': alwaysShow,\n    });\n\n    extraActionNode = (\n      <EuiButtonIcon\n        className={extraActionClasses}\n        iconType={iconType}\n        {...rest}\n        disabled={isDisabled}\n      />\n    );\n  }\n\n  // Only add the label as the title attribute if it's possibly truncated\n  // Also ensure the value of the title attribute is a string\n  const [ref, innerText] = useInnerText();\n  const shouldRenderTitle = !wrapText && !showToolTip;\n  const labelContent = shouldRenderTitle ? (\n    <span\n      ref={ref}\n      className=\"euiListGroupItem__label\"\n      title={typeof label === 'string' ? label : innerText}>\n      {label}\n    </span>\n  ) : (\n    <span className=\"euiListGroupItem__label\">{label}</span>\n  );\n\n  // Handle the variety of interaction behavior\n  let itemContent;\n\n  if (href && !isDisabled) {\n    itemContent = (\n      <a href={href} className=\"euiListGroupItem__button\" {...rest}>\n        {iconNode}\n        {labelContent}\n      </a>\n    );\n\n    if (onClick) {\n      console.warn(\n        'Both `href` and `onClick` were passed to EuiListGroupItem but only one can exist. The `href` was used.'\n      );\n    }\n  } else if ((href && isDisabled) || onClick) {\n    itemContent = (\n      <button\n        type=\"button\"\n        className=\"euiListGroupItem__button\"\n        disabled={isDisabled}\n        onClick={onClick}\n        {...rest}>\n        {iconNode}\n        {labelContent}\n      </button>\n    );\n  } else {\n    itemContent = (\n      <span className=\"euiListGroupItem__text\" {...rest}>\n        {iconNode}\n        {labelContent}\n      </span>\n    );\n  }\n\n  if (showToolTip) {\n    itemContent = (\n      <li className={classes}>\n        <EuiToolTip\n          anchorClassName=\"euiListGroupItem__tooltip\"\n          content={label}\n          position=\"right\"\n          delay=\"long\"\n          size=\"s\">\n          {itemContent}\n        </EuiToolTip>\n      </li>\n    );\n  } else {\n    itemContent = (\n      <li className={classes}>\n        {itemContent}\n        {extraActionNode}\n      </li>\n    );\n  }\n\n  return <Fragment>{itemContent}</Fragment>;\n};\n\nEuiListGroupItem.propTypes = {\n  className: PropTypes.string,\n\n  /**\n   * Set the size of the label text\n   */\n  size: PropTypes.oneOf(SIZES),\n\n  /**\n   * Content to be displyed in the list item\n   */\n  label: PropTypes.node.isRequired,\n\n  /**\n   * Apply styles indicating an item is active\n   */\n  isActive: PropTypes.bool,\n\n  /**\n   * Apply styles indicating an item is disabled\n   */\n  isDisabled: PropTypes.bool,\n\n  /**\n   * Make the list item label a link\n   */\n  href: PropTypes.string,\n\n  /**\n   * Adds `EuiIcon` of `EuiIcon.type`\n   */\n  iconType: IconPropType,\n\n  /**\n   * Custom node to pass as the icon. Cannot be used in conjunction\n   * with `iconType`.\n   */\n  icon: PropTypes.element,\n\n  /**\n   * Display tooltip on list item\n   */\n  showToolTip: PropTypes.bool,\n\n  /**\n   * Adds an `EuiButtonIcon` to the right side of the item; `iconType` is required;\n   * pass `alwaysShow` if you don't want the default behavior of only showing on hover\n   */\n  extraAction: PropTypes.shape({\n    iconType: IconPropType.isRequired,\n    alwaysShow: PropTypes.bool,\n  }),\n\n  onClick: PropTypes.func,\n\n  /**\n   * Allow link text to wrap\n   */\n  wrapText: PropTypes.bool,\n};\n\nEuiListGroupItem.defaultProps = {\n  isActive: false,\n  isDisabled: false,\n  size: 'm',\n  showToolTip: false,\n};\n"]}]}