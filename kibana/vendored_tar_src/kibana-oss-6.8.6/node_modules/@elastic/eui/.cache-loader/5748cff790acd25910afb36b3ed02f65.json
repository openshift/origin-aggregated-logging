{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src-docs/src/views/code/code_example.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src-docs/src/views/code/code_example.js","mtime":1565204169442},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CodeExample = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _services = require(\"../../services\");\n\nvar _components = require(\"../../components\");\n\nvar _components2 = require(\"../../../../src/components\");\n\nvar _code = _interopRequireDefault(require(\"./code\"));\n\nvar _code_block = _interopRequireDefault(require(\"./code_block\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar codeSource = require('!!raw-loader!./code');\n\nvar codeHtml = (0, _services.renderToHtml)(_code.default);\nvar codeSnippet = '<EuiCode>Text to be formatted</EuiCode>';\n\nvar codeBlockSource = require('!!raw-loader!./code_block');\n\nvar codeBlockHtml = (0, _services.renderToHtml)(_code_block.default);\nvar codeBlockSnippet = \"<EuiCodeBlock language=\\\"html\\\" paddingSize=\\\"s\\\" isCopyable>\\n  { `<h1>Title</h1>` }\\n</EuiCodeBlock>\\n\";\nvar CodeExample = {\n  title: 'Code',\n  sections: [{\n    title: 'Inline',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: codeSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: codeHtml\n    }],\n    text: _react.default.createElement(\"p\", null, _react.default.createElement(_components2.EuiCode, null, \"Code\"), \" is for making inline code snippets that can work within or next to bodies of text.\"),\n    snippet: codeSnippet,\n    demo: _react.default.createElement(_code.default, null)\n  }, {\n    title: 'CodeBlock',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: codeBlockSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: codeBlockHtml\n    }],\n    text: _react.default.createElement(\"p\", null, _react.default.createElement(_components2.EuiCode, null, \"EuiCodeBlock\"), \" can be used to create multi-line code blocks. Copy and fullscreen buttons can be enabled via the\", _react.default.createElement(_components2.EuiCode, null, \"isCopyable\"), \" and \", _react.default.createElement(_components2.EuiCode, null, \"overflowHeight\"), \"props, respectively.\"),\n    snippet: codeBlockSnippet,\n    props: {\n      EuiCodeBlockImpl: _components2.EuiCodeBlockImpl\n    },\n    demo: _react.default.createElement(_code_block.default, null)\n  }]\n};\nexports.CodeExample = CodeExample;",{"version":3,"sources":["/Users/chanderprall/projects/eui/src-docs/src/views/code/code_example.js"],"names":["codeSource","require","codeHtml","Code","codeSnippet","codeBlockSource","codeBlockHtml","CodeBlock","codeBlockSnippet","CodeExample","title","sections","source","type","GuideSectionTypes","JS","code","HTML","text","snippet","demo","props","EuiCodeBlockImpl"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;;AAEA;;AAEA;;AAKA;;;;AAJA,IAAMA,UAAU,GAAGC,OAAO,CAAC,qBAAD,CAA1B;;AACA,IAAMC,QAAQ,GAAG,4BAAaC,aAAb,CAAjB;AACA,IAAMC,WAAW,GAAG,yCAApB;;AAGA,IAAMC,eAAe,GAAGJ,OAAO,CAAC,2BAAD,CAA/B;;AACA,IAAMK,aAAa,GAAG,4BAAaC,mBAAb,CAAtB;AACA,IAAMC,gBAAgB,6GAAtB;AAKO,IAAMC,WAAW,GAAG;AACzBC,EAAAA,KAAK,EAAE,MADkB;AAEzBC,EAAAA,QAAQ,EAAE,CACR;AACED,IAAAA,KAAK,EAAE,QADT;AAEEE,IAAAA,MAAM,EAAE,CACN;AACEC,MAAAA,IAAI,EAAEC,8BAAkBC,EAD1B;AAEEC,MAAAA,IAAI,EAAEhB;AAFR,KADM,EAKN;AACEa,MAAAA,IAAI,EAAEC,8BAAkBG,IAD1B;AAEED,MAAAA,IAAI,EAAEd;AAFR,KALM,CAFV;AAYEgB,IAAAA,IAAI,EACF,wCACE,6BAAC,oBAAD,eADF,wFAbJ;AAkBEC,IAAAA,OAAO,EAAEf,WAlBX;AAmBEgB,IAAAA,IAAI,EAAE,6BAAC,aAAD;AAnBR,GADQ,EAsBR;AACEV,IAAAA,KAAK,EAAE,WADT;AAEEE,IAAAA,MAAM,EAAE,CACN;AACEC,MAAAA,IAAI,EAAEC,8BAAkBC,EAD1B;AAEEC,MAAAA,IAAI,EAAEX;AAFR,KADM,EAKN;AACEQ,MAAAA,IAAI,EAAEC,8BAAkBG,IAD1B;AAEED,MAAAA,IAAI,EAAEV;AAFR,KALM,CAFV;AAYEY,IAAAA,IAAI,EACF,wCACE,6BAAC,oBAAD,uBADF,uGAGE,6BAAC,oBAAD,qBAHF,WAGoC,6BAAC,oBAAD,yBAHpC,yBAbJ;AAoBEC,IAAAA,OAAO,EAAEX,gBApBX;AAqBEa,IAAAA,KAAK,EAAE;AAAEC,MAAAA,gBAAgB,EAAhBA;AAAF,KArBT;AAsBEF,IAAAA,IAAI,EAAE,6BAAC,mBAAD;AAtBR,GAtBQ;AAFe,CAApB","sourcesContent":["import React from 'react';\n\nimport { renderToHtml } from '../../services';\n\nimport { GuideSectionTypes } from '../../components';\n\nimport { EuiCode, EuiCodeBlockImpl } from '../../../../src/components';\n\nimport Code from './code';\nconst codeSource = require('!!raw-loader!./code');\nconst codeHtml = renderToHtml(Code);\nconst codeSnippet = '<EuiCode>Text to be formatted</EuiCode>';\n\nimport CodeBlock from './code_block';\nconst codeBlockSource = require('!!raw-loader!./code_block');\nconst codeBlockHtml = renderToHtml(CodeBlock);\nconst codeBlockSnippet = `<EuiCodeBlock language=\"html\" paddingSize=\"s\" isCopyable>\n  { \\`<h1>Title</h1>\\` }\n</EuiCodeBlock>\n`;\n\nexport const CodeExample = {\n  title: 'Code',\n  sections: [\n    {\n      title: 'Inline',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: codeSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: codeHtml,\n        },\n      ],\n      text: (\n        <p>\n          <EuiCode>Code</EuiCode> is for making inline code snippets that can\n          work within or next to bodies of text.\n        </p>\n      ),\n      snippet: codeSnippet,\n      demo: <Code />,\n    },\n    {\n      title: 'CodeBlock',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: codeBlockSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: codeBlockHtml,\n        },\n      ],\n      text: (\n        <p>\n          <EuiCode>EuiCodeBlock</EuiCode> can be used to create multi-line code\n          blocks. Copy and fullscreen buttons can be enabled via the\n          <EuiCode>isCopyable</EuiCode> and <EuiCode>overflowHeight</EuiCode>\n          props, respectively.\n        </p>\n      ),\n      snippet: codeBlockSnippet,\n      props: { EuiCodeBlockImpl },\n      demo: <CodeBlock />,\n    },\n  ],\n};\n"]}]}