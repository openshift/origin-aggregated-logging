{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/button/button_toggle/button_toggle.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/button/button_toggle/button_toggle.js","mtime":1567534071240},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EuiButtonToggle = void 0;\n\nrequire(\"core-js/modules/es6.object.assign\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _toggle = require(\"../../toggle\");\n\nvar _button = require(\"../button\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nvar EuiButtonToggle = function EuiButtonToggle(_ref) {\n  var className = _ref.className,\n      color = _ref.color,\n      isDisabled = _ref.isDisabled,\n      isEmpty = _ref.isEmpty,\n      isIconOnly = _ref.isIconOnly,\n      isSelected = _ref.isSelected,\n      label = _ref.label,\n      name = _ref.name,\n      onChange = _ref.onChange,\n      toggleClassName = _ref.toggleClassName,\n      type = _ref.type,\n      value = _ref.value,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"color\", \"isDisabled\", \"isEmpty\", \"isIconOnly\", \"isSelected\", \"label\", \"name\", \"onChange\", \"toggleClassName\", \"type\", \"value\"]);\n\n  var classes = (0, _classnames.default)('euiButtonToggle', {\n    'euiButtonToggle--isIconOnly': isIconOnly,\n    'euiButtonToggle--isEmpty': isEmpty\n  }, className);\n  var wrapperClasses = (0, _classnames.default)('euiButtonToggle__wrapper', {\n    'euiButtonToggle--isDisabled': isDisabled\n  }, toggleClassName);\n  var buttonContent = isIconOnly ? '' : label;\n  return _react.default.createElement(_toggle.EuiToggle, {\n    className: wrapperClasses,\n    inputClassName: \"euiButtonToggle__input\",\n    checked: isSelected,\n    isDisabled: isDisabled,\n    label: label,\n    name: name,\n    onChange: onChange,\n    type: type,\n    title: label,\n    value: value\n  }, _react.default.createElement(_button.EuiButton, _extends({\n    tabIndex: \"-1\" // prevents double focus from input to button\n    ,\n    className: classes,\n    color: color,\n    disabled: isDisabled,\n    size: isIconOnly ? 's' : undefined // only force small if it's the icon only version\n\n  }, rest), buttonContent));\n};\n\nexports.EuiButtonToggle = EuiButtonToggle;\nEuiButtonToggle.propTypes = {\n  className: _propTypes.default.string,\n\n  /**\n   * Button label, which is also passed to `EuiToggle` as the input's label\n   */\n  label: _propTypes.default.string.isRequired,\n  onChange: _propTypes.default.func,\n\n  /**\n   * See `EuiButton`\n   */\n  color: _propTypes.default.string,\n  isDisabled: _propTypes.default.bool,\n\n  /**\n   * Hides the label from the button content and only displays the icon\n   */\n  isIconOnly: _propTypes.default.bool,\n\n  /**\n   * Simulates a `EuiButtonEmpty`\n   */\n  isEmpty: _propTypes.default.bool,\n\n  /**\n   * Initial state of the toggle\n   */\n  isSelected: _propTypes.default.bool,\n\n  /**\n   * Classnames to add to `EuiToggle` instead of the `EuiButton`\n   */\n  toggleClassName: _propTypes.default.string,\n\n  /**\n   * Is the button a single action or part of a group (multi)?\n   * Used primarily for `EuiButtonGroup`\n   */\n  type: _propTypes.default.oneOf(_toggle.TOGGLE_TYPES)\n};\nEuiButtonToggle.defaultProps = {\n  color: 'primary'\n};\nEuiButtonToggle.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"EuiButtonToggle\",\n  \"props\": {\n    \"color\": {\n      \"defaultValue\": {\n        \"value\": \"'primary'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"See `EuiButton`\"\n    },\n    \"className\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Button label, which is also passed to `EuiToggle` as the input's label\"\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"isDisabled\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"isIconOnly\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Hides the label from the button content and only displays the icon\"\n    },\n    \"isEmpty\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Simulates a `EuiButtonEmpty`\"\n    },\n    \"isSelected\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Initial state of the toggle\"\n    },\n    \"toggleClassName\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Classnames to add to `EuiToggle` instead of the `EuiButton`\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"computed\": true,\n        \"value\": \"TOGGLE_TYPES\"\n      },\n      \"required\": false,\n      \"description\": \"Is the button a single action or part of a group (multi)?\\nUsed primarily for `EuiButtonGroup`\"\n    }\n  }\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/button/button_toggle/button_toggle.js"],"names":["EuiButtonToggle","className","color","isDisabled","isEmpty","isIconOnly","isSelected","label","name","onChange","toggleClassName","type","value","rest","classes","wrapperClasses","buttonContent","undefined","propTypes","PropTypes","string","isRequired","func","bool","oneOf","TOGGLE_TYPES","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;AAEO,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,OAczB;AAAA,MAbJC,SAaI,QAbJA,SAaI;AAAA,MAZJC,KAYI,QAZJA,KAYI;AAAA,MAXJC,UAWI,QAXJA,UAWI;AAAA,MAVJC,OAUI,QAVJA,OAUI;AAAA,MATJC,UASI,QATJA,UASI;AAAA,MARJC,UAQI,QARJA,UAQI;AAAA,MAPJC,KAOI,QAPJA,KAOI;AAAA,MANJC,IAMI,QANJA,IAMI;AAAA,MALJC,QAKI,QALJA,QAKI;AAAA,MAJJC,eAII,QAJJA,eAII;AAAA,MAHJC,IAGI,QAHJA,IAGI;AAAA,MAFJC,KAEI,QAFJA,KAEI;AAAA,MADDC,IACC;;AACJ,MAAMC,OAAO,GAAG,yBACd,iBADc,EAEd;AACE,mCAA+BT,UADjC;AAEE,gCAA4BD;AAF9B,GAFc,EAMdH,SANc,CAAhB;AASA,MAAMc,cAAc,GAAG,yBACrB,0BADqB,EAErB;AACE,mCAA+BZ;AADjC,GAFqB,EAKrBO,eALqB,CAAvB;AAQA,MAAMM,aAAa,GAAGX,UAAU,GAAG,EAAH,GAAQE,KAAxC;AAEA,SACE,6BAAC,iBAAD;AACE,IAAA,SAAS,EAAEQ,cADb;AAEE,IAAA,cAAc,EAAC,wBAFjB;AAGE,IAAA,OAAO,EAAET,UAHX;AAIE,IAAA,UAAU,EAAEH,UAJd;AAKE,IAAA,KAAK,EAAEI,KALT;AAME,IAAA,IAAI,EAAEC,IANR;AAOE,IAAA,QAAQ,EAAEC,QAPZ;AAQE,IAAA,IAAI,EAAEE,IARR;AASE,IAAA,KAAK,EAAEJ,KATT;AAUE,IAAA,KAAK,EAAEK;AAVT,KAWE,6BAAC,iBAAD;AACE,IAAA,QAAQ,EAAC,IADX,CACgB;AADhB;AAEE,IAAA,SAAS,EAAEE,OAFb;AAGE,IAAA,KAAK,EAAEZ,KAHT;AAIE,IAAA,QAAQ,EAAEC,UAJZ;AAKE,IAAA,IAAI,EAAEE,UAAU,GAAG,GAAH,GAASY,SAL3B,CAKsC;;AALtC,KAMMJ,IANN,GAOGG,aAPH,CAXF,CADF;AAuBD,CAzDM;;;AA2DPhB,eAAe,CAACkB,SAAhB,GAA4B;AAC1BjB,EAAAA,SAAS,EAAEkB,mBAAUC,MADK;;AAG1B;;;AAGAb,EAAAA,KAAK,EAAEY,mBAAUC,MAAV,CAAiBC,UANE;AAO1BZ,EAAAA,QAAQ,EAAEU,mBAAUG,IAPM;;AAS1B;;;AAGApB,EAAAA,KAAK,EAAEiB,mBAAUC,MAZS;AAa1BjB,EAAAA,UAAU,EAAEgB,mBAAUI,IAbI;;AAe1B;;;AAGAlB,EAAAA,UAAU,EAAEc,mBAAUI,IAlBI;;AAoB1B;;;AAGAnB,EAAAA,OAAO,EAAEe,mBAAUI,IAvBO;;AAyB1B;;;AAGAjB,EAAAA,UAAU,EAAEa,mBAAUI,IA5BI;;AA8B1B;;;AAGAb,EAAAA,eAAe,EAAES,mBAAUC,MAjCD;;AAmC1B;;;;AAIAT,EAAAA,IAAI,EAAEQ,mBAAUK,KAAV,CAAgBC,oBAAhB;AAvCoB,CAA5B;AA0CAzB,eAAe,CAAC0B,YAAhB,GAA+B;AAC7BxB,EAAAA,KAAK,EAAE;AADsB,CAA/B","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport { EuiToggle, TOGGLE_TYPES } from '../../toggle';\nimport { EuiButton } from '../button';\n\nexport const EuiButtonToggle = ({\n  className,\n  color,\n  isDisabled,\n  isEmpty,\n  isIconOnly,\n  isSelected,\n  label,\n  name,\n  onChange,\n  toggleClassName,\n  type,\n  value,\n  ...rest\n}) => {\n  const classes = classNames(\n    'euiButtonToggle',\n    {\n      'euiButtonToggle--isIconOnly': isIconOnly,\n      'euiButtonToggle--isEmpty': isEmpty,\n    },\n    className\n  );\n\n  const wrapperClasses = classNames(\n    'euiButtonToggle__wrapper',\n    {\n      'euiButtonToggle--isDisabled': isDisabled,\n    },\n    toggleClassName\n  );\n\n  const buttonContent = isIconOnly ? '' : label;\n\n  return (\n    <EuiToggle\n      className={wrapperClasses}\n      inputClassName=\"euiButtonToggle__input\"\n      checked={isSelected}\n      isDisabled={isDisabled}\n      label={label}\n      name={name}\n      onChange={onChange}\n      type={type}\n      title={label}\n      value={value}>\n      <EuiButton\n        tabIndex=\"-1\" // prevents double focus from input to button\n        className={classes}\n        color={color}\n        disabled={isDisabled}\n        size={isIconOnly ? 's' : undefined} // only force small if it's the icon only version\n        {...rest}>\n        {buttonContent}\n      </EuiButton>\n    </EuiToggle>\n  );\n};\n\nEuiButtonToggle.propTypes = {\n  className: PropTypes.string,\n\n  /**\n   * Button label, which is also passed to `EuiToggle` as the input's label\n   */\n  label: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n\n  /**\n   * See `EuiButton`\n   */\n  color: PropTypes.string,\n  isDisabled: PropTypes.bool,\n\n  /**\n   * Hides the label from the button content and only displays the icon\n   */\n  isIconOnly: PropTypes.bool,\n\n  /**\n   * Simulates a `EuiButtonEmpty`\n   */\n  isEmpty: PropTypes.bool,\n\n  /**\n   * Initial state of the toggle\n   */\n  isSelected: PropTypes.bool,\n\n  /**\n   * Classnames to add to `EuiToggle` instead of the `EuiButton`\n   */\n  toggleClassName: PropTypes.string,\n\n  /**\n   * Is the button a single action or part of a group (multi)?\n   * Used primarily for `EuiButtonGroup`\n   */\n  type: PropTypes.oneOf(TOGGLE_TYPES),\n};\n\nEuiButtonToggle.defaultProps = {\n  color: 'primary',\n};\n"]}]}