{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src-docs/src/views/range/range_example.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src-docs/src/views/range/range_example.js","mtime":1565204169533},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RangeControlExample = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _services = require(\"../../services\");\n\nvar _components = require(\"../../components\");\n\nvar _components2 = require(\"../../../../src/components\");\n\nvar _range_levels = require(\"../../../../src/components/form/range/range_levels\");\n\nvar _range_ticks = require(\"../../../../src/components/form/range/range_ticks\");\n\nvar _range_input = require(\"../../../../src/components/form/range/range_input\");\n\nvar _dual_range = _interopRequireDefault(require(\"./dual_range\"));\n\nvar _range = _interopRequireDefault(require(\"./range\"));\n\nvar _input = _interopRequireDefault(require(\"./input\"));\n\nvar _ticks = _interopRequireDefault(require(\"./ticks\"));\n\nvar _levels = _interopRequireDefault(require(\"./levels\"));\n\nvar _states = _interopRequireDefault(require(\"./states\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nvar dualRangeSource = require('!!raw-loader!./dual_range');\n\nvar dualRangeHtml = (0, _services.renderToHtml)(_dual_range.default);\n\nvar rangeSource = require('!!raw-loader!./range');\n\nvar rangeHtml = (0, _services.renderToHtml)(_range.default);\n\nvar inputSource = require('!!raw-loader!./input');\n\nvar inputHtml = (0, _services.renderToHtml)(_input.default);\n\nvar ticksSource = require('!!raw-loader!./ticks');\n\nvar ticksHtml = (0, _services.renderToHtml)(_ticks.default);\n\nvar levelsSource = require('!!raw-loader!./levels');\n\nvar levelsHtml = (0, _services.renderToHtml)(_levels.default);\n\nvar statesSource = require('!!raw-loader!./states');\n\nvar statesHtml = (0, _services.renderToHtml)(_states.default);\nvar RangeControlExample = {\n  title: 'Range sliders',\n  intro: _react.default.createElement(_react.Fragment, null, _react.default.createElement(_components2.EuiCallOut, {\n    color: \"warning\",\n    title: \"Understanding precision\"\n  }, _react.default.createElement(\"p\", null, \"Range sliders should only be used when\", ' ', _react.default.createElement(\"strong\", null, \"the precise value is not considered important\"), \". If the precise value does matter, add the \", _react.default.createElement(_components2.EuiCode, null, \"showInput\"), \" prop or use a \", _react.default.createElement(_components2.EuiCode, null, \"EuiFieldNumber\"), \" instead.\")), _react.default.createElement(_components2.EuiSpacer, null)),\n  sections: [{\n    title: 'Single range',\n    text: _react.default.createElement(_react.Fragment, null, _react.default.createElement(\"h3\", null, \"Required\"), _react.default.createElement(\"ul\", null, _react.default.createElement(\"li\", null, _react.default.createElement(_components2.EuiCode, null, \"min, max\"), \": Sets the range values.\"), _react.default.createElement(\"li\", null, _react.default.createElement(_components2.EuiCode, null, \"step\"), \": Technically not required because the default is \", _react.default.createElement(_components2.EuiCode, null, \"1\"), \".\"), _react.default.createElement(\"li\", null, _react.default.createElement(_components2.EuiCode, null, \"value, onChange\"))), _react.default.createElement(\"h3\", null, \"Optional\"), _react.default.createElement(\"ul\", null, _react.default.createElement(\"li\", null, _react.default.createElement(_components2.EuiCode, null, \"showLabels\"), \": While currently considered optional, the property should be added to explicitly state the range to the user.\"), _react.default.createElement(\"li\", null, _react.default.createElement(_components2.EuiCode, null, \"showValue\"), \": Displays a tooltip style indicator of the selected value. You can add \", _react.default.createElement(_components2.EuiCode, null, \"valuePrepend\"), ' ', \"and/or \", _react.default.createElement(_components2.EuiCode, null, \"valueAppend\"), \" to bookend the value with custom content.\"), _react.default.createElement(\"li\", null, _react.default.createElement(_components2.EuiCode, null, \"showRange\"), \": Displays a thickened line from the minimum value to the selected value.\"))),\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: rangeSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: rangeHtml\n    }],\n    props: {\n      EuiRange: _components2.EuiRange\n    },\n    demo: _react.default.createElement(_range.default, null),\n    snippet: \"<EuiRange\\n  min={100}\\n  max={200}\\n  step={0.05}\\n  value={this.state.value}\\n  onChange={this.onChange}\\n  showLabels\\n/>\\n\\n// Show tooltip\\n<EuiRange\\n  min={100}\\n  max={200}\\n  value={this.state.value}\\n  onChange={this.onChange}\\n  showLabels\\n  showValue\\n/>\\n\\n// Show thickened range and prepend a string to the tooltip\\n<EuiRange\\n  min={100}\\n  max={200}\\n  value={this.state.value}\\n  onChange={this.onChange}\\n  showLabels\\n  showRange\\n  showValue\\n  valuePrepend=\\\"100 - \\\"\\n/>\"\n  }, {\n    title: 'Dual range',\n    text: _react.default.createElement(_react.Fragment, null, _react.default.createElement(\"p\", null, \"The EuiDualRange accepts almost all the same props as the regular EuiRange, with the exception of \", _react.default.createElement(_components2.EuiCode, null, \"showRange\"), \" which is on by default, and \", _react.default.createElement(_components2.EuiCode, null, \"showValue\"), \" since tooltips don't fit properly when there are two.\"), _react.default.createElement(_components2.EuiCallOut, {\n      color: \"warning\",\n      title: \"Retrieving field values\"\n    }, _react.default.createElement(\"p\", null, \"Two-value \", _react.default.createElement(_components2.EuiCode, null, \"input[type=range]\"), \" elements are not part of the HTML5 specification. Because of this support gap, EuiDualRange cannot expose a native \", _react.default.createElement(_components2.EuiCode, null, \"value\"), ' ', \"property for native form to consumption.\", _react.default.createElement(\"strong\", null, \"The React \", _react.default.createElement(_components2.EuiCode, null, \"onChange\"), \" prop is the recommended method for retrieving the upper and lower values.\")), _react.default.createElement(\"p\", null, \"EuiDualRange does use native inputs to help validate step values and range limits. These may be used as form values when\", ' ', _react.default.createElement(_components2.EuiCode, null, \"showInput\"), \" is in use. The alternative is to store values in \", _react.default.createElement(_components2.EuiCode, null, \"input[type=hidden]\"), \".\"))),\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: dualRangeSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: dualRangeHtml\n    }],\n    props: {\n      EuiDualRange: _components2.EuiDualRange\n    },\n    demo: _react.default.createElement(_dual_range.default, null),\n    snippet: \"<EuiDualRange\\n  min={100}\\n  max={200}\\n  step={10}\\n  value={this.state.value}\\n  onChange={this.onChange}\\n  showLabels\\n/>\"\n  }, {\n    title: 'Inputs',\n    text: _react.default.createElement(_react.Fragment, null, _react.default.createElement(\"p\", null, \"The \", _react.default.createElement(_components2.EuiCode, null, \"showInput\"), \" prop, will append or bookend the range slider with number type inputs. This is important for allowing precise values to be entered by the user.\"), _react.default.createElement(\"p\", null, \"Passing empty strings as the \", _react.default.createElement(_components2.EuiCode, null, \"value\"), \" to the ranges, will allow the inputs to be blank, though the range handles will show at the min (or max and min) positions.\")),\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: inputSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: inputHtml\n    }],\n    demo: _react.default.createElement(_input.default, null),\n    props: {\n      EuiRangeInput: _range_input.EuiRangeInput\n    },\n    snippet: \"<EuiRange showInput />\\n\\n<EuiDualRange showInput />\"\n  }, {\n    title: 'Tick marks',\n    text: _react.default.createElement(_react.Fragment, null, _react.default.createElement(\"p\", null, \"To show clickable tick marks and labels at a given interval, add the prop \", _react.default.createElement(_components2.EuiCode, null, \"showTicks\"), \". By default, tick mark interval is bound to the \", _react.default.createElement(_components2.EuiCode, null, \"step\"), \" prop, however, you can set a custom interval without changing the actual steps allowed by passing a number to the \", _react.default.createElement(_components2.EuiCode, null, \"tickInterval\"), \" prop.\"), _react.default.createElement(\"p\", null, \"To pass completely custom tick marks, you can pass an array of objects that require a \", _react.default.createElement(_components2.EuiCode, null, \"value\"), \" and\", ' ', _react.default.createElement(_components2.EuiCode, null, \"label\"), \". The value must be included in the range of values (min-max), though the label may be anythin you choose.\"), _react.default.createElement(_components2.EuiCallOut, {\n      color: \"warning\",\n      title: \"Maximum of 20 ticks allowed\"\n    }, _react.default.createElement(\"p\", null, \"Spacing can get quite cramped with lots of ticks so we max out the number to 20.\"))),\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: ticksSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: ticksHtml\n    }],\n    demo: _react.default.createElement(_ticks.default, null),\n    props: {\n      EuiRangeTicks: _range_ticks.EuiRangeTicks\n    },\n    snippet: \"<EuiRange step={10} showTicks />\\n\\n<EuiRange showTicks tickInterval={20} />\\n\\n<EuiDualRange\\n  showTicks\\n  ticks={[\\n    { label: '20kb', value: 20 },\\n    { label: '100kb', value: 100 }\\n  ]}\\n/>\"\n  }, {\n    title: 'Levels',\n    text: _react.default.createElement(_react.Fragment, null, _react.default.createElement(\"p\", null, \"To create colored indicators for certain intervals, pass an array of objects that include a \", _react.default.createElement(_components2.EuiCode, null, \"min\"), \",\", ' ', _react.default.createElement(_components2.EuiCode, null, \"max\"), \" and \", _react.default.createElement(_components2.EuiCode, null, \"color\"), \". Color options are \", _react.default.createElement(_components2.EuiCode, null, JSON.stringify(_range_levels.LEVEL_COLORS, null, 2)), \".\"), _react.default.createElement(\"p\", null, \"Be sure to then add an \", _react.default.createElement(_components2.EuiCode, null, \"aria-describedby\"), \" and match it to the id of a \", _react.default.createElement(_components2.EuiCode, null, \"EuiFormHelpText\"), \".\")),\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: levelsSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: levelsHtml\n    }],\n    demo: _react.default.createElement(_levels.default, null),\n    props: {\n      EuiRangeLevels: _range_levels.EuiRangeLevels\n    },\n    snippet: \"<EuiRange\\n  levels={[\\n    {min: 0, max: 20, color: 'danger'},\\n    {min: 20, max: 100, color: 'success'}\\n  ]}\\n  aria-describedBy={replaceWithID}\\n/>\\n\\n<EuiDualRange\\n  levels={[\\n    {min: 0, max: 20, color: 'danger'},\\n    {min: 20, max: 100, color: 'success'}\\n  ]}\\n  aria-describedBy={replaceWithID}\\n/>\"\n  }, {\n    title: 'Kitchen sink',\n    text: _react.default.createElement(_react.Fragment, null, _react.default.createElement(\"p\", null, \"Other alterations you can add to the range are\", ' ', _react.default.createElement(_components2.EuiCode, null, \"compressed\"), \", \", _react.default.createElement(_components2.EuiCode, null, \"fullWidth\"), \", and\", ' ', _react.default.createElement(_components2.EuiCode, null, \"disabled\"), \".\")),\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: statesSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: statesHtml\n    }],\n    demo: _react.default.createElement(_states.default, null),\n    snippet: \"<EuiRange\\n  id=\\\"\\\"\\n  value={}\\n  onChange={() => {}}\\n  compressed\\n  fullWidth\\n  disabled\\n  showTicks\\n  showInput\\n  showLabels\\n  showValue\\n  showRange\\n  tickInterval={}\\n  levels={[]}\\n  aria-describedBy={replaceWithID}\\n/>\\n\\n<EuiDualRange\\n  id=\\\"\\\"\\n  value={}\\n  onChange={() => {}}\\n  compressed\\n  fullWidth\\n  disabled\\n  showLabels\\n  showInput\\n  showTicks\\n  ticks={[]}\\n  levels={[]}\\n  aria-describedBy={replaceWithID}\\n/>\"\n  }]\n};\nexports.RangeControlExample = RangeControlExample;",{"version":3,"sources":["/Users/chanderprall/projects/eui/src-docs/src/views/range/range_example.js"],"names":["dualRangeSource","require","dualRangeHtml","DualRangeExample","rangeSource","rangeHtml","RangeExample","inputSource","inputHtml","InputExample","ticksSource","ticksHtml","TicksExample","levelsSource","levelsHtml","LevelsExample","statesSource","statesHtml","StatesExample","RangeControlExample","title","intro","sections","text","source","type","GuideSectionTypes","JS","code","HTML","props","EuiRange","demo","snippet","EuiDualRange","EuiRangeInput","EuiRangeTicks","JSON","stringify","LEVEL_COLORS","EuiRangeLevels"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\n\nimport { renderToHtml } from '../../services';\n\nimport { GuideSectionTypes } from '../../components';\n\nimport {\n  EuiCallOut,\n  EuiDualRange,\n  EuiRange,\n  EuiSpacer,\n  EuiCode,\n} from '../../../../src/components';\n\nimport {\n  EuiRangeLevels,\n  LEVEL_COLORS,\n} from '../../../../src/components/form/range/range_levels';\n\nimport { EuiRangeTicks } from '../../../../src/components/form/range/range_ticks';\n\nimport { EuiRangeInput } from '../../../../src/components/form/range/range_input';\n\nimport DualRangeExample from './dual_range';\nconst dualRangeSource = require('!!raw-loader!./dual_range');\nconst dualRangeHtml = renderToHtml(DualRangeExample);\n\nimport RangeExample from './range';\nconst rangeSource = require('!!raw-loader!./range');\nconst rangeHtml = renderToHtml(RangeExample);\n\nimport InputExample from './input';\nconst inputSource = require('!!raw-loader!./input');\nconst inputHtml = renderToHtml(InputExample);\n\nimport TicksExample from './ticks';\nconst ticksSource = require('!!raw-loader!./ticks');\nconst ticksHtml = renderToHtml(TicksExample);\n\nimport LevelsExample from './levels';\nconst levelsSource = require('!!raw-loader!./levels');\nconst levelsHtml = renderToHtml(LevelsExample);\n\nimport StatesExample from './states';\nconst statesSource = require('!!raw-loader!./states');\nconst statesHtml = renderToHtml(StatesExample);\n\nexport const RangeControlExample = {\n  title: 'Range sliders',\n  intro: (\n    <Fragment>\n      <EuiCallOut color=\"warning\" title=\"Understanding precision\">\n        <p>\n          Range sliders should only be used when{' '}\n          <strong>the precise value is not considered important</strong>. If the\n          precise value does matter, add the <EuiCode>showInput</EuiCode> prop\n          or use a <EuiCode>EuiFieldNumber</EuiCode> instead.\n        </p>\n      </EuiCallOut>\n      <EuiSpacer />\n    </Fragment>\n  ),\n  sections: [\n    {\n      title: 'Single range',\n      text: (\n        <Fragment>\n          <h3>Required</h3>\n          <ul>\n            <li>\n              <EuiCode>min, max</EuiCode>: Sets the range values.\n            </li>\n            <li>\n              <EuiCode>step</EuiCode>: Technically not required because the\n              default is <EuiCode>1</EuiCode>.\n            </li>\n            <li>\n              <EuiCode>value, onChange</EuiCode>\n            </li>\n          </ul>\n          <h3>Optional</h3>\n          <ul>\n            <li>\n              <EuiCode>showLabels</EuiCode>: While currently considered\n              optional, the property should be added to explicitly state the\n              range to the user.\n            </li>\n            <li>\n              <EuiCode>showValue</EuiCode>: Displays a tooltip style indicator\n              of the selected value. You can add <EuiCode>valuePrepend</EuiCode>{' '}\n              and/or <EuiCode>valueAppend</EuiCode> to bookend the value with\n              custom content.\n            </li>\n            <li>\n              <EuiCode>showRange</EuiCode>: Displays a thickened line from the\n              minimum value to the selected value.\n            </li>\n          </ul>\n        </Fragment>\n      ),\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: rangeSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: rangeHtml,\n        },\n      ],\n      props: {\n        EuiRange,\n      },\n      demo: <RangeExample />,\n      snippet: `<EuiRange\n  min={100}\n  max={200}\n  step={0.05}\n  value={this.state.value}\n  onChange={this.onChange}\n  showLabels\n/>\n\n// Show tooltip\n<EuiRange\n  min={100}\n  max={200}\n  value={this.state.value}\n  onChange={this.onChange}\n  showLabels\n  showValue\n/>\n\n// Show thickened range and prepend a string to the tooltip\n<EuiRange\n  min={100}\n  max={200}\n  value={this.state.value}\n  onChange={this.onChange}\n  showLabels\n  showRange\n  showValue\n  valuePrepend=\"100 - \"\n/>`,\n    },\n    {\n      title: 'Dual range',\n      text: (\n        <Fragment>\n          <p>\n            The EuiDualRange accepts almost all the same props as the regular\n            EuiRange, with the exception of <EuiCode>showRange</EuiCode> which\n            is on by default, and <EuiCode>showValue</EuiCode> since tooltips\n            don&apos;t fit properly when there are two.\n          </p>\n          <EuiCallOut color=\"warning\" title=\"Retrieving field values\">\n            <p>\n              Two-value <EuiCode>input[type=range]</EuiCode> elements are not\n              part of the HTML5 specification. Because of this support gap,\n              EuiDualRange cannot expose a native <EuiCode>value</EuiCode>{' '}\n              property for native form to consumption.\n              <strong>\n                The React <EuiCode>onChange</EuiCode> prop is the recommended\n                method for retrieving the upper and lower values.\n              </strong>\n            </p>\n            <p>\n              EuiDualRange does use native inputs to help validate step values\n              and range limits. These may be used as form values when{' '}\n              <EuiCode>showInput</EuiCode> is in use. The alternative is to\n              store values in <EuiCode>input[type=hidden]</EuiCode>.\n            </p>\n          </EuiCallOut>\n        </Fragment>\n      ),\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: dualRangeSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: dualRangeHtml,\n        },\n      ],\n      props: {\n        EuiDualRange,\n      },\n      demo: <DualRangeExample />,\n      snippet: `<EuiDualRange\n  min={100}\n  max={200}\n  step={10}\n  value={this.state.value}\n  onChange={this.onChange}\n  showLabels\n/>`,\n    },\n    {\n      title: 'Inputs',\n      text: (\n        <Fragment>\n          <p>\n            The <EuiCode>showInput</EuiCode> prop, will append or bookend the\n            range slider with number type inputs. This is important for allowing\n            precise values to be entered by the user.\n          </p>\n          <p>\n            Passing empty strings as the <EuiCode>value</EuiCode> to the ranges,\n            will allow the inputs to be blank, though the range handles will\n            show at the min (or max and min) positions.\n          </p>\n        </Fragment>\n      ),\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: inputSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: inputHtml,\n        },\n      ],\n      demo: <InputExample />,\n      props: { EuiRangeInput },\n      snippet: `<EuiRange showInput />\n\n<EuiDualRange showInput />`,\n    },\n    {\n      title: 'Tick marks',\n      text: (\n        <Fragment>\n          <p>\n            To show clickable tick marks and labels at a given interval, add the\n            prop <EuiCode>showTicks</EuiCode>. By default, tick mark interval is\n            bound to the <EuiCode>step</EuiCode> prop, however, you can set a\n            custom interval without changing the actual steps allowed by passing\n            a number to the <EuiCode>tickInterval</EuiCode> prop.\n          </p>\n          <p>\n            To pass completely custom tick marks, you can pass an array of\n            objects that require a <EuiCode>value</EuiCode> and{' '}\n            <EuiCode>label</EuiCode>. The value must be included in the range of\n            values (min-max), though the label may be anythin you choose.\n          </p>\n          <EuiCallOut color=\"warning\" title=\"Maximum of 20 ticks allowed\">\n            <p>\n              Spacing can get quite cramped with lots of ticks so we max out the\n              number to 20.\n            </p>\n          </EuiCallOut>\n        </Fragment>\n      ),\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: ticksSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: ticksHtml,\n        },\n      ],\n      demo: <TicksExample />,\n      props: { EuiRangeTicks },\n      snippet: `<EuiRange step={10} showTicks />\n\n<EuiRange showTicks tickInterval={20} />\n\n<EuiDualRange\n  showTicks\n  ticks={[\n    { label: '20kb', value: 20 },\n    { label: '100kb', value: 100 }\n  ]}\n/>`,\n    },\n    {\n      title: 'Levels',\n      text: (\n        <Fragment>\n          <p>\n            To create colored indicators for certain intervals, pass an array of\n            objects that include a <EuiCode>min</EuiCode>,{' '}\n            <EuiCode>max</EuiCode> and <EuiCode>color</EuiCode>. Color options\n            are <EuiCode>{JSON.stringify(LEVEL_COLORS, null, 2)}</EuiCode>.\n          </p>\n          <p>\n            Be sure to then add an <EuiCode>aria-describedby</EuiCode> and match\n            it to the id of a <EuiCode>EuiFormHelpText</EuiCode>.\n          </p>\n        </Fragment>\n      ),\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: levelsSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: levelsHtml,\n        },\n      ],\n      demo: <LevelsExample />,\n      props: { EuiRangeLevels },\n      snippet: `<EuiRange\n  levels={[\n    {min: 0, max: 20, color: 'danger'},\n    {min: 20, max: 100, color: 'success'}\n  ]}\n  aria-describedBy={replaceWithID}\n/>\n\n<EuiDualRange\n  levels={[\n    {min: 0, max: 20, color: 'danger'},\n    {min: 20, max: 100, color: 'success'}\n  ]}\n  aria-describedBy={replaceWithID}\n/>`,\n    },\n    {\n      title: 'Kitchen sink',\n      text: (\n        <Fragment>\n          <p>\n            Other alterations you can add to the range are{' '}\n            <EuiCode>compressed</EuiCode>, <EuiCode>fullWidth</EuiCode>, and{' '}\n            <EuiCode>disabled</EuiCode>.\n          </p>\n        </Fragment>\n      ),\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: statesSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: statesHtml,\n        },\n      ],\n      demo: <StatesExample />,\n      snippet: `<EuiRange\n  id=\"\"\n  value={}\n  onChange={() => {}}\n  compressed\n  fullWidth\n  disabled\n  showTicks\n  showInput\n  showLabels\n  showValue\n  showRange\n  tickInterval={}\n  levels={[]}\n  aria-describedBy={replaceWithID}\n/>\n\n<EuiDualRange\n  id=\"\"\n  value={}\n  onChange={() => {}}\n  compressed\n  fullWidth\n  disabled\n  showLabels\n  showInput\n  showTicks\n  ticks={[]}\n  levels={[]}\n  aria-describedBy={replaceWithID}\n/>`,\n    },\n  ],\n};\n"]}]}