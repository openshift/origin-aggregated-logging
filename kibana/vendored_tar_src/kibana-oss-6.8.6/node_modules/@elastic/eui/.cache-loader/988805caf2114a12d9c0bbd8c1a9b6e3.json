{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/services/color/is_color_dark.ts","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/services/color/is_color_dark.ts","mtime":1565204170065},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isColorDark = isColorDark;\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/**\n * This function calculates if the specified color is \"dark\", which usually means\n * you need light text if you use it as a background color to fulfill WCAG contrast\n * requirement.\n * The color must be specified via its red, green and blue value in the range of\n * 0 to 255.\n * The formula is based on this Stackoverflow answer: https://stackoverflow.com/a/3943023\n * which itself is based upon the WCAG recommendation for color contrast.\n *\n * @param {number} red The red component in the range 0 to 255\n * @param {number} green The green component in the range 0 to 255\n * @param {number} blue The blue component in the range 0 to 255\n * @returns {boolean} True if the color is dark, false otherwise.\n */\nfunction isColorDark(red, green, blue) {\n  var _map$map = [red, green, blue].map(function (c) {\n    return c / 255.0;\n  }).map(function (c) {\n    return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\n  }),\n      _map$map2 = _slicedToArray(_map$map, 3),\n      r = _map$map2[0],\n      g = _map$map2[1],\n      b = _map$map2[2];\n\n  var luminance = 0.2126 * r + 0.7152 * g + 0.0722 * b;\n  return luminance <= 0.179;\n}",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/services/color/is_color_dark.ts"],"names":["isColorDark","red","green","blue","map","c","r","g","b","luminance"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;AAcO,SAASA,WAAT,CAAqBC,GAArB,EAAkCC,KAAlC,EAAiDC,IAAjD,EAAwE;AAAA,iBAC3D,CAACF,GAAD,EAAMC,KAAN,EAAaC,IAAb,EACfC,GADe,CACX,UAAAC,CAAC;AAAA,WAAIA,CAAC,GAAG,KAAR;AAAA,GADU,EAEfD,GAFe,CAEX,UAAAC,CAAC;AAAA,WAAKA,CAAC,IAAI,OAAL,GAAeA,CAAC,GAAG,KAAnB,YAA4B,CAACA,CAAC,GAAG,KAAL,IAAc,KAA1C,EAAoD,GAApD,CAAL;AAAA,GAFU,CAD2D;AAAA;AAAA,MACtEC,CADsE;AAAA,MACnEC,CADmE;AAAA,MAChEC,CADgE;;AAI7E,MAAMC,SAAS,GAAG,SAASH,CAAT,GAAa,SAASC,CAAtB,GAA0B,SAASC,CAArD;AACA,SAAOC,SAAS,IAAI,KAApB;AACD","sourcesContent":["/**\n * This function calculates if the specified color is \"dark\", which usually means\n * you need light text if you use it as a background color to fulfill WCAG contrast\n * requirement.\n * The color must be specified via its red, green and blue value in the range of\n * 0 to 255.\n * The formula is based on this Stackoverflow answer: https://stackoverflow.com/a/3943023\n * which itself is based upon the WCAG recommendation for color contrast.\n *\n * @param {number} red The red component in the range 0 to 255\n * @param {number} green The green component in the range 0 to 255\n * @param {number} blue The blue component in the range 0 to 255\n * @returns {boolean} True if the color is dark, false otherwise.\n */\nexport function isColorDark(red: number, green: number, blue: number): boolean {\n  const [r, g, b] = [red, green, blue]\n    .map(c => c / 255.0)\n    .map(c => (c <= 0.03928 ? c / 12.92 : ((c + 0.055) / 1.055) ** 2.4));\n  const luminance = 0.2126 * r + 0.7152 * g + 0.0722 * b;\n  return luminance <= 0.179;\n}\n"]}]}