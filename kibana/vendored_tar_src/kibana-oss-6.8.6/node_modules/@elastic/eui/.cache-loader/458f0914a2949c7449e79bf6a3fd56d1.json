{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/modal/confirm_modal.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/modal/confirm_modal.js","mtime":1565204169941},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EuiConfirmModal = exports.CANCEL_BUTTON = exports.CONFIRM_BUTTON = void 0;\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/es6.object.assign\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.object.set-prototype-of\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _modal = require(\"./modal\");\n\nvar _modal_footer = require(\"./modal_footer\");\n\nvar _modal_header = require(\"./modal_header\");\n\nvar _modal_header_title = require(\"./modal_header_title\");\n\nvar _modal_body = require(\"./modal_body\");\n\nvar _button = require(\"../button\");\n\nvar _text = require(\"../text\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar CONFIRM_BUTTON = 'confirm';\nexports.CONFIRM_BUTTON = CONFIRM_BUTTON;\nvar CANCEL_BUTTON = 'cancel';\nexports.CANCEL_BUTTON = CANCEL_BUTTON;\nvar CONFIRM_MODAL_BUTTONS = [CONFIRM_BUTTON, CANCEL_BUTTON];\n\nvar EuiConfirmModal =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EuiConfirmModal, _Component);\n\n  function EuiConfirmModal() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EuiConfirmModal);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EuiConfirmModal)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"confirmRef\", function (node) {\n      return _this.confirmButton = node;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"cancelRef\", function (node) {\n      return _this.cancelButton = node;\n    });\n\n    return _this;\n  }\n\n  _createClass(EuiConfirmModal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // We have to do this instead of using `autoFocus` because React's polyfill for auto-focusing\n      // elements conflicts with the focus-trap logic we have on EuiModal.\n      var defaultFocusedButton = this.props.defaultFocusedButton; // Wait a beat for the focus-trap to complete, and then set focus to the right button. Check that\n      // the buttons exist first, because it's possible the modal has been closed already.\n\n      requestAnimationFrame(function () {\n        if (defaultFocusedButton === CANCEL_BUTTON && _this2.cancelButton) {\n          _this2.cancelButton.focus();\n        } else if (defaultFocusedButton === CONFIRM_BUTTON && _this2.confirmButton) {\n          _this2.confirmButton.focus();\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          title = _this$props.title,\n          onCancel = _this$props.onCancel,\n          onConfirm = _this$props.onConfirm,\n          cancelButtonText = _this$props.cancelButtonText,\n          confirmButtonText = _this$props.confirmButtonText,\n          confirmButtonDisabled = _this$props.confirmButtonDisabled,\n          className = _this$props.className,\n          buttonColor = _this$props.buttonColor,\n          defaultFocusedButton = _this$props.defaultFocusedButton,\n          rest = _objectWithoutProperties(_this$props, [\"children\", \"title\", \"onCancel\", \"onConfirm\", \"cancelButtonText\", \"confirmButtonText\", \"confirmButtonDisabled\", \"className\", \"buttonColor\", \"defaultFocusedButton\"]);\n\n      var classes = (0, _classnames.default)('euiModal--confirmation', className);\n      var modalTitle;\n\n      if (title) {\n        modalTitle = _react.default.createElement(_modal_header.EuiModalHeader, null, _react.default.createElement(_modal_header_title.EuiModalHeaderTitle, {\n          \"data-test-subj\": \"confirmModalTitleText\"\n        }, title));\n      }\n\n      var message;\n\n      if (typeof children === 'string' && children.length > 0) {\n        message = _react.default.createElement(\"p\", null, children);\n      } else {\n        message = children;\n      }\n\n      return _react.default.createElement(_modal.EuiModal, _extends({\n        className: classes,\n        onClose: onCancel\n      }, rest), modalTitle, message && _react.default.createElement(_modal_body.EuiModalBody, null, _react.default.createElement(_text.EuiText, {\n        \"data-test-subj\": \"confirmModalBodyText\"\n      }, message)), _react.default.createElement(_modal_footer.EuiModalFooter, null, _react.default.createElement(_button.EuiButtonEmpty, {\n        \"data-test-subj\": \"confirmModalCancelButton\",\n        onClick: onCancel,\n        buttonRef: this.cancelRef\n      }, cancelButtonText), _react.default.createElement(_button.EuiButton, {\n        \"data-test-subj\": \"confirmModalConfirmButton\",\n        onClick: onConfirm,\n        fill: true,\n        buttonRef: this.confirmRef,\n        color: buttonColor,\n        isDisabled: confirmButtonDisabled\n      }, confirmButtonText)));\n    }\n  }]);\n\n  return EuiConfirmModal;\n}(_react.Component);\n\nexports.EuiConfirmModal = EuiConfirmModal;\nEuiConfirmModal.propTypes = {\n  children: _propTypes.default.node,\n  title: _propTypes.default.node,\n  cancelButtonText: _propTypes.default.node,\n  confirmButtonText: _propTypes.default.node,\n  onCancel: _propTypes.default.func,\n  onConfirm: _propTypes.default.func,\n  confirmButtonDisabled: _propTypes.default.bool,\n  className: _propTypes.default.string,\n  defaultFocusedButton: _propTypes.default.oneOf(CONFIRM_MODAL_BUTTONS),\n  buttonColor: _propTypes.default.string,\n  // For docs only, will get passed with ...rest\n\n  /**\n   * Sets the max-width of the modal.\n   * Set to `true` to use the default (`euiBreakpoints 'm'`),\n   * set to `false` to not restrict the width,\n   * set to a number for a custom width in px,\n   * set to a string for a custom width in custom measurement.\n   */\n  maxWidth: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.number, _propTypes.default.string])\n};\nEuiConfirmModal.defaultProps = {\n  buttonColor: 'primary'\n};\nEuiConfirmModal.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [{\n    \"name\": \"confirmRef\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"node\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"cancelRef\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"node\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }],\n  \"displayName\": \"EuiConfirmModal\",\n  \"props\": {\n    \"buttonColor\": {\n      \"defaultValue\": {\n        \"value\": \"'primary'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"title\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"cancelButtonText\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"confirmButtonText\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"onCancel\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"onConfirm\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"confirmButtonDisabled\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"className\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"defaultFocusedButton\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"'confirm'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'cancel'\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"maxWidth\": {\n      \"type\": {\n        \"name\": \"union\",\n        \"value\": [{\n          \"name\": \"bool\"\n        }, {\n          \"name\": \"number\"\n        }, {\n          \"name\": \"string\"\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Sets the max-width of the modal.\\nSet to `true` to use the default (`euiBreakpoints 'm'`),\\nset to `false` to not restrict the width,\\nset to a number for a custom width in px,\\nset to a string for a custom width in custom measurement.\"\n    }\n  }\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/modal/confirm_modal.js"],"names":["CONFIRM_BUTTON","CANCEL_BUTTON","CONFIRM_MODAL_BUTTONS","EuiConfirmModal","node","confirmButton","cancelButton","defaultFocusedButton","props","requestAnimationFrame","focus","children","title","onCancel","onConfirm","cancelButtonText","confirmButtonText","confirmButtonDisabled","className","buttonColor","rest","classes","modalTitle","message","length","cancelRef","confirmRef","Component","propTypes","PropTypes","func","bool","string","oneOf","maxWidth","oneOfType","number","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport { EuiModal } from './modal';\nimport { EuiModalFooter } from './modal_footer';\nimport { EuiModalHeader } from './modal_header';\nimport { EuiModalHeaderTitle } from './modal_header_title';\nimport { EuiModalBody } from './modal_body';\n\nimport { EuiButton, EuiButtonEmpty } from '../button';\n\nimport { EuiText } from '../text';\n\nexport const CONFIRM_BUTTON = 'confirm';\nexport const CANCEL_BUTTON = 'cancel';\n\nconst CONFIRM_MODAL_BUTTONS = [CONFIRM_BUTTON, CANCEL_BUTTON];\n\nexport class EuiConfirmModal extends Component {\n  componentDidMount() {\n    // We have to do this instead of using `autoFocus` because React's polyfill for auto-focusing\n    // elements conflicts with the focus-trap logic we have on EuiModal.\n    const { defaultFocusedButton } = this.props;\n\n    // Wait a beat for the focus-trap to complete, and then set focus to the right button. Check that\n    // the buttons exist first, because it's possible the modal has been closed already.\n    requestAnimationFrame(() => {\n      if (defaultFocusedButton === CANCEL_BUTTON && this.cancelButton) {\n        this.cancelButton.focus();\n      } else if (\n        defaultFocusedButton === CONFIRM_BUTTON &&\n        this.confirmButton\n      ) {\n        this.confirmButton.focus();\n      }\n    });\n  }\n\n  confirmRef = node => (this.confirmButton = node);\n  cancelRef = node => (this.cancelButton = node);\n\n  render() {\n    const {\n      children,\n      title,\n      onCancel,\n      onConfirm,\n      cancelButtonText,\n      confirmButtonText,\n      confirmButtonDisabled,\n      className,\n      buttonColor,\n      defaultFocusedButton,\n      ...rest\n    } = this.props;\n\n    const classes = classnames('euiModal--confirmation', className);\n\n    let modalTitle;\n\n    if (title) {\n      modalTitle = (\n        <EuiModalHeader>\n          <EuiModalHeaderTitle data-test-subj=\"confirmModalTitleText\">\n            {title}\n          </EuiModalHeaderTitle>\n        </EuiModalHeader>\n      );\n    }\n\n    let message;\n\n    if (typeof children === 'string' && children.length > 0) {\n      message = <p>{children}</p>;\n    } else {\n      message = children;\n    }\n\n    return (\n      <EuiModal className={classes} onClose={onCancel} {...rest}>\n        {modalTitle}\n\n        {message && (\n          <EuiModalBody>\n            <EuiText data-test-subj=\"confirmModalBodyText\">{message}</EuiText>\n          </EuiModalBody>\n        )}\n\n        <EuiModalFooter>\n          <EuiButtonEmpty\n            data-test-subj=\"confirmModalCancelButton\"\n            onClick={onCancel}\n            buttonRef={this.cancelRef}>\n            {cancelButtonText}\n          </EuiButtonEmpty>\n\n          <EuiButton\n            data-test-subj=\"confirmModalConfirmButton\"\n            onClick={onConfirm}\n            fill\n            buttonRef={this.confirmRef}\n            color={buttonColor}\n            isDisabled={confirmButtonDisabled}>\n            {confirmButtonText}\n          </EuiButton>\n        </EuiModalFooter>\n      </EuiModal>\n    );\n  }\n}\n\nEuiConfirmModal.propTypes = {\n  children: PropTypes.node,\n  title: PropTypes.node,\n  cancelButtonText: PropTypes.node,\n  confirmButtonText: PropTypes.node,\n  onCancel: PropTypes.func,\n  onConfirm: PropTypes.func,\n  confirmButtonDisabled: PropTypes.bool,\n  className: PropTypes.string,\n  defaultFocusedButton: PropTypes.oneOf(CONFIRM_MODAL_BUTTONS),\n  buttonColor: PropTypes.string,\n  // For docs only, will get passed with ...rest\n  /**\n   * Sets the max-width of the modal.\n   * Set to `true` to use the default (`euiBreakpoints 'm'`),\n   * set to `false` to not restrict the width,\n   * set to a number for a custom width in px,\n   * set to a string for a custom width in custom measurement.\n   */\n  maxWidth: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.number,\n    PropTypes.string,\n  ]),\n};\n\nEuiConfirmModal.defaultProps = {\n  buttonColor: 'primary',\n};\n"]}]}