{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/avatar/avatar.tsx","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/avatar/avatar.tsx","mtime":1565204169589},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EuiAvatar = exports.TYPES = exports.SIZES = void 0;\n\nrequire(\"core-js/modules/es6.object.assign\");\n\nrequire(\"core-js/modules/es6.string.iterator\");\n\nrequire(\"core-js/modules/es6.array.from\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _common = require(\"../common\");\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _color = require(\"../../services/color\");\n\nvar _services = require(\"../../services\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nvar sizeToClassNameMap = {\n  none: null,\n  s: 'euiAvatar--s',\n  m: 'euiAvatar--m',\n  l: 'euiAvatar--l',\n  xl: 'euiAvatar--xl'\n};\nvar SIZES = (0, _common.keysOf)(sizeToClassNameMap);\nexports.SIZES = SIZES;\nvar typeToClassNameMap = {\n  space: 'euiAvatar--space',\n  user: 'euiAvatar--user'\n};\nvar TYPES = (0, _common.keysOf)(typeToClassNameMap);\nexports.TYPES = TYPES;\n\nvar EuiAvatar = function EuiAvatar(_ref) {\n  var className = _ref.className,\n      color = _ref.color,\n      imageUrl = _ref.imageUrl,\n      initials = _ref.initials,\n      initialsLength = _ref.initialsLength,\n      name = _ref.name,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 'm' : _ref$size,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'user' : _ref$type,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"color\", \"imageUrl\", \"initials\", \"initialsLength\", \"name\", \"size\", \"type\"]);\n\n  var classes = (0, _classnames.default)('euiAvatar', sizeToClassNameMap[size], typeToClassNameMap[type], className);\n  checkValidColor(color);\n  checkValidInitials(initials);\n  var optionalInitial;\n\n  if (name && !imageUrl) {\n    // Create the initials\n    var calculatedInitials = (0, _services.toInitials)(name, initialsLength, initials);\n    optionalInitial = _react.default.createElement(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, calculatedInitials);\n  }\n\n  var assignedColor = color || _services.VISUALIZATION_COLORS[Math.floor(name.length % _services.VISUALIZATION_COLORS.length)];\n\n  var textColor = _color.isColorDark.apply(void 0, _toConsumableArray((0, _color.hexToRgb)(assignedColor))) ? '#FFFFFF' : '#000000';\n  var avatarStyle = {\n    backgroundImage: imageUrl ? \"url(\".concat(imageUrl, \")\") : 'none',\n    backgroundColor: assignedColor,\n    color: textColor\n  };\n  return _react.default.createElement(\"div\", _extends({\n    className: classes,\n    style: avatarStyle,\n    \"aria-label\": name,\n    title: name\n  }, rest), optionalInitial);\n}; // TODO: Migrate to a service\n\n\nexports.EuiAvatar = EuiAvatar;\nEuiAvatar.propTypes = {\n  className: _propTypes.default.string,\n  \"aria-label\": _propTypes.default.string,\n  \"data-test-subj\": _propTypes.default.string,\n\n  /**\n       * Full name of avatar for title attribute and calculating initial if not provided\n       */\n  name: _propTypes.default.string.isRequired,\n\n  /**\n       * Accepts hex value `#FFFFFF`, `#000` otherwise a viz palette color will be assigned\n       */\n  color: _propTypes.default.string,\n\n  /**\n       * Custom initials (max 2 characters).\n       * By default will take the first character (of each word).\n       */\n  initials: _propTypes.default.string,\n\n  /**\n       * Specify how many characters to show (max 2 allowed).\n       * By default, will show based on number of words.\n       */\n  initialsLength: _propTypes.default.oneOf([1, 2]),\n\n  /**\n       * The type of avatar this is displaying\n       */\n  type: _propTypes.default.oneOf([\"space\", \"user\"]),\n  imageUrl: _propTypes.default.string,\n  size: _propTypes.default.oneOf([\"none\", \"s\", \"m\", \"l\", \"xl\"])\n};\n\nfunction checkValidColor(color) {\n  var validHex = color && /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(color);\n\n  if (color && !validHex) {\n    throw new Error('EuiAvatar needs to pass a valid color. This can either be a three ' + 'or six character hex value');\n  }\n}\n\nfunction checkValidInitials(initials) {\n  // Must be a string of 1 or 2 characters\n  if (initials && initials.length > 2) {\n    // tslint:disable-next-line:no-console\n    console.warn('EuiAvatar only accepts a max of 2 characters for the initials as a string. It is displaying only the first 2 characters.');\n  }\n}\n\nEuiAvatar.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"EuiAvatar\",\n  \"props\": {\n    \"size\": {\n      \"defaultValue\": {\n        \"value\": \"'m'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"none\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"s\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"m\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"l\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"xl\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"type\": {\n      \"defaultValue\": {\n        \"value\": \"'user'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"space\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"user\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"The type of avatar this is displaying\"\n    },\n    \"className\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"aria-label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"data-test-subj\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Full name of avatar for title attribute and calculating initial if not provided\"\n    },\n    \"color\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Accepts hex value `#FFFFFF`, `#000` otherwise a viz palette color will be assigned\"\n    },\n    \"initials\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Custom initials (max 2 characters).\\nBy default will take the first character (of each word).\"\n    },\n    \"initialsLength\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"1\",\n          \"computed\": false\n        }, {\n          \"value\": \"2\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Specify how many characters to show (max 2 allowed).\\nBy default, will show based on number of words.\"\n    },\n    \"imageUrl\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/avatar/avatar.tsx"],"names":["sizeToClassNameMap","none","s","m","l","xl","SIZES","typeToClassNameMap","space","user","TYPES","EuiAvatar","className","color","imageUrl","initials","initialsLength","name","size","type","rest","classes","checkValidColor","checkValidInitials","optionalInitial","calculatedInitials","assignedColor","VISUALIZATION_COLORS","Math","floor","length","textColor","isColorDark","avatarStyle","backgroundImage","backgroundColor","validHex","test","Error","console","warn"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;AAEA,IAAMA,kBAAkB,GAAG;AACzBC,EAAAA,IAAI,EAAE,IADmB;AAEzBC,EAAAA,CAAC,EAAE,cAFsB;AAGzBC,EAAAA,CAAC,EAAE,cAHsB;AAIzBC,EAAAA,CAAC,EAAE,cAJsB;AAKzBC,EAAAA,EAAE,EAAE;AALqB,CAA3B;AAQO,IAAMC,KAAK,GAAG,oBAAON,kBAAP,CAAd;;AAGP,IAAMO,kBAAkB,GAAG;AACzBC,EAAAA,KAAK,EAAE,kBADkB;AAEzBC,EAAAA,IAAI,EAAE;AAFmB,CAA3B;AAKO,IAAMC,KAAK,GAAG,oBAAOH,kBAAP,CAAd;;;AAmCA,IAAMI,SAA4C,GAAG,SAA/CA,SAA+C,OAUtD;AAAA,MATJC,SASI,QATJA,SASI;AAAA,MARJC,KAQI,QARJA,KAQI;AAAA,MAPJC,QAOI,QAPJA,QAOI;AAAA,MANJC,QAMI,QANJA,QAMI;AAAA,MALJC,cAKI,QALJA,cAKI;AAAA,MAJJC,IAII,QAJJA,IAII;AAAA,uBAHJC,IAGI;AAAA,MAHJA,IAGI,0BAHG,GAGH;AAAA,uBAFJC,IAEI;AAAA,MAFJA,IAEI,0BAFG,MAEH;AAAA,MADDC,IACC;;AACJ,MAAMC,OAAO,GAAG,yBACd,WADc,EAEdrB,kBAAkB,CAACkB,IAAD,CAFJ,EAGdX,kBAAkB,CAACY,IAAD,CAHJ,EAIdP,SAJc,CAAhB;AAOAU,EAAAA,eAAe,CAACT,KAAD,CAAf;AACAU,EAAAA,kBAAkB,CAACR,QAAD,CAAlB;AAEA,MAAIS,eAAJ;;AACA,MAAIP,IAAI,IAAI,CAACH,QAAb,EAAuB;AACrB;AACA,QAAMW,kBAAkB,GAAG,0BAAWR,IAAX,EAAiBD,cAAjB,EAAiCD,QAAjC,CAA3B;AACAS,IAAAA,eAAe,GAAG;AAAM,qBAAY;AAAlB,OAA0BC,kBAA1B,CAAlB;AACD;;AAED,MAAMC,aAAa,GACjBb,KAAK,IACLc,+BAAqBC,IAAI,CAACC,KAAL,CAAWZ,IAAI,CAACa,MAAL,GAAcH,+BAAqBG,MAA9C,CAArB,CAFF;;AAGA,MAAMC,SAAS,GAAGC,oDAAe,qBAASN,aAAT,CAAf,KACd,SADc,GAEd,SAFJ;AAIA,MAAMO,WAAW,GAAG;AAClBC,IAAAA,eAAe,EAAEpB,QAAQ,iBAAUA,QAAV,SAAwB,MAD/B;AAElBqB,IAAAA,eAAe,EAAET,aAFC;AAGlBb,IAAAA,KAAK,EAAEkB;AAHW,GAApB;AAMA,SACE;AACE,IAAA,SAAS,EAAEV,OADb;AAEE,IAAA,KAAK,EAAEY,WAFT;AAGE,kBAAYhB,IAHd;AAIE,IAAA,KAAK,EAAEA;AAJT,KAKMG,IALN,GAMGI,eANH,CADF;AAUD,CAnDM,C,CAqDP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASF,eAAT,CAAyBT,KAAzB,EAAyD;AACvD,MAAMuB,QAAQ,GAAGvB,KAAK,IAAI,qCAAqCwB,IAArC,CAA0CxB,KAA1C,CAA1B;;AACA,MAAIA,KAAK,IAAI,CAACuB,QAAd,EAAwB;AACtB,UAAM,IAAIE,KAAJ,CACJ,uEACE,4BAFE,CAAN;AAID;AACF;;AAED,SAASf,kBAAT,CAA4BR,QAA5B,EAAkE;AAChE;AACA,MAAIA,QAAQ,IAAIA,QAAQ,CAACe,MAAT,GAAkB,CAAlC,EAAqC;AACnC;AACAS,IAAAA,OAAO,CAACC,IAAR,CACE,0HADF;AAGD;AACF","sourcesContent":["import React from 'react';\nimport PropTypes from \"prop-types\";\nimport { keysOf } from '../common';\nimport classNames from 'classnames';\nimport { isColorDark, hexToRgb } from '../../services/color';\nimport { VISUALIZATION_COLORS, toInitials } from '../../services';\nvar sizeToClassNameMap = {\n  none: null,\n  s: 'euiAvatar--s',\n  m: 'euiAvatar--m',\n  l: 'euiAvatar--l',\n  xl: 'euiAvatar--xl'\n};\nexport var SIZES = keysOf(sizeToClassNameMap);\nvar typeToClassNameMap = {\n  space: 'euiAvatar--space',\n  user: 'euiAvatar--user'\n};\nexport var TYPES = keysOf(typeToClassNameMap);\nexport var EuiAvatar = ({\n  className,\n  color,\n  imageUrl,\n  initials,\n  initialsLength,\n  name,\n  size = 'm',\n  type = 'user',\n  ...rest\n}) => {\n  const classes = classNames('euiAvatar', sizeToClassNameMap[size], typeToClassNameMap[type], className);\n  checkValidColor(color);\n  checkValidInitials(initials);\n  let optionalInitial;\n\n  if (name && !imageUrl) {\n    // Create the initials\n    const calculatedInitials = toInitials(name, initialsLength, initials);\n    optionalInitial = <span aria-hidden=\"true\">{calculatedInitials}</span>;\n  }\n\n  const assignedColor = color || VISUALIZATION_COLORS[Math.floor(name.length % VISUALIZATION_COLORS.length)];\n  const textColor = isColorDark(...hexToRgb(assignedColor)) ? '#FFFFFF' : '#000000';\n  const avatarStyle = {\n    backgroundImage: imageUrl ? `url(${imageUrl})` : 'none',\n    backgroundColor: assignedColor,\n    color: textColor\n  };\n  return <div className={classes} style={avatarStyle} aria-label={name} title={name} {...rest}>\n      {optionalInitial}\n    </div>;\n}; // TODO: Migrate to a service\n\nEuiAvatar.propTypes = {\n  className: PropTypes.string,\n  \"aria-label\": PropTypes.string,\n  \"data-test-subj\": PropTypes.string,\n\n  /**\n       * Full name of avatar for title attribute and calculating initial if not provided\n       */\n  name: PropTypes.string.isRequired,\n\n  /**\n       * Accepts hex value `#FFFFFF`, `#000` otherwise a viz palette color will be assigned\n       */\n  color: PropTypes.string,\n\n  /**\n       * Custom initials (max 2 characters).\n       * By default will take the first character (of each word).\n       */\n  initials: PropTypes.string,\n\n  /**\n       * Specify how many characters to show (max 2 allowed).\n       * By default, will show based on number of words.\n       */\n  initialsLength: PropTypes.oneOf([1, 2]),\n\n  /**\n       * The type of avatar this is displaying\n       */\n  type: PropTypes.oneOf([\"space\", \"user\"]),\n  imageUrl: PropTypes.string,\n  size: PropTypes.oneOf([\"none\", \"s\", \"m\", \"l\", \"xl\"])\n};\n\nfunction checkValidColor(color) {\n  const validHex = color && /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(color);\n\n  if (color && !validHex) {\n    throw new Error('EuiAvatar needs to pass a valid color. This can either be a three ' + 'or six character hex value');\n  }\n}\n\nfunction checkValidInitials(initials) {\n  // Must be a string of 1 or 2 characters\n  if (initials && initials.length > 2) {\n    // tslint:disable-next-line:no-console\n    console.warn('EuiAvatar only accepts a max of 2 characters for the initials as a string. It is displaying only the first 2 characters.');\n  }\n}"]}]}