{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/services/copy_to_clipboard.ts","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/services/copy_to_clipboard.ts","mtime":1565204170067},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.copyToClipboard = copyToClipboard;\n\nfunction createHiddenTextElement(text) {\n  var textElement = document.createElement('span');\n  textElement.textContent = text; // @ts-ignore .all is a real property - https://drafts.csswg.org/css-cascade/#all-shorthand\n\n  textElement.style.all = 'unset'; // prevents scrolling to the end of the page\n\n  textElement.style.position = 'fixed';\n  textElement.style.top = '0';\n  textElement.style.clip = 'rect(0, 0, 0, 0)'; // used to preserve spaces and line breaks\n\n  textElement.style.whiteSpace = 'pre'; // do not inherit user-select (it may be `none`)\n\n  textElement.style.webkitUserSelect = 'text'; // @ts-ignore this one doesn't appear in the TS definitions for some reason\n\n  textElement.style.MozUserSelect = 'text';\n  textElement.style.msUserSelect = 'text';\n  textElement.style.userSelect = 'text';\n  return textElement;\n}\n\nfunction copyToClipboard(text) {\n  var isCopied = true;\n  var range = document.createRange();\n  var selection = window.getSelection();\n  var elementToBeCopied = createHiddenTextElement(text);\n  document.body.appendChild(elementToBeCopied);\n  range.selectNode(elementToBeCopied);\n\n  if (selection) {\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n\n  if (!document.execCommand('copy')) {\n    isCopied = false; // tslint:disable-next-line:no-console\n\n    console.warn('Unable to copy to clipboard.');\n  }\n\n  if (selection) {\n    if (typeof selection.removeRange === 'function') {\n      selection.removeRange(range);\n    } else {\n      selection.removeAllRanges();\n    }\n  }\n\n  document.body.removeChild(elementToBeCopied);\n  return isCopied;\n}",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/services/copy_to_clipboard.ts"],"names":["createHiddenTextElement","text","textElement","document","createElement","textContent","style","all","position","top","clip","whiteSpace","webkitUserSelect","MozUserSelect","msUserSelect","userSelect","copyToClipboard","isCopied","range","createRange","selection","window","getSelection","elementToBeCopied","body","appendChild","selectNode","removeAllRanges","addRange","execCommand","console","warn","removeRange","removeChild"],"mappings":";;;;;;;AAAA,SAASA,uBAAT,CAAiCC,IAAjC,EAAgE;AAC9D,MAAMC,WAAW,GAAGC,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CAApB;AACAF,EAAAA,WAAW,CAACG,WAAZ,GAA0BJ,IAA1B,CAF8D,CAG9D;;AACAC,EAAAA,WAAW,CAACI,KAAZ,CAAkBC,GAAlB,GAAwB,OAAxB,CAJ8D,CAK9D;;AACAL,EAAAA,WAAW,CAACI,KAAZ,CAAkBE,QAAlB,GAA6B,OAA7B;AACAN,EAAAA,WAAW,CAACI,KAAZ,CAAkBG,GAAlB,GAAwB,GAAxB;AACAP,EAAAA,WAAW,CAACI,KAAZ,CAAkBI,IAAlB,GAAyB,kBAAzB,CAR8D,CAS9D;;AACAR,EAAAA,WAAW,CAACI,KAAZ,CAAkBK,UAAlB,GAA+B,KAA/B,CAV8D,CAW9D;;AACAT,EAAAA,WAAW,CAACI,KAAZ,CAAkBM,gBAAlB,GAAqC,MAArC,CAZ8D,CAa9D;;AACAV,EAAAA,WAAW,CAACI,KAAZ,CAAkBO,aAAlB,GAAkC,MAAlC;AACAX,EAAAA,WAAW,CAACI,KAAZ,CAAkBQ,YAAlB,GAAiC,MAAjC;AACAZ,EAAAA,WAAW,CAACI,KAAZ,CAAkBS,UAAlB,GAA+B,MAA/B;AACA,SAAOb,WAAP;AACD;;AAEM,SAASc,eAAT,CAAyBf,IAAzB,EAAgD;AACrD,MAAIgB,QAAQ,GAAG,IAAf;AACA,MAAMC,KAAK,GAAGf,QAAQ,CAACgB,WAAT,EAAd;AACA,MAAMC,SAAS,GAAGC,MAAM,CAACC,YAAP,EAAlB;AACA,MAAMC,iBAAiB,GAAGvB,uBAAuB,CAACC,IAAD,CAAjD;AAEAE,EAAAA,QAAQ,CAACqB,IAAT,CAAcC,WAAd,CAA0BF,iBAA1B;AACAL,EAAAA,KAAK,CAACQ,UAAN,CAAiBH,iBAAjB;;AACA,MAAIH,SAAJ,EAAe;AACbA,IAAAA,SAAS,CAACO,eAAV;AACAP,IAAAA,SAAS,CAACQ,QAAV,CAAmBV,KAAnB;AACD;;AAED,MAAI,CAACf,QAAQ,CAAC0B,WAAT,CAAqB,MAArB,CAAL,EAAmC;AACjCZ,IAAAA,QAAQ,GAAG,KAAX,CADiC,CAEjC;;AACAa,IAAAA,OAAO,CAACC,IAAR,CAAa,8BAAb;AACD;;AAED,MAAIX,SAAJ,EAAe;AACb,QAAI,OAAOA,SAAS,CAACY,WAAjB,KAAiC,UAArC,EAAiD;AAC/CZ,MAAAA,SAAS,CAACY,WAAV,CAAsBd,KAAtB;AACD,KAFD,MAEO;AACLE,MAAAA,SAAS,CAACO,eAAV;AACD;AACF;;AAEDxB,EAAAA,QAAQ,CAACqB,IAAT,CAAcS,WAAd,CAA0BV,iBAA1B;AAEA,SAAON,QAAP;AACD","sourcesContent":["function createHiddenTextElement(text: string): HTMLSpanElement {\n  const textElement = document.createElement('span');\n  textElement.textContent = text;\n  // @ts-ignore .all is a real property - https://drafts.csswg.org/css-cascade/#all-shorthand\n  textElement.style.all = 'unset';\n  // prevents scrolling to the end of the page\n  textElement.style.position = 'fixed';\n  textElement.style.top = '0';\n  textElement.style.clip = 'rect(0, 0, 0, 0)';\n  // used to preserve spaces and line breaks\n  textElement.style.whiteSpace = 'pre';\n  // do not inherit user-select (it may be `none`)\n  textElement.style.webkitUserSelect = 'text';\n  // @ts-ignore this one doesn't appear in the TS definitions for some reason\n  textElement.style.MozUserSelect = 'text';\n  textElement.style.msUserSelect = 'text';\n  textElement.style.userSelect = 'text';\n  return textElement;\n}\n\nexport function copyToClipboard(text: string): boolean {\n  let isCopied = true;\n  const range = document.createRange();\n  const selection = window.getSelection();\n  const elementToBeCopied = createHiddenTextElement(text);\n\n  document.body.appendChild(elementToBeCopied);\n  range.selectNode(elementToBeCopied);\n  if (selection) {\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n\n  if (!document.execCommand('copy')) {\n    isCopied = false;\n    // tslint:disable-next-line:no-console\n    console.warn('Unable to copy to clipboard.');\n  }\n\n  if (selection) {\n    if (typeof selection.removeRange === 'function') {\n      selection.removeRange(range);\n    } else {\n      selection.removeAllRanges();\n    }\n  }\n\n  document.body.removeChild(elementToBeCopied);\n\n  return isCopied;\n}\n"]}]}