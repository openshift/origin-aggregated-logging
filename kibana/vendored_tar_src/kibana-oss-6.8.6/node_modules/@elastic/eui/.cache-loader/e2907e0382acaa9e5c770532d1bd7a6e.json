{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/services/url.ts","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/services/url.ts","mtime":1565204170080},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isDomainSecure = void 0;\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar isElasticDomain = /(https?:\\/\\/(.+?\\.)?elastic\\.co((\\/|\\?)[A-Za-z0-9\\-\\._~:\\/\\?#\\[\\]@!$&'\\(\\)\\*\\+,;\\=]*)?)/g; // In order for the domain to be secure the regex\n// has to match _and_ the lengths of the match must\n// be _exact_ since URL's can have other URL's as\n// path or query params!\n\nvar isDomainSecure = function isDomainSecure() {\n  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var matches = url.match(isElasticDomain);\n\n  if (!matches) {\n    return false;\n  }\n\n  var _matches = _slicedToArray(matches, 1),\n      match = _matches[0];\n\n  return match.length === url.length;\n};\n\nexports.isDomainSecure = isDomainSecure;",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/services/url.ts"],"names":["isElasticDomain","isDomainSecure","url","matches","match","length"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,eAAe,GAAG,0FAAxB,C,CAEA;AACA;AACA;AACA;;AACO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAsB;AAAA,MAArBC,GAAqB,uEAAP,EAAO;AAClD,MAAMC,OAAO,GAAGD,GAAG,CAACE,KAAJ,CAAUJ,eAAV,CAAhB;;AAEA,MAAI,CAACG,OAAL,EAAc;AACZ,WAAO,KAAP;AACD;;AALiD,gCAMlCA,OANkC;AAAA,MAM3CC,KAN2C;;AAQlD,SAAOA,KAAK,CAACC,MAAN,KAAiBH,GAAG,CAACG,MAA5B;AACD,CATM","sourcesContent":["const isElasticDomain = /(https?:\\/\\/(.+?\\.)?elastic\\.co((\\/|\\?)[A-Za-z0-9\\-\\._~:\\/\\?#\\[\\]@!$&'\\(\\)\\*\\+,;\\=]*)?)/g;\n\n// In order for the domain to be secure the regex\n// has to match _and_ the lengths of the match must\n// be _exact_ since URL's can have other URL's as\n// path or query params!\nexport const isDomainSecure = (url: string = '') => {\n  const matches = url.match(isElasticDomain);\n\n  if (!matches) {\n    return false;\n  }\n  const [match] = matches;\n\n  return match.length === url.length;\n};\n"]}]}