{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src-docs/src/views/form_layouts/form_layouts_example.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src-docs/src/views/form_layouts/form_layouts_example.js","mtime":1565204169483},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FormLayoutsExample = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _services = require(\"../../services\");\n\nvar _components = require(\"../../components\");\n\nvar _components2 = require(\"../../../../src/components\");\n\nvar _form_rows = _interopRequireDefault(require(\"./form_rows\"));\n\nvar _described_form_group = _interopRequireDefault(require(\"./described_form_group\"));\n\nvar _full_width = _interopRequireDefault(require(\"./full_width\"));\n\nvar _inline = _interopRequireDefault(require(\"./inline\"));\n\nvar _inline_sizing = _interopRequireDefault(require(\"./inline_sizing\"));\n\nvar _inline_popover = _interopRequireDefault(require(\"./inline_popover\"));\n\nvar _form_compressed = _interopRequireDefault(require(\"./form_compressed\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nvar formRowsSource = require('!!raw-loader!./form_rows');\n\nvar formRowsHtml = (0, _services.renderToHtml)(_form_rows.default);\n\nvar describedFormGroupSource = require('!!raw-loader!./described_form_group');\n\nvar describedFormGroupHtml = (0, _services.renderToHtml)(_described_form_group.default);\n\nvar fullWidthSource = require('!!raw-loader!./full_width');\n\nvar fullWidthHtml = (0, _services.renderToHtml)(_full_width.default);\n\nvar inlineSource = require('!!raw-loader!./inline');\n\nvar inlineHtml = (0, _services.renderToHtml)(_inline.default);\n\nvar inlineSizingSource = require('!!raw-loader!./inline_sizing');\n\nvar inlineSizingHtml = (0, _services.renderToHtml)(_inline_sizing.default);\n\nvar inlinePopoverSource = require('!!raw-loader!./inline_popover');\n\nvar inlinePopoverHtml = (0, _services.renderToHtml)(_inline_popover.default);\n\nvar formCompressedSource = require('!!raw-loader!./form_compressed');\n\nvar formCompressedHtml = (0, _services.renderToHtml)(_form_compressed.default);\nvar FormLayoutsExample = {\n  title: 'Form layouts',\n  sections: [{\n    title: 'Form and form rows',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: formRowsSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: formRowsHtml\n    }],\n    text: _react.default.createElement(\"p\", null, \"Use the \", _react.default.createElement(_components2.EuiCode, null, \"EuiFormRow\"), \" component to easily associate form components with labels, help text, and error text. Use the\", ' ', _react.default.createElement(_components2.EuiCode, null, \"EuiForm\"), \" component to group\", ' ', _react.default.createElement(_components2.EuiCode, null, \"EuiFormRow\"), \"s.\"),\n    props: {\n      EuiForm: _components2.EuiForm,\n      EuiFormRow: _components2.EuiFormRow\n    },\n    demo: _react.default.createElement(_form_rows.default, null),\n    snippet: \"<EuiFormRow\\n  label=\\\"Text field\\\"\\n  helpText=\\\"I am some friendly help text.\\\"\\n>\\n  <EuiFieldText />\\n</EuiFormRow>\"\n  }, {\n    title: 'Full-width',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: fullWidthSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: fullWidthHtml\n    }],\n    text: _react.default.createElement(\"p\", null, \"Form elements will automatically flex to a max-width of\", ' ', _react.default.createElement(_components2.EuiCode, null, \"400px\"), \". You can optionally pass the\", ' ', _react.default.createElement(_components2.EuiCode, null, \"fullWidth\"), \" prop to the row and form control to expand to their container. This should be done rarely and usually you will only need it for isolated controls like search bars and sliders.\"),\n    props: {\n      EuiFormRow: _components2.EuiFormRow\n    },\n    demo: _react.default.createElement(_full_width.default, null),\n    snippet: \"<EuiFormRow\\n  fullWidth\\n  label=\\\"Works on form rows too\\\"\\n  helpText=\\\"Note that the fullWidth prop is not passed to the form row's child\\\"\\n>\\n  <EuiRange fullWidth />\\n</EuiFormRow>\"\n  }, {\n    title: 'Compressed',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: formCompressedSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: formCompressedHtml\n    }],\n    text: _react.default.createElement(\"p\", null, \"If the particular form is in an area with a small amount of real estate, you can add the prop \", _react.default.createElement(_components2.EuiCode, null, \"compressed\"), \" to the\", ' ', _react.default.createElement(_components2.EuiCode, null, \"EuiFormRow\"), \"s and it will pass down to the form controls.\"),\n    props: {\n      EuiFormRow: _components2.EuiFormRow\n    },\n    demo: _react.default.createElement(_form_compressed.default, null),\n    snippet: \"<EuiFormRow\\n  label=\\\"Text field\\\"\\n  compressed\\n>\\n  <EuiFieldText />\\n</EuiFormRow>\"\n  }, {\n    title: 'Described form groups',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: describedFormGroupSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: describedFormGroupHtml\n    }],\n    text: _react.default.createElement(\"p\", null, \"Use \", _react.default.createElement(_components2.EuiCode, null, \"EuiDescribedFormGroup\"), \" component to associate multiple \", _react.default.createElement(_components2.EuiCode, null, \"EuiFormRow\"), \"s. It can also simply be used with one \", _react.default.createElement(_components2.EuiCode, null, \"EuiFormRow\"), \" as a way to display help text (or additional text) next to the field instead of below (on mobile, will revert to being stacked).\"),\n    props: {\n      EuiDescribedFormGroup: _components2.EuiDescribedFormGroup\n    },\n    demo: _react.default.createElement(_described_form_group.default, null),\n    snippet: \"<EuiDescribedFormGroup\\n  idAria=\\\"id\\\"\\n  title={<h3>Set heading level based on context</h3>}\\n  description={\\n    <Fragment>\\n      Will be wrapped in a small, subdued EuiText block.\\n    </Fragment>\\n  }\\n>\\n  <EuiFormRow\\n    label=\\\"Text field\\\"\\n    describedByIds={['id']}\\n  >\\n    <EuiFieldText />\\n  </EuiFormRow>\\n</EuiDescribedFormGroup>\"\n  }, {\n    title: 'Inline',\n    text: _react.default.createElement(\"p\", null, \"Inline forms can be made with \", _react.default.createElement(_components2.EuiCode, null, \"FlexGroup\"), \". Apply\", _react.default.createElement(_components2.EuiCode, null, \"grow=false\"), \" on any of the items you want to collapse (like this button). Note that the button FormRow component also requires an additional prop because it\\u2019s missing a label.\"),\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: inlineSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: inlineHtml\n    }],\n    demo: _react.default.createElement(_inline.default, null)\n  }, {\n    title: 'Sizing inline form rows',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: inlineSizingSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: inlineSizingHtml\n    }],\n    text: _react.default.createElement(_react.Fragment, null, _react.default.createElement(\"p\", null, \"Apply a width to the wrapping FlexItem to size individual controls. When you need to make a field smaller, always apply the width to the FlexItem, not the input. The input inside will resize as needed.\"), _react.default.createElement(\"p\", null, \"When supplying children to an EuiFormRow that is\", ' ', _react.default.createElement(\"strong\", null, \"not\"), \" a form control, and you need to the content to vertically center with the other form controls, add the prop\", ' ', _react.default.createElement(_components2.EuiCode, null, \"displayOnly\"), \".\")),\n    demo: _react.default.createElement(_inline_sizing.default, null)\n  }, {\n    title: 'In a popover',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: inlinePopoverSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: inlinePopoverHtml\n    }],\n    text: _react.default.createElement(\"p\", null, \"Because forms auto-size to their wrapping elements, it means you can do fun things with them like stuff them in popovers and they\\u2019ll still work perfectly.\"),\n    demo: _react.default.createElement(_inline_popover.default, null)\n  }]\n};\nexports.FormLayoutsExample = FormLayoutsExample;",{"version":3,"sources":["/Users/chanderprall/projects/eui/src-docs/src/views/form_layouts/form_layouts_example.js"],"names":["formRowsSource","require","formRowsHtml","FormRows","describedFormGroupSource","describedFormGroupHtml","DescribedFormGroup","fullWidthSource","fullWidthHtml","FullWidth","inlineSource","inlineHtml","Inline","inlineSizingSource","inlineSizingHtml","InlineSizing","inlinePopoverSource","inlinePopoverHtml","InlinePopover","formCompressedSource","formCompressedHtml","FormCompressed","FormLayoutsExample","title","sections","source","type","GuideSectionTypes","JS","code","HTML","text","props","EuiForm","EuiFormRow","demo","snippet","EuiDescribedFormGroup"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\n\nimport { renderToHtml } from '../../services';\n\nimport { GuideSectionTypes } from '../../components';\n\nimport {\n  EuiCode,\n  EuiForm,\n  EuiFormRow,\n  EuiDescribedFormGroup,\n} from '../../../../src/components';\n\nimport FormRows from './form_rows';\nconst formRowsSource = require('!!raw-loader!./form_rows');\nconst formRowsHtml = renderToHtml(FormRows);\n\nimport DescribedFormGroup from './described_form_group';\nconst describedFormGroupSource = require('!!raw-loader!./described_form_group');\nconst describedFormGroupHtml = renderToHtml(DescribedFormGroup);\n\nimport FullWidth from './full_width';\nconst fullWidthSource = require('!!raw-loader!./full_width');\nconst fullWidthHtml = renderToHtml(FullWidth);\n\nimport Inline from './inline';\nconst inlineSource = require('!!raw-loader!./inline');\nconst inlineHtml = renderToHtml(Inline);\n\nimport InlineSizing from './inline_sizing';\nconst inlineSizingSource = require('!!raw-loader!./inline_sizing');\nconst inlineSizingHtml = renderToHtml(InlineSizing);\n\nimport InlinePopover from './inline_popover';\nconst inlinePopoverSource = require('!!raw-loader!./inline_popover');\nconst inlinePopoverHtml = renderToHtml(InlinePopover);\n\nimport FormCompressed from './form_compressed';\nconst formCompressedSource = require('!!raw-loader!./form_compressed');\nconst formCompressedHtml = renderToHtml(FormCompressed);\n\nexport const FormLayoutsExample = {\n  title: 'Form layouts',\n  sections: [\n    {\n      title: 'Form and form rows',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: formRowsSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: formRowsHtml,\n        },\n      ],\n      text: (\n        <p>\n          Use the <EuiCode>EuiFormRow</EuiCode> component to easily associate\n          form components with labels, help text, and error text. Use the{' '}\n          <EuiCode>EuiForm</EuiCode> component to group{' '}\n          <EuiCode>EuiFormRow</EuiCode>s.\n        </p>\n      ),\n      props: {\n        EuiForm,\n        EuiFormRow,\n      },\n      demo: <FormRows />,\n      snippet: `<EuiFormRow\n  label=\"Text field\"\n  helpText=\"I am some friendly help text.\"\n>\n  <EuiFieldText />\n</EuiFormRow>`,\n    },\n    {\n      title: 'Full-width',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: fullWidthSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: fullWidthHtml,\n        },\n      ],\n      text: (\n        <p>\n          Form elements will automatically flex to a max-width of{' '}\n          <EuiCode>400px</EuiCode>. You can optionally pass the{' '}\n          <EuiCode>fullWidth</EuiCode> prop to the row and form control to\n          expand to their container. This should be done rarely and usually you\n          will only need it for isolated controls like search bars and sliders.\n        </p>\n      ),\n      props: {\n        EuiFormRow,\n      },\n      demo: <FullWidth />,\n      snippet: `<EuiFormRow\n  fullWidth\n  label=\"Works on form rows too\"\n  helpText=\"Note that the fullWidth prop is not passed to the form row's child\"\n>\n  <EuiRange fullWidth />\n</EuiFormRow>`,\n    },\n    {\n      title: 'Compressed',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: formCompressedSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: formCompressedHtml,\n        },\n      ],\n      text: (\n        <p>\n          If the particular form is in an area with a small amount of real\n          estate, you can add the prop <EuiCode>compressed</EuiCode> to the{' '}\n          <EuiCode>EuiFormRow</EuiCode>s and it will pass down to the form\n          controls.\n        </p>\n      ),\n      props: {\n        EuiFormRow,\n      },\n      demo: <FormCompressed />,\n      snippet: `<EuiFormRow\n  label=\"Text field\"\n  compressed\n>\n  <EuiFieldText />\n</EuiFormRow>`,\n    },\n    {\n      title: 'Described form groups',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: describedFormGroupSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: describedFormGroupHtml,\n        },\n      ],\n      text: (\n        <p>\n          Use <EuiCode>EuiDescribedFormGroup</EuiCode> component to associate\n          multiple <EuiCode>EuiFormRow</EuiCode>s. It can also simply be used\n          with one <EuiCode>EuiFormRow</EuiCode> as a way to display help text\n          (or additional text) next to the field instead of below (on mobile,\n          will revert to being stacked).\n        </p>\n      ),\n      props: {\n        EuiDescribedFormGroup,\n      },\n      demo: <DescribedFormGroup />,\n      snippet: `<EuiDescribedFormGroup\n  idAria=\"id\"\n  title={<h3>Set heading level based on context</h3>}\n  description={\n    <Fragment>\n      Will be wrapped in a small, subdued EuiText block.\n    </Fragment>\n  }\n>\n  <EuiFormRow\n    label=\"Text field\"\n    describedByIds={['id']}\n  >\n    <EuiFieldText />\n  </EuiFormRow>\n</EuiDescribedFormGroup>`,\n    },\n    {\n      title: 'Inline',\n      text: (\n        <p>\n          Inline forms can be made with <EuiCode>FlexGroup</EuiCode>. Apply\n          <EuiCode>grow=false</EuiCode> on any of the items you want to collapse\n          (like this button). Note that the button FormRow component also\n          requires an additional prop because it&rsquo;s missing a label.\n        </p>\n      ),\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: inlineSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: inlineHtml,\n        },\n      ],\n      demo: <Inline />,\n    },\n    {\n      title: 'Sizing inline form rows',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: inlineSizingSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: inlineSizingHtml,\n        },\n      ],\n      text: (\n        <Fragment>\n          <p>\n            Apply a width to the wrapping FlexItem to size individual controls.\n            When you need to make a field smaller, always apply the width to the\n            FlexItem, not the input. The input inside will resize as needed.\n          </p>\n          <p>\n            When supplying children to an EuiFormRow that is{' '}\n            <strong>not</strong> a form control, and you need to the content to\n            vertically center with the other form controls, add the prop{' '}\n            <EuiCode>displayOnly</EuiCode>.\n          </p>\n        </Fragment>\n      ),\n      demo: <InlineSizing />,\n    },\n    {\n      title: 'In a popover',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: inlinePopoverSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: inlinePopoverHtml,\n        },\n      ],\n      text: (\n        <p>\n          Because forms auto-size to their wrapping elements, it means you can\n          do fun things with them like stuff them in popovers and they&rsquo;ll\n          still work perfectly.\n        </p>\n      ),\n      demo: <InlinePopover />,\n    },\n  ],\n};\n"]}]}