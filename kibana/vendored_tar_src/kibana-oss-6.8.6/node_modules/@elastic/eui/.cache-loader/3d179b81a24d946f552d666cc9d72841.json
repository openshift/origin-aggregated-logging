{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/selectable/matching_options.ts","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/selectable/matching_options.ts","mtime":1565204169994},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMatchingOptions = void 0;\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es7.array.includes\");\n\nrequire(\"core-js/modules/es6.string.includes\");\n\nrequire(\"core-js/modules/es6.array.find\");\n\nvar getSelectedOptionForSearchValue = function getSelectedOptionForSearchValue(searchValue, selectedOptions) {\n  var normalizedSearchValue = searchValue.toLowerCase();\n  return selectedOptions.find(function (option) {\n    return option.label.toLowerCase() === normalizedSearchValue;\n  });\n};\n\nvar collectMatchingOption = function collectMatchingOption(accumulator, option, normalizedSearchValue, isPreFiltered, selectedOptions) {\n  // Don't show options that have already been requested if\n  // the selectedOptions list exists\n  if (selectedOptions) {\n    var selectedOption = getSelectedOptionForSearchValue(option.label, selectedOptions);\n\n    if (selectedOption) {\n      return false;\n    }\n  } // If the options have already been prefiltered then we can skip filtering against the search value.\n  // TODO: I still don't quite understand how this works when hooked up to async\n\n\n  if (isPreFiltered) {\n    accumulator.push(option);\n    return;\n  }\n\n  if (!normalizedSearchValue) {\n    accumulator.push(option);\n    return;\n  }\n\n  var normalizedOption = option.label.trim().toLowerCase();\n\n  if (normalizedOption.includes(normalizedSearchValue)) {\n    accumulator.push(option);\n  }\n};\n\nvar getMatchingOptions = function getMatchingOptions(\n/**\n * All available options to match against\n */\noptions, searchValue, isPreFiltered, selectedOptions) {\n  var normalizedSearchValue = searchValue.trim().toLowerCase();\n  var matchingOptions = [];\n  options.forEach(function (option) {\n    collectMatchingOption(matchingOptions, option, normalizedSearchValue, isPreFiltered, selectedOptions);\n  });\n  return matchingOptions;\n};\n\nexports.getMatchingOptions = getMatchingOptions;",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/selectable/matching_options.ts"],"names":["getSelectedOptionForSearchValue","searchValue","selectedOptions","normalizedSearchValue","toLowerCase","find","option","label","collectMatchingOption","accumulator","isPreFiltered","selectedOption","push","normalizedOption","trim","includes","getMatchingOptions","options","matchingOptions","forEach"],"mappings":";;;;;;;;;;;;;;;AAEA,IAAMA,+BAA+B,GAAG,SAAlCA,+BAAkC,CACtCC,WADsC,EAEtCC,eAFsC,EAGnC;AACH,MAAMC,qBAAqB,GAAGF,WAAW,CAACG,WAAZ,EAA9B;AACA,SAAOF,eAAe,CAACG,IAAhB,CACL,UAAAC,MAAM;AAAA,WAAIA,MAAM,CAACC,KAAP,CAAaH,WAAb,OAA+BD,qBAAnC;AAAA,GADD,CAAP;AAGD,CARD;;AAUA,IAAMK,qBAAqB,GAAG,SAAxBA,qBAAwB,CAC5BC,WAD4B,EAE5BH,MAF4B,EAG5BH,qBAH4B,EAI5BO,aAJ4B,EAK5BR,eAL4B,EAMzB;AACH;AACA;AACA,MAAIA,eAAJ,EAAqB;AACnB,QAAMS,cAAc,GAAGX,+BAA+B,CACpDM,MAAM,CAACC,KAD6C,EAEpDL,eAFoD,CAAtD;;AAIA,QAAIS,cAAJ,EAAoB;AAClB,aAAO,KAAP;AACD;AACF,GAXE,CAaH;AACA;;;AACA,MAAID,aAAJ,EAAmB;AACjBD,IAAAA,WAAW,CAACG,IAAZ,CAAiBN,MAAjB;AACA;AACD;;AAED,MAAI,CAACH,qBAAL,EAA4B;AAC1BM,IAAAA,WAAW,CAACG,IAAZ,CAAiBN,MAAjB;AACA;AACD;;AAED,MAAMO,gBAAgB,GAAGP,MAAM,CAACC,KAAP,CAAaO,IAAb,GAAoBV,WAApB,EAAzB;;AACA,MAAIS,gBAAgB,CAACE,QAAjB,CAA0BZ,qBAA1B,CAAJ,EAAsD;AACpDM,IAAAA,WAAW,CAACG,IAAZ,CAAiBN,MAAjB;AACD;AACF,CAnCD;;AAqCO,IAAMU,kBAAkB,GAAG,SAArBA,kBAAqB;AAChC;;;AAGAC,OAJgC,EAQhChB,WARgC,EAYhCS,aAZgC,EAiBhCR,eAjBgC,EAkB7B;AACH,MAAMC,qBAAqB,GAAGF,WAAW,CAACa,IAAZ,GAAmBV,WAAnB,EAA9B;AACA,MAAMc,eAAyB,GAAG,EAAlC;AAEAD,EAAAA,OAAO,CAACE,OAAR,CAAgB,UAAAb,MAAM,EAAI;AACxBE,IAAAA,qBAAqB,CACnBU,eADmB,EAEnBZ,MAFmB,EAGnBH,qBAHmB,EAInBO,aAJmB,EAKnBR,eALmB,CAArB;AAOD,GARD;AASA,SAAOgB,eAAP;AACD,CAhCM","sourcesContent":["import { Option } from './types';\n\nconst getSelectedOptionForSearchValue = (\n  searchValue: string,\n  selectedOptions: Option[]\n) => {\n  const normalizedSearchValue = searchValue.toLowerCase();\n  return selectedOptions.find(\n    option => option.label.toLowerCase() === normalizedSearchValue\n  );\n};\n\nconst collectMatchingOption = (\n  accumulator: Option[],\n  option: Option,\n  normalizedSearchValue: string,\n  isPreFiltered?: boolean,\n  selectedOptions?: Option[]\n) => {\n  // Don't show options that have already been requested if\n  // the selectedOptions list exists\n  if (selectedOptions) {\n    const selectedOption = getSelectedOptionForSearchValue(\n      option.label,\n      selectedOptions\n    );\n    if (selectedOption) {\n      return false;\n    }\n  }\n\n  // If the options have already been prefiltered then we can skip filtering against the search value.\n  // TODO: I still don't quite understand how this works when hooked up to async\n  if (isPreFiltered) {\n    accumulator.push(option);\n    return;\n  }\n\n  if (!normalizedSearchValue) {\n    accumulator.push(option);\n    return;\n  }\n\n  const normalizedOption = option.label.trim().toLowerCase();\n  if (normalizedOption.includes(normalizedSearchValue)) {\n    accumulator.push(option);\n  }\n};\n\nexport const getMatchingOptions = (\n  /**\n   * All available options to match against\n   */\n  options: Option[],\n  /**\n   * String to match option.label against\n   */\n  searchValue: string,\n  /**\n   * Async?\n   */\n  isPreFiltered?: boolean,\n  /**\n   * To exclude selected options from the search list,\n   * pass the array of selected options\n   */\n  selectedOptions?: Option[]\n) => {\n  const normalizedSearchValue = searchValue.trim().toLowerCase();\n  const matchingOptions: Option[] = [];\n\n  options.forEach(option => {\n    collectMatchingOption(\n      matchingOptions,\n      option,\n      normalizedSearchValue,\n      isPreFiltered,\n      selectedOptions\n    );\n  });\n  return matchingOptions;\n};\n"]}]}