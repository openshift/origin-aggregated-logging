{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/card/card_select.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/card/card_select.js","mtime":1565204169625},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.euiCardSelectableColor = euiCardSelectableColor;\nexports.EuiCardSelectProps = exports.EuiCardSelect = void 0;\n\nrequire(\"core-js/modules/es6.object.assign\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _button_empty = require(\"../button/button_empty\");\n\nvar _i18n = require(\"../i18n\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nvar EuiCardSelect = function EuiCardSelect(_ref) {\n  var className = _ref.className,\n      onClick = _ref.onClick,\n      isSelected = _ref.isSelected,\n      isDisabled = _ref.isDisabled,\n      color = _ref.color,\n      children = _ref.children,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"onClick\", \"isSelected\", \"isDisabled\", \"color\", \"children\"]);\n\n  var child = euiCardSelectableText(isSelected, isDisabled, children);\n  var selectClasses = (0, _classnames.default)('euiCardSelect', \"euiCardSelect--\".concat(euiCardSelectableColor(color, isSelected)), className);\n  return _react.default.createElement(_button_empty.EuiButtonEmpty, _extends({\n    className: selectClasses,\n    color: color || 'text',\n    size: \"xs\",\n    onClick: onClick,\n    isDisabled: isDisabled,\n    iconType: isSelected ? 'check' : undefined\n  }, rest), child);\n};\n\nexports.EuiCardSelect = EuiCardSelect;\nvar EuiCardSelectProps = {\n  className: _propTypes.default.string,\n\n  /**\n   * You must handle the click event in order to have a select button\n   */\n  onClick: _propTypes.default.func.isRequired,\n\n  /**\n   * Is in the selected state\n   */\n  isSelected: _propTypes.default.bool,\n  isDisabled: _propTypes.default.bool,\n\n  /**\n   * Override the default color with one of the available colors from `EuiButtonEmpty`\n   */\n  color: _propTypes.default.oneOf(_button_empty.COLORS),\n\n  /**\n   * Override the content (text) of the button\n   */\n  children: _propTypes.default.node\n};\nexports.EuiCardSelectProps = EuiCardSelectProps;\nEuiCardSelect.propTypes = EuiCardSelectProps;\n\nfunction euiCardSelectableText(isSelected, isDisabled, children) {\n  if (children) {\n    return children;\n  }\n\n  var text;\n\n  if (isSelected) {\n    text = _react.default.createElement(_i18n.EuiI18n, {\n      token: \"euiCardSelect.selected\",\n      default: \"Selected\"\n    });\n  } else if (isDisabled) {\n    text = _react.default.createElement(_i18n.EuiI18n, {\n      token: \"euiCardSelect.unavailable\",\n      default: \"Unavailable\"\n    });\n  } else {\n    text = _react.default.createElement(_i18n.EuiI18n, {\n      token: \"euiCardSelect.select\",\n      default: \"Select\"\n    });\n  }\n\n  return text;\n}\n\nfunction euiCardSelectableColor(color, isSelected) {\n  var calculatedColor;\n\n  if (color) {\n    calculatedColor = color;\n  } else if (isSelected) {\n    calculatedColor = 'success';\n  } else {\n    calculatedColor = 'text';\n  }\n\n  return calculatedColor;\n}\n\nEuiCardSelect.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"EuiCardSelect\",\n  \"props\": {\n    \"className\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"onClick\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"You must handle the click event in order to have a select button\"\n    },\n    \"isSelected\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Is in the selected state\"\n    },\n    \"isDisabled\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"color\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"computed\": true,\n        \"value\": \"BUTTON_EMPTY_COLORS\"\n      },\n      \"required\": false,\n      \"description\": \"Override the default color with one of the available colors from `EuiButtonEmpty`\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Override the content (text) of the button\"\n    }\n  }\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/card/card_select.js"],"names":["EuiCardSelect","className","onClick","isSelected","isDisabled","color","children","rest","child","euiCardSelectableText","selectClasses","euiCardSelectableColor","undefined","EuiCardSelectProps","PropTypes","string","func","isRequired","bool","oneOf","BUTTON_EMPTY_COLORS","node","propTypes","text","calculatedColor"],"mappings":";;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AAKA;;;;;;;;;;AAEO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,OAQvB;AAAA,MAPJC,SAOI,QAPJA,SAOI;AAAA,MANJC,OAMI,QANJA,OAMI;AAAA,MALJC,UAKI,QALJA,UAKI;AAAA,MAJJC,UAII,QAJJA,UAII;AAAA,MAHJC,KAGI,QAHJA,KAGI;AAAA,MAFJC,QAEI,QAFJA,QAEI;AAAA,MADDC,IACC;;AACJ,MAAMC,KAAK,GAAGC,qBAAqB,CAACN,UAAD,EAAaC,UAAb,EAAyBE,QAAzB,CAAnC;AAEA,MAAMI,aAAa,GAAG,yBACpB,eADoB,2BAEFC,sBAAsB,CAACN,KAAD,EAAQF,UAAR,CAFpB,GAGpBF,SAHoB,CAAtB;AAMA,SACE,6BAAC,4BAAD;AACE,IAAA,SAAS,EAAES,aADb;AAEE,IAAA,KAAK,EAAEL,KAAK,IAAI,MAFlB;AAGE,IAAA,IAAI,EAAC,IAHP;AAIE,IAAA,OAAO,EAAEH,OAJX;AAKE,IAAA,UAAU,EAAEE,UALd;AAME,IAAA,QAAQ,EAAED,UAAU,GAAG,OAAH,GAAaS;AANnC,KAOML,IAPN,GAQGC,KARH,CADF;AAYD,CA7BM;;;AA+BA,IAAMK,kBAAkB,GAAG;AAChCZ,EAAAA,SAAS,EAAEa,mBAAUC,MADW;;AAEhC;;;AAGAb,EAAAA,OAAO,EAAEY,mBAAUE,IAAV,CAAeC,UALQ;;AAMhC;;;AAGAd,EAAAA,UAAU,EAAEW,mBAAUI,IATU;AAUhCd,EAAAA,UAAU,EAAEU,mBAAUI,IAVU;;AAWhC;;;AAGAb,EAAAA,KAAK,EAAES,mBAAUK,KAAV,CAAgBC,oBAAhB,CAdyB;;AAehC;;;AAGAd,EAAAA,QAAQ,EAAEQ,mBAAUO;AAlBY,CAA3B;;AAqBPrB,aAAa,CAACsB,SAAd,GAA0BT,kBAA1B;;AAEA,SAASJ,qBAAT,CAA+BN,UAA/B,EAA2CC,UAA3C,EAAuDE,QAAvD,EAAiE;AAC/D,MAAIA,QAAJ,EAAc;AACZ,WAAOA,QAAP;AACD;;AAED,MAAIiB,IAAJ;;AAEA,MAAIpB,UAAJ,EAAgB;AACdoB,IAAAA,IAAI,GAAG,6BAAC,aAAD;AAAS,MAAA,KAAK,EAAC,wBAAf;AAAwC,MAAA,OAAO,EAAC;AAAhD,MAAP;AACD,GAFD,MAEO,IAAInB,UAAJ,EAAgB;AACrBmB,IAAAA,IAAI,GAAG,6BAAC,aAAD;AAAS,MAAA,KAAK,EAAC,2BAAf;AAA2C,MAAA,OAAO,EAAC;AAAnD,MAAP;AACD,GAFM,MAEA;AACLA,IAAAA,IAAI,GAAG,6BAAC,aAAD;AAAS,MAAA,KAAK,EAAC,sBAAf;AAAsC,MAAA,OAAO,EAAC;AAA9C,MAAP;AACD;;AAED,SAAOA,IAAP;AACD;;AAEM,SAASZ,sBAAT,CAAgCN,KAAhC,EAAuCF,UAAvC,EAAmD;AACxD,MAAIqB,eAAJ;;AACA,MAAInB,KAAJ,EAAW;AACTmB,IAAAA,eAAe,GAAGnB,KAAlB;AACD,GAFD,MAEO,IAAIF,UAAJ,EAAgB;AACrBqB,IAAAA,eAAe,GAAG,SAAlB;AACD,GAFM,MAEA;AACLA,IAAAA,eAAe,GAAG,MAAlB;AACD;;AAED,SAAOA,eAAP;AACD","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport {\n  EuiButtonEmpty,\n  COLORS as BUTTON_EMPTY_COLORS,\n} from '../button/button_empty';\n\nimport { EuiI18n } from '../i18n';\n\nexport const EuiCardSelect = ({\n  className,\n  onClick,\n  isSelected,\n  isDisabled,\n  color,\n  children,\n  ...rest\n}) => {\n  const child = euiCardSelectableText(isSelected, isDisabled, children);\n\n  const selectClasses = classNames(\n    'euiCardSelect',\n    `euiCardSelect--${euiCardSelectableColor(color, isSelected)}`,\n    className\n  );\n\n  return (\n    <EuiButtonEmpty\n      className={selectClasses}\n      color={color || 'text'}\n      size=\"xs\"\n      onClick={onClick}\n      isDisabled={isDisabled}\n      iconType={isSelected ? 'check' : undefined}\n      {...rest}>\n      {child}\n    </EuiButtonEmpty>\n  );\n};\n\nexport const EuiCardSelectProps = {\n  className: PropTypes.string,\n  /**\n   * You must handle the click event in order to have a select button\n   */\n  onClick: PropTypes.func.isRequired,\n  /**\n   * Is in the selected state\n   */\n  isSelected: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  /**\n   * Override the default color with one of the available colors from `EuiButtonEmpty`\n   */\n  color: PropTypes.oneOf(BUTTON_EMPTY_COLORS),\n  /**\n   * Override the content (text) of the button\n   */\n  children: PropTypes.node,\n};\n\nEuiCardSelect.propTypes = EuiCardSelectProps;\n\nfunction euiCardSelectableText(isSelected, isDisabled, children) {\n  if (children) {\n    return children;\n  }\n\n  let text;\n\n  if (isSelected) {\n    text = <EuiI18n token=\"euiCardSelect.selected\" default=\"Selected\" />;\n  } else if (isDisabled) {\n    text = <EuiI18n token=\"euiCardSelect.unavailable\" default=\"Unavailable\" />;\n  } else {\n    text = <EuiI18n token=\"euiCardSelect.select\" default=\"Select\" />;\n  }\n\n  return text;\n}\n\nexport function euiCardSelectableColor(color, isSelected) {\n  let calculatedColor;\n  if (color) {\n    calculatedColor = color;\n  } else if (isSelected) {\n    calculatedColor = 'success';\n  } else {\n    calculatedColor = 'text';\n  }\n\n  return calculatedColor;\n}\n"]}]}