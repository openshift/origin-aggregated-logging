{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/datagrid/data_grid_cell.tsx","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/datagrid/data_grid_cell.tsx","mtime":1567544023886},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EuiDataGridCell = void 0;\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/es6.object.assign\");\n\nrequire(\"core-js/modules/es6.object.set-prototype-of\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _focus_trap = require(\"../focus_trap\");\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nvar EuiDataGridCellContent = (0, _react.memo)(function (props) {\n  var renderCellValue = props.renderCellValue,\n      rest = _objectWithoutProperties(props, [\"renderCellValue\"]); // React is more permissable than the TS types indicate\n\n\n  var CellElement = renderCellValue;\n  return _react.default.createElement(CellElement, rest);\n});\nvar IS_TABBABLE_ATTR = 'data-is-tabbable';\n\nvar EuiDataGridCell =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EuiDataGridCell, _Component);\n\n  function EuiDataGridCell() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EuiDataGridCell);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EuiDataGridCell)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"cellRef\", (0, _react.createRef)());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"cellContentsRef\", (0, _react.createRef)());\n\n    return _this;\n  }\n\n  _createClass(EuiDataGridCell, [{\n    key: \"isInteractiveCell\",\n    value: function isInteractiveCell() {\n      var cellContents = this.cellContentsRef.current;\n\n      if (!cellContents) {\n        return false;\n      }\n\n      var tabbables = (0, _utils.getTabbables)(cellContents);\n      return tabbables.length > 1 || tabbables.length === 1 && this.hasNotTabbables(cellContents);\n    }\n  }, {\n    key: \"updateFocus\",\n    value: function updateFocus() {\n      var cell = this.cellRef.current;\n      var cellContents = this.cellContentsRef.current;\n      var _this$props = this.props,\n          isFocusable = _this$props.isFocusable,\n          isGridNavigationEnabled = _this$props.isGridNavigationEnabled;\n\n      if (cell && isFocusable && cellContents) {\n        var tabbables = (0, _utils.getTabbables)(cellContents);\n        var isASimpleInteractiveCell = tabbables.length === 1 && !this.hasNotTabbables(cellContents);\n\n        if (!isGridNavigationEnabled || isGridNavigationEnabled && isASimpleInteractiveCell) {\n          tabbables[0].focus();\n        } else {\n          cell.focus();\n        }\n      }\n    }\n  }, {\n    key: \"setTabbablesTabIndex\",\n    value: function setTabbablesTabIndex() {\n      var cellContents = this.cellContentsRef.current;\n\n      if (cellContents) {\n        var _this$props2 = this.props,\n            _isFocusable = _this$props2.isFocusable,\n            _isGridNavigationEnabled = _this$props2.isGridNavigationEnabled;\n        var areContentsFocusable = _isFocusable && !_isGridNavigationEnabled;\n        (0, _utils.getTabbables)(cellContents).forEach(function (element) {\n          element.setAttribute('tabIndex', areContentsFocusable ? '0' : '-1');\n          element.setAttribute(IS_TABBABLE_ATTR, 'true');\n        });\n      }\n    }\n  }, {\n    key: \"hasNotTabbables\",\n    value: function hasNotTabbables(cellContents) {\n      var clone = cellContents.cloneNode(true); // has to exist because we set the `IS_TABBABLE_ATTR` attribute on it\n\n      var tabbableElement = clone.querySelector(\"[\".concat(IS_TABBABLE_ATTR, \"]\")); // IE 11 doesn't support remove\n\n      if (tabbableElement.remove) {\n        tabbableElement.remove();\n      } else {\n        tabbableElement.parentNode.removeChild(tabbableElement);\n      } // textContent includes not human readable text\n      // but innerText causes a page reflow\n      // so, only force a reflow if we have a strong signal that we should\n\n\n      if (clone.textContent && clone.textContent.length > 0) {\n        // Fallback to innerText if textContent isn't available\n        // Only documented to fallback in tests; all officially supported browsers support innerText\n        if (typeof clone.innerText === 'undefined') {\n          return clone.textContent.length > 0;\n        }\n\n        return clone.innerText.length > 0;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setTabbablesTabIndex();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var didFocusChange = prevProps.isFocusable !== this.props.isFocusable;\n      var didNavigationChange = prevProps.isGridNavigationEnabled !== this.props.isGridNavigationEnabled;\n\n      if (didFocusChange || didNavigationChange) {\n        this.updateFocus();\n        this.setTabbablesTabIndex();\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      if (nextProps.rowIndex !== this.props.rowIndex) return true;\n      if (nextProps.colIndex !== this.props.colIndex) return true;\n      if (nextProps.columnId !== this.props.columnId) return true;\n      if (nextProps.width !== this.props.width) return true;\n      if (nextProps.renderCellValue !== this.props.renderCellValue) return true;\n      if (nextProps.onCellFocus !== this.props.onCellFocus) return true;\n      if (nextProps.isFocusable !== this.props.isFocusable) return true;\n      if (nextProps.isGridNavigationEnabled !== this.props.isGridNavigationEnabled) return true;\n      if (nextProps.interactiveCellId !== this.props.interactiveCellId) return true;\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          width = _this$props3.width,\n          isFocusable = _this$props3.isFocusable,\n          isGridNavigationEnabled = _this$props3.isGridNavigationEnabled,\n          interactiveCellId = _this$props3.interactiveCellId,\n          rest = _objectWithoutProperties(_this$props3, [\"width\", \"isFocusable\", \"isGridNavigationEnabled\", \"interactiveCellId\"]);\n\n      var colIndex = rest.colIndex,\n          rowIndex = rest.rowIndex,\n          onCellFocus = rest.onCellFocus;\n      var isInteractive = this.isInteractiveCell();\n\n      var isInteractiveCell = _defineProperty({}, _utils.CELL_CONTENTS_ATTR, isInteractive);\n\n      return _react.default.createElement(\"div\", _extends({\n        role: \"gridcell\"\n      }, isInteractive && {\n        'aria-describedby': interactiveCellId\n      }, {\n        tabIndex: isFocusable ? 0 : -1,\n        ref: this.cellRef,\n        className: \"euiDataGridRowCell\",\n        \"data-test-subj\": \"dataGridRowCell\",\n        onFocus: function onFocus() {\n          return onCellFocus([colIndex, rowIndex]);\n        },\n        style: {\n          width: \"\".concat(width, \"px\")\n        }\n      }), _react.default.createElement(_focus_trap.EuiFocusTrap, {\n        disabled: !(isFocusable && !isGridNavigationEnabled)\n      }, _react.default.createElement(\"div\", _extends({}, isInteractiveCell, {\n        ref: this.cellContentsRef,\n        className: \"euiDataGridRowCell__content\"\n      }), _react.default.createElement(EuiDataGridCellContent, rest))));\n    }\n  }]);\n\n  return EuiDataGridCell;\n}(_react.Component);\n\nexports.EuiDataGridCell = EuiDataGridCell;\nEuiDataGridCell.propTypes = {\n  rowIndex: _propTypes.default.number.isRequired,\n  colIndex: _propTypes.default.number.isRequired,\n  columnId: _propTypes.default.string.isRequired,\n  width: _propTypes.default.number,\n  isFocusable: _propTypes.default.bool.isRequired,\n  onCellFocus: _propTypes.default.func.isRequired,\n  isGridNavigationEnabled: _propTypes.default.bool.isRequired,\n  interactiveCellId: _propTypes.default.string.isRequired,\n  renderCellValue: _propTypes.default.oneOfType([_propTypes.default.any.isRequired, _propTypes.default.func.isRequired]).isRequired\n};\nEuiDataGridCell.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [{\n    \"name\": \"isInteractiveCell\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [],\n    \"returns\": null\n  }, {\n    \"name\": \"updateFocus\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [],\n    \"returns\": null\n  }, {\n    \"name\": \"setTabbablesTabIndex\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [],\n    \"returns\": null\n  }, {\n    \"name\": \"hasNotTabbables\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"cellContents\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }],\n  \"displayName\": \"EuiDataGridCell\",\n  \"props\": {\n    \"rowIndex\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"colIndex\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"columnId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"width\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"isFocusable\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"onCellFocus\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"isGridNavigationEnabled\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"interactiveCellId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"renderCellValue\": {\n      \"type\": {\n        \"name\": \"union\",\n        \"value\": [{\n          \"name\": \"any\"\n        }, {\n          \"name\": \"func\"\n        }]\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/datagrid/data_grid_cell.tsx"],"names":["EuiDataGridCellContent","props","renderCellValue","rest","CellElement","IS_TABBABLE_ATTR","EuiDataGridCell","cellContents","cellContentsRef","current","tabbables","length","hasNotTabbables","cell","cellRef","isFocusable","isGridNavigationEnabled","isASimpleInteractiveCell","focus","areContentsFocusable","forEach","element","setAttribute","clone","cloneNode","tabbableElement","querySelector","remove","parentNode","removeChild","textContent","innerText","setTabbablesTabIndex","prevProps","didFocusChange","didNavigationChange","updateFocus","nextProps","rowIndex","colIndex","columnId","width","onCellFocus","interactiveCellId","isInteractive","isInteractiveCell","CELL_CONTENTS_ATTR","Component"],"mappings":"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","sourcesContent":["function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nimport PropTypes from \"prop-types\";\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { Component, memo, createRef } from 'react'; // @ts-ignore\n\nimport { EuiFocusTrap } from '../focus_trap';\nimport { getTabbables, CELL_CONTENTS_ATTR } from './utils';\nvar EuiDataGridCellContent = memo(function (props) {\n  var renderCellValue = props.renderCellValue,\n      rest = _objectWithoutProperties(props, [\"renderCellValue\"]); // React is more permissable than the TS types indicate\n\n\n  var CellElement = renderCellValue;\n  return React.createElement(CellElement, rest);\n});\nvar IS_TABBABLE_ATTR = 'data-is-tabbable';\nexport class EuiDataGridCell extends Component {\n  cellRef = createRef();\n  cellContentsRef = createRef();\n\n  isInteractiveCell() {\n    const cellContents = this.cellContentsRef.current;\n\n    if (!cellContents) {\n      return false;\n    }\n\n    const tabbables = getTabbables(cellContents);\n    return tabbables.length > 1 || tabbables.length === 1 && this.hasNotTabbables(cellContents);\n  }\n\n  updateFocus() {\n    const cell = this.cellRef.current;\n    const cellContents = this.cellContentsRef.current;\n    const {\n      isFocusable,\n      isGridNavigationEnabled\n    } = this.props;\n\n    if (cell && isFocusable && cellContents) {\n      const tabbables = getTabbables(cellContents);\n      const isASimpleInteractiveCell = tabbables.length === 1 && !this.hasNotTabbables(cellContents);\n\n      if (!isGridNavigationEnabled || isGridNavigationEnabled && isASimpleInteractiveCell) {\n        tabbables[0].focus();\n      } else {\n        cell.focus();\n      }\n    }\n  }\n\n  setTabbablesTabIndex() {\n    const cellContents = this.cellContentsRef.current;\n\n    if (cellContents) {\n      const {\n        isFocusable,\n        isGridNavigationEnabled\n      } = this.props;\n      const areContentsFocusable = isFocusable && !isGridNavigationEnabled;\n      getTabbables(cellContents).forEach(element => {\n        element.setAttribute('tabIndex', areContentsFocusable ? '0' : '-1');\n        element.setAttribute(IS_TABBABLE_ATTR, 'true');\n      });\n    }\n  }\n\n  hasNotTabbables(cellContents) {\n    const clone = cellContents.cloneNode(true); // has to exist because we set the `IS_TABBABLE_ATTR` attribute on it\n\n    const tabbableElement = clone.querySelector(`[${IS_TABBABLE_ATTR}]`); // IE 11 doesn't support remove\n\n    if (tabbableElement.remove) {\n      tabbableElement.remove();\n    } else {\n      tabbableElement.parentNode.removeChild(tabbableElement);\n    } // textContent includes not human readable text\n    // but innerText causes a page reflow\n    // so, only force a reflow if we have a strong signal that we should\n\n\n    if (clone.textContent && clone.textContent.length > 0) {\n      // Fallback to innerText if textContent isn't available\n      // Only documented to fallback in tests; all officially supported browsers support innerText\n      if (typeof clone.innerText === 'undefined') {\n        return clone.textContent.length > 0;\n      }\n\n      return clone.innerText.length > 0;\n    }\n\n    return false;\n  }\n\n  componentDidMount() {\n    this.setTabbablesTabIndex();\n  }\n\n  componentDidUpdate(prevProps) {\n    const didFocusChange = prevProps.isFocusable !== this.props.isFocusable;\n    const didNavigationChange = prevProps.isGridNavigationEnabled !== this.props.isGridNavigationEnabled;\n\n    if (didFocusChange || didNavigationChange) {\n      this.updateFocus();\n      this.setTabbablesTabIndex();\n    }\n  }\n\n  shouldComponentUpdate(nextProps) {\n    if (nextProps.rowIndex !== this.props.rowIndex) return true;\n    if (nextProps.colIndex !== this.props.colIndex) return true;\n    if (nextProps.columnId !== this.props.columnId) return true;\n    if (nextProps.width !== this.props.width) return true;\n    if (nextProps.renderCellValue !== this.props.renderCellValue) return true;\n    if (nextProps.onCellFocus !== this.props.onCellFocus) return true;\n    if (nextProps.isFocusable !== this.props.isFocusable) return true;\n    if (nextProps.isGridNavigationEnabled !== this.props.isGridNavigationEnabled) return true;\n    if (nextProps.interactiveCellId !== this.props.interactiveCellId) return true;\n    return false;\n  }\n\n  render() {\n    const {\n      width,\n      isFocusable,\n      isGridNavigationEnabled,\n      interactiveCellId,\n      ...rest\n    } = this.props;\n    const {\n      colIndex,\n      rowIndex,\n      onCellFocus\n    } = rest;\n    const isInteractive = this.isInteractiveCell();\n    const isInteractiveCell = {\n      [CELL_CONTENTS_ATTR]: isInteractive\n    };\n    return <div role=\"gridcell\" {...isInteractive && {\n      'aria-describedby': interactiveCellId\n    }} tabIndex={isFocusable ? 0 : -1} ref={this.cellRef} className=\"euiDataGridRowCell\" data-test-subj=\"dataGridRowCell\" onFocus={() => onCellFocus([colIndex, rowIndex])} style={{\n      width: `${width}px`\n    }}>\n        <EuiFocusTrap disabled={!(isFocusable && !isGridNavigationEnabled)}>\n          <div {...isInteractiveCell} ref={this.cellContentsRef} className=\"euiDataGridRowCell__content\">\n            <EuiDataGridCellContent {...rest} />\n          </div>\n        </EuiFocusTrap>\n      </div>;\n  }\n\n}\nEuiDataGridCell.propTypes = {\n  rowIndex: PropTypes.number.isRequired,\n  colIndex: PropTypes.number.isRequired,\n  columnId: PropTypes.string.isRequired,\n  width: PropTypes.number,\n  isFocusable: PropTypes.bool.isRequired,\n  onCellFocus: PropTypes.func.isRequired,\n  isGridNavigationEnabled: PropTypes.bool.isRequired,\n  interactiveCellId: PropTypes.string.isRequired,\n  renderCellValue: PropTypes.oneOfType([PropTypes.any.isRequired, PropTypes.func.isRequired]).isRequired\n};"]}]}