{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/button/button_empty/button_empty.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/button/button_empty/button_empty.js","mtime":1567534071237},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EuiButtonEmpty = exports.FLUSH_TYPES = exports.ICON_SIDES = exports.SIZES = exports.COLORS = void 0;\n\nrequire(\"core-js/modules/es6.object.assign\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _loading = require(\"../../loading\");\n\nvar _services = require(\"../../../services\");\n\nvar _icon = require(\"../../icon\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nvar colorToClassNameMap = {\n  primary: 'euiButtonEmpty--primary',\n  danger: 'euiButtonEmpty--danger',\n  disabled: 'euiButtonEmpty--disabled',\n  text: 'euiButtonEmpty--text',\n  ghost: 'euiButtonEmpty--ghost'\n};\nvar COLORS = Object.keys(colorToClassNameMap);\nexports.COLORS = COLORS;\nvar sizeToClassNameMap = {\n  xs: 'euiButtonEmpty--xSmall',\n  s: 'euiButtonEmpty--small',\n  l: 'euiButtonEmpty--large'\n};\nvar SIZES = Object.keys(sizeToClassNameMap);\nexports.SIZES = SIZES;\nvar iconSideToClassNameMap = {\n  left: '',\n  right: 'euiButtonEmpty--iconRight'\n};\nvar ICON_SIDES = Object.keys(iconSideToClassNameMap);\nexports.ICON_SIDES = ICON_SIDES;\nvar flushTypeToClassNameMap = {\n  left: 'euiButtonEmpty--flushLeft',\n  right: 'euiButtonEmpty--flushRight'\n};\nvar FLUSH_TYPES = Object.keys(flushTypeToClassNameMap);\nexports.FLUSH_TYPES = FLUSH_TYPES;\n\nvar EuiButtonEmpty = function EuiButtonEmpty(_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      iconType = _ref.iconType,\n      iconSide = _ref.iconSide,\n      color = _ref.color,\n      size = _ref.size,\n      flush = _ref.flush,\n      isDisabled = _ref.isDisabled,\n      isLoading = _ref.isLoading,\n      href = _ref.href,\n      target = _ref.target,\n      rel = _ref.rel,\n      type = _ref.type,\n      buttonRef = _ref.buttonRef,\n      contentProps = _ref.contentProps,\n      textProps = _ref.textProps,\n      rest = _objectWithoutProperties(_ref, [\"children\", \"className\", \"iconType\", \"iconSide\", \"color\", \"size\", \"flush\", \"isDisabled\", \"isLoading\", \"href\", \"target\", \"rel\", \"type\", \"buttonRef\", \"contentProps\", \"textProps\"]);\n\n  // If in the loading state, force disabled to true\n  isDisabled = isLoading ? true : isDisabled;\n  var classes = (0, _classnames.default)('euiButtonEmpty', colorToClassNameMap[color], sizeToClassNameMap[size], iconSideToClassNameMap[iconSide], flushTypeToClassNameMap[flush], className);\n  var contentClassNames = (0, _classnames.default)('euiButtonEmpty__content', contentProps && contentProps.className);\n  var textClassNames = (0, _classnames.default)('euiButtonEmpty__text', textProps && textProps.className); // Add an icon to the button if one exists.\n\n  var buttonIcon;\n\n  if (isLoading) {\n    buttonIcon = _react.default.createElement(_loading.EuiLoadingSpinner, {\n      className: \"euiButton__spinner\",\n      size: \"m\"\n    });\n  } else if (iconType) {\n    buttonIcon = _react.default.createElement(_icon.EuiIcon, {\n      className: \"euiButtonEmpty__icon\",\n      type: iconType,\n      size: \"m\",\n      \"aria-hidden\": \"true\"\n    });\n  }\n\n  var innerNode = _react.default.createElement(\"span\", _extends({}, contentProps, {\n    className: contentClassNames\n  }), buttonIcon, _react.default.createElement(\"span\", _extends({}, textProps, {\n    className: textClassNames\n  }), children)); // <a> elements don't respect the `disabled` attribute. So if we're disabled, we'll just pretend\n  // this is a button and piggyback off its disabled styles.\n\n\n  if (href && !isDisabled) {\n    var secureRel = (0, _services.getSecureRelForTarget)({\n      href: href,\n      target: target,\n      rel: rel\n    });\n    return _react.default.createElement(\"a\", _extends({\n      className: classes,\n      href: href,\n      target: target,\n      rel: secureRel,\n      ref: buttonRef\n    }, rest), innerNode);\n  } else {\n    return _react.default.createElement(\"button\", _extends({\n      disabled: isDisabled,\n      className: classes,\n      type: type,\n      ref: buttonRef\n    }, rest), innerNode);\n  }\n};\n\nexports.EuiButtonEmpty = EuiButtonEmpty;\nEuiButtonEmpty.propTypes = {\n  children: _propTypes.default.node,\n  className: _propTypes.default.string,\n  iconType: _icon.IconPropType,\n  iconSide: _propTypes.default.oneOf(ICON_SIDES),\n  color: _propTypes.default.oneOf(COLORS),\n  size: _propTypes.default.oneOf(SIZES),\n  flush: _propTypes.default.oneOf(FLUSH_TYPES),\n  isDisabled: _propTypes.default.bool,\n  href: _propTypes.default.string,\n  target: _propTypes.default.string,\n  rel: _propTypes.default.string,\n  onClick: _propTypes.default.func,\n\n  /**\n   * Adds/swaps for loading spinner & disables\n   */\n  isLoading: _propTypes.default.bool,\n  type: _propTypes.default.string,\n  buttonRef: _propTypes.default.func,\n\n  /**\n   * Passes props to `euiButtonEmpty__content` span\n   */\n  contentProps: _propTypes.default.object,\n\n  /**\n   * Passes props to `euiButtonEmpty__text` span\n   */\n  textProps: _propTypes.default.object\n};\nEuiButtonEmpty.defaultProps = {\n  type: 'button',\n  iconSide: 'left',\n  color: 'primary'\n};\nEuiButtonEmpty.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"EuiButtonEmpty\",\n  \"props\": {\n    \"type\": {\n      \"defaultValue\": {\n        \"value\": \"'button'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"iconSide\": {\n      \"defaultValue\": {\n        \"value\": \"'left'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"left\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"right\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"color\": {\n      \"defaultValue\": {\n        \"value\": \"'primary'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"primary\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"danger\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"disabled\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"text\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"ghost\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"className\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"iconType\": {\n      \"type\": {\n        \"name\": \"custom\",\n        \"raw\": \"IconPropType\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"size\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"xs\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"s\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"l\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"flush\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"left\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"right\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"isDisabled\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"href\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"target\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"rel\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"onClick\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"isLoading\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Adds/swaps for loading spinner & disables\"\n    },\n    \"buttonRef\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"contentProps\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": false,\n      \"description\": \"Passes props to `euiButtonEmpty__content` span\"\n    },\n    \"textProps\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": false,\n      \"description\": \"Passes props to `euiButtonEmpty__text` span\"\n    }\n  }\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/button/button_empty/button_empty.js"],"names":["colorToClassNameMap","primary","danger","disabled","text","ghost","COLORS","Object","keys","sizeToClassNameMap","xs","s","l","SIZES","iconSideToClassNameMap","left","right","ICON_SIDES","flushTypeToClassNameMap","FLUSH_TYPES","EuiButtonEmpty","children","className","iconType","iconSide","color","size","flush","isDisabled","isLoading","href","target","rel","type","buttonRef","contentProps","textProps","rest","classes","contentClassNames","textClassNames","buttonIcon","innerNode","secureRel","propTypes","PropTypes","node","string","IconPropType","oneOf","bool","onClick","func","object","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport { EuiLoadingSpinner } from '../../loading';\n\nimport { getSecureRelForTarget } from '../../../services';\n\nimport { IconPropType, EuiIcon } from '../../icon';\n\nconst colorToClassNameMap = {\n  primary: 'euiButtonEmpty--primary',\n  danger: 'euiButtonEmpty--danger',\n  disabled: 'euiButtonEmpty--disabled',\n  text: 'euiButtonEmpty--text',\n  ghost: 'euiButtonEmpty--ghost',\n};\n\nexport const COLORS = Object.keys(colorToClassNameMap);\n\nconst sizeToClassNameMap = {\n  xs: 'euiButtonEmpty--xSmall',\n  s: 'euiButtonEmpty--small',\n  l: 'euiButtonEmpty--large',\n};\n\nexport const SIZES = Object.keys(sizeToClassNameMap);\n\nconst iconSideToClassNameMap = {\n  left: '',\n  right: 'euiButtonEmpty--iconRight',\n};\n\nexport const ICON_SIDES = Object.keys(iconSideToClassNameMap);\n\nconst flushTypeToClassNameMap = {\n  left: 'euiButtonEmpty--flushLeft',\n  right: 'euiButtonEmpty--flushRight',\n};\n\nexport const FLUSH_TYPES = Object.keys(flushTypeToClassNameMap);\n\nexport const EuiButtonEmpty = ({\n  children,\n  className,\n  iconType,\n  iconSide,\n  color,\n  size,\n  flush,\n  isDisabled,\n  isLoading,\n  href,\n  target,\n  rel,\n  type,\n  buttonRef,\n  contentProps,\n  textProps,\n  ...rest\n}) => {\n  // If in the loading state, force disabled to true\n  isDisabled = isLoading ? true : isDisabled;\n\n  const classes = classNames(\n    'euiButtonEmpty',\n    colorToClassNameMap[color],\n    sizeToClassNameMap[size],\n    iconSideToClassNameMap[iconSide],\n    flushTypeToClassNameMap[flush],\n    className\n  );\n\n  const contentClassNames = classNames(\n    'euiButtonEmpty__content',\n    contentProps && contentProps.className\n  );\n\n  const textClassNames = classNames(\n    'euiButtonEmpty__text',\n    textProps && textProps.className\n  );\n\n  // Add an icon to the button if one exists.\n  let buttonIcon;\n\n  if (isLoading) {\n    buttonIcon = <EuiLoadingSpinner className=\"euiButton__spinner\" size=\"m\" />;\n  } else if (iconType) {\n    buttonIcon = (\n      <EuiIcon\n        className=\"euiButtonEmpty__icon\"\n        type={iconType}\n        size=\"m\"\n        aria-hidden=\"true\"\n      />\n    );\n  }\n\n  const innerNode = (\n    <span {...contentProps} className={contentClassNames}>\n      {buttonIcon}\n      <span {...textProps} className={textClassNames}>\n        {children}\n      </span>\n    </span>\n  );\n\n  // <a> elements don't respect the `disabled` attribute. So if we're disabled, we'll just pretend\n  // this is a button and piggyback off its disabled styles.\n  if (href && !isDisabled) {\n    const secureRel = getSecureRelForTarget({ href, target, rel });\n\n    return (\n      <a\n        className={classes}\n        href={href}\n        target={target}\n        rel={secureRel}\n        ref={buttonRef}\n        {...rest}>\n        {innerNode}\n      </a>\n    );\n  } else {\n    return (\n      <button\n        disabled={isDisabled}\n        className={classes}\n        type={type}\n        ref={buttonRef}\n        {...rest}>\n        {innerNode}\n      </button>\n    );\n  }\n};\n\nEuiButtonEmpty.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  iconType: IconPropType,\n  iconSide: PropTypes.oneOf(ICON_SIDES),\n  color: PropTypes.oneOf(COLORS),\n  size: PropTypes.oneOf(SIZES),\n  flush: PropTypes.oneOf(FLUSH_TYPES),\n  isDisabled: PropTypes.bool,\n  href: PropTypes.string,\n  target: PropTypes.string,\n  rel: PropTypes.string,\n  onClick: PropTypes.func,\n\n  /**\n   * Adds/swaps for loading spinner & disables\n   */\n  isLoading: PropTypes.bool,\n\n  type: PropTypes.string,\n  buttonRef: PropTypes.func,\n\n  /**\n   * Passes props to `euiButtonEmpty__content` span\n   */\n  contentProps: PropTypes.object,\n\n  /**\n   * Passes props to `euiButtonEmpty__text` span\n   */\n  textProps: PropTypes.object,\n};\n\nEuiButtonEmpty.defaultProps = {\n  type: 'button',\n  iconSide: 'left',\n  color: 'primary',\n};\n"]}]}