{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/facet/facet_button.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/facet/facet_button.js","mtime":1567534071255},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EuiFacetButton = void 0;\n\nrequire(\"core-js/modules/es6.object.assign\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _badge = require(\"../badge\");\n\nvar _loading = require(\"../loading\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nvar EuiFacetButton = function EuiFacetButton(_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      icon = _ref.icon,\n      isDisabled = _ref.isDisabled,\n      isLoading = _ref.isLoading,\n      isSelected = _ref.isSelected,\n      quantity = _ref.quantity,\n      buttonRef = _ref.buttonRef,\n      rest = _objectWithoutProperties(_ref, [\"children\", \"className\", \"icon\", \"isDisabled\", \"isLoading\", \"isSelected\", \"quantity\", \"buttonRef\"]);\n\n  // If in the loading state, force disabled to true\n  isDisabled = isLoading ? true : isDisabled;\n  var classes = (0, _classnames.default)('euiFacetButton', {\n    'euiFacetButton--isSelected': isSelected,\n    'euiFacetButton--unSelected': !isSelected\n  }, className); // Add quanity number if provided or loading indicator\n\n  var buttonQuantity;\n\n  if (isLoading) {\n    buttonQuantity = _react.default.createElement(_loading.EuiLoadingSpinner, {\n      className: \"euiFacetButton__spinner\",\n      size: \"m\"\n    });\n  } else if (typeof quantity === 'number') {\n    buttonQuantity = _react.default.createElement(_badge.EuiNotificationBadge, {\n      className: \"euiFacetButton__quantity\",\n      size: \"m\",\n      color: !isSelected || isDisabled ? 'subdued' : 'accent'\n    }, quantity);\n  } // Add an icon to the button if one exists.\n\n\n  var buttonIcon;\n\n  if (icon) {\n    buttonIcon = _react.default.cloneElement(icon, {\n      className: 'euiFacetButton__icon'\n    });\n  }\n\n  var dataText;\n\n  if (typeof children === 'string') {\n    dataText = children;\n  }\n\n  return _react.default.createElement(\"button\", _extends({\n    className: classes,\n    disabled: isDisabled,\n    type: \"button\",\n    ref: buttonRef\n  }, rest), _react.default.createElement(\"span\", {\n    className: \"euiFacetButton__content\"\n  }, buttonIcon, _react.default.createElement(\"span\", {\n    \"data-text\": dataText,\n    className: \"euiFacetButton__text\"\n  }, children), buttonQuantity));\n};\n\nexports.EuiFacetButton = EuiFacetButton;\nEuiFacetButton.propTypes = {\n  children: _propTypes.default.node.isRequired,\n  className: _propTypes.default.string,\n  isDisabled: _propTypes.default.bool,\n  onClick: _propTypes.default.func,\n  buttonRef: _propTypes.default.func,\n\n  /**\n   * Any node, but preferrably a `EuiIcon` or `EuiAvatar`\n   */\n  icon: _propTypes.default.node,\n\n  /**\n   * Adds/swaps for loading spinner & disables\n   */\n  isLoading: _propTypes.default.bool,\n\n  /**\n   * Changes visual of button to indicate it's currently selected\n   */\n  isSelected: _propTypes.default.bool,\n\n  /**\n   * Adds a notification indicator for displaying the quantity provided\n   */\n  quantity: _propTypes.default.number\n};\nEuiFacetButton.defaultProps = {\n  isDisabled: false,\n  isLoading: false,\n  isSelected: false\n};\nEuiFacetButton.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"EuiFacetButton\",\n  \"props\": {\n    \"isDisabled\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"isLoading\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Adds/swaps for loading spinner & disables\"\n    },\n    \"isSelected\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Changes visual of button to indicate it's currently selected\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"className\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"onClick\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"buttonRef\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"icon\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Any node, but preferrably a `EuiIcon` or `EuiAvatar`\"\n    },\n    \"quantity\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Adds a notification indicator for displaying the quantity provided\"\n    }\n  }\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/facet/facet_button.js"],"names":["EuiFacetButton","children","className","icon","isDisabled","isLoading","isSelected","quantity","buttonRef","rest","classes","buttonQuantity","buttonIcon","React","cloneElement","dataText","propTypes","PropTypes","node","isRequired","string","bool","onClick","func","number","defaultProps"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AAEA;;;;;;;;;;AAEO,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,OAUxB;AAAA,MATJC,QASI,QATJA,QASI;AAAA,MARJC,SAQI,QARJA,SAQI;AAAA,MAPJC,IAOI,QAPJA,IAOI;AAAA,MANJC,UAMI,QANJA,UAMI;AAAA,MALJC,SAKI,QALJA,SAKI;AAAA,MAJJC,UAII,QAJJA,UAII;AAAA,MAHJC,QAGI,QAHJA,QAGI;AAAA,MAFJC,SAEI,QAFJA,SAEI;AAAA,MADDC,IACC;;AACJ;AACAL,EAAAA,UAAU,GAAGC,SAAS,GAAG,IAAH,GAAUD,UAAhC;AAEA,MAAMM,OAAO,GAAG,yBACd,gBADc,EAEd;AACE,kCAA8BJ,UADhC;AAEE,kCAA8B,CAACA;AAFjC,GAFc,EAMdJ,SANc,CAAhB,CAJI,CAaJ;;AACA,MAAIS,cAAJ;;AAEA,MAAIN,SAAJ,EAAe;AACbM,IAAAA,cAAc,GACZ,6BAAC,0BAAD;AAAmB,MAAA,SAAS,EAAC,yBAA7B;AAAuD,MAAA,IAAI,EAAC;AAA5D,MADF;AAGD,GAJD,MAIO,IAAI,OAAOJ,QAAP,KAAoB,QAAxB,EAAkC;AACvCI,IAAAA,cAAc,GACZ,6BAAC,2BAAD;AACE,MAAA,SAAS,EAAC,0BADZ;AAEE,MAAA,IAAI,EAAC,GAFP;AAGE,MAAA,KAAK,EAAE,CAACL,UAAD,IAAeF,UAAf,GAA4B,SAA5B,GAAwC;AAHjD,OAIGG,QAJH,CADF;AAQD,GA7BG,CA+BJ;;;AACA,MAAIK,UAAJ;;AAEA,MAAIT,IAAJ,EAAU;AACRS,IAAAA,UAAU,GAAGC,eAAMC,YAAN,CAAmBX,IAAnB,EAAyB;AACpCD,MAAAA,SAAS,EAAE;AADyB,KAAzB,CAAb;AAGD;;AAED,MAAIa,QAAJ;;AACA,MAAI,OAAOd,QAAP,KAAoB,QAAxB,EAAkC;AAChCc,IAAAA,QAAQ,GAAGd,QAAX;AACD;;AAED,SACE;AACE,IAAA,SAAS,EAAES,OADb;AAEE,IAAA,QAAQ,EAAEN,UAFZ;AAGE,IAAA,IAAI,EAAC,QAHP;AAIE,IAAA,GAAG,EAAEI;AAJP,KAKMC,IALN,GAME;AAAM,IAAA,SAAS,EAAC;AAAhB,KACGG,UADH,EAEE;AAAM,iBAAWG,QAAjB;AAA2B,IAAA,SAAS,EAAC;AAArC,KACGd,QADH,CAFF,EAKGU,cALH,CANF,CADF;AAgBD,CAvEM;;;AAyEPX,cAAc,CAACgB,SAAf,GAA2B;AACzBf,EAAAA,QAAQ,EAAEgB,mBAAUC,IAAV,CAAeC,UADA;AAEzBjB,EAAAA,SAAS,EAAEe,mBAAUG,MAFI;AAGzBhB,EAAAA,UAAU,EAAEa,mBAAUI,IAHG;AAIzBC,EAAAA,OAAO,EAAEL,mBAAUM,IAJM;AAKzBf,EAAAA,SAAS,EAAES,mBAAUM,IALI;;AAOzB;;;AAGApB,EAAAA,IAAI,EAAEc,mBAAUC,IAVS;;AAYzB;;;AAGAb,EAAAA,SAAS,EAAEY,mBAAUI,IAfI;;AAiBzB;;;AAGAf,EAAAA,UAAU,EAAEW,mBAAUI,IApBG;;AAsBzB;;;AAGAd,EAAAA,QAAQ,EAAEU,mBAAUO;AAzBK,CAA3B;AA4BAxB,cAAc,CAACyB,YAAf,GAA8B;AAC5BrB,EAAAA,UAAU,EAAE,KADgB;AAE5BC,EAAAA,SAAS,EAAE,KAFiB;AAG5BC,EAAAA,UAAU,EAAE;AAHgB,CAA9B","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport { EuiNotificationBadge } from '../badge';\n\nimport { EuiLoadingSpinner } from '../loading';\n\nexport const EuiFacetButton = ({\n  children,\n  className,\n  icon,\n  isDisabled,\n  isLoading,\n  isSelected,\n  quantity,\n  buttonRef,\n  ...rest\n}) => {\n  // If in the loading state, force disabled to true\n  isDisabled = isLoading ? true : isDisabled;\n\n  const classes = classNames(\n    'euiFacetButton',\n    {\n      'euiFacetButton--isSelected': isSelected,\n      'euiFacetButton--unSelected': !isSelected,\n    },\n    className\n  );\n\n  // Add quanity number if provided or loading indicator\n  let buttonQuantity;\n\n  if (isLoading) {\n    buttonQuantity = (\n      <EuiLoadingSpinner className=\"euiFacetButton__spinner\" size=\"m\" />\n    );\n  } else if (typeof quantity === 'number') {\n    buttonQuantity = (\n      <EuiNotificationBadge\n        className=\"euiFacetButton__quantity\"\n        size=\"m\"\n        color={!isSelected || isDisabled ? 'subdued' : 'accent'}>\n        {quantity}\n      </EuiNotificationBadge>\n    );\n  }\n\n  // Add an icon to the button if one exists.\n  let buttonIcon;\n\n  if (icon) {\n    buttonIcon = React.cloneElement(icon, {\n      className: 'euiFacetButton__icon',\n    });\n  }\n\n  let dataText;\n  if (typeof children === 'string') {\n    dataText = children;\n  }\n\n  return (\n    <button\n      className={classes}\n      disabled={isDisabled}\n      type=\"button\"\n      ref={buttonRef}\n      {...rest}>\n      <span className=\"euiFacetButton__content\">\n        {buttonIcon}\n        <span data-text={dataText} className=\"euiFacetButton__text\">\n          {children}\n        </span>\n        {buttonQuantity}\n      </span>\n    </button>\n  );\n};\n\nEuiFacetButton.propTypes = {\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string,\n  isDisabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  buttonRef: PropTypes.func,\n\n  /**\n   * Any node, but preferrably a `EuiIcon` or `EuiAvatar`\n   */\n  icon: PropTypes.node,\n\n  /**\n   * Adds/swaps for loading spinner & disables\n   */\n  isLoading: PropTypes.bool,\n\n  /**\n   * Changes visual of button to indicate it's currently selected\n   */\n  isSelected: PropTypes.bool,\n\n  /**\n   * Adds a notification indicator for displaying the quantity provided\n   */\n  quantity: PropTypes.number,\n};\n\nEuiFacetButton.defaultProps = {\n  isDisabled: false,\n  isLoading: false,\n  isSelected: false,\n};\n"]}]}