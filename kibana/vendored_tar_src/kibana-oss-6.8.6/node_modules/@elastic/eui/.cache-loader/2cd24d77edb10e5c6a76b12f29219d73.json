{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/services/color/color_palette.ts","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/services/color/color_palette.ts","mtime":1565204170062},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.colorPalette = colorPalette;\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nvar _hex_to_rgb = require(\"./hex_to_rgb\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Create the color object for manipulation by other functions\n */\nvar Color = function Color(r, g, b) {\n  _classCallCheck(this, Color);\n\n  this.r = r;\n  this.g = g;\n  this.b = b;\n\n  _defineProperty(this, \"collection\", void 0);\n\n  _defineProperty(this, \"text\", void 0);\n\n  this.collection = [r, g, b];\n  this.text = createHex(this.collection);\n};\n/**\n * This function takes a color palette name and returns an array of hex color\n * codes for use in UI elements such as charts.\n *\n * @param {string} hexStart The beginning hexadecimal color code\n * @param {string} hexEnd The ending hexadecimal color code\n * @param {number} len The number of colors in the resulting array (default 10)\n * @returns {Array} Returns an array of hexadecimal color codes\n */\n\n\nfunction colorPalette(hexStart, hexEnd) {\n  var len = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n\n  if (isHex(hexStart) && isHex(hexEnd)) {\n    var colorArray = [];\n    var hexPalette = [];\n    var count = len - 1;\n    var startHex = (0, _hex_to_rgb.hexToRgb)(hexStart); // get RGB equivalent values as array\n\n    var endHex = (0, _hex_to_rgb.hexToRgb)(hexEnd); // get RGB equivalent values as array\n\n    colorArray[0] = new Color(startHex[0], startHex[1], startHex[2]); // create first color obj\n\n    colorArray[count] = new Color(endHex[0], endHex[1], endHex[2]); // create last color obj\n\n    var step = stepCalc(count, colorArray[0], colorArray[count]); // create array of step increments\n    // build the color palette array\n\n    hexPalette[0] = colorArray[0].text; // set the first color in the array\n\n    for (var i = 1; i < count; i++) {\n      // set the intermediate colors in the array\n      var _r = colorArray[0].r + step[0] * i;\n\n      var _g = colorArray[0].g + step[1] * i;\n\n      var _b = colorArray[0].b + step[2] * i;\n\n      colorArray[i] = new Color(_r, _g, _b);\n      hexPalette[i] = colorArray[i].text;\n    } // all the colors in between\n\n\n    hexPalette[count] = colorArray[count].text; // set the last color in the array\n\n    return hexPalette;\n  } else {\n    throw new Error('Please provide two valid hex color codes.');\n  }\n}\n/**\n * Check if argument is a valid 3 or 6 character hexadecimal color code\n */\n\n\nfunction isHex(value) {\n  return /^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(value);\n}\n/**\n * Calculate and construct the hexadecimal color code from RGB values\n */\n\n\nfunction createHex(rgbValues) {\n  var result = '';\n  var val = 0;\n  var piece;\n  var base = 16;\n\n  for (var k = 0; k < 3; k++) {\n    val = Math.round(rgbValues[k]);\n    piece = val.toString(base); // Converts to radix 16 based value (0-9, A-F)\n\n    if (piece.length < 2) {\n      piece = \"0\".concat(piece);\n    }\n\n    result = result + piece;\n  }\n\n  result = \"#\".concat(result.toUpperCase()); // Return in #RRGGBB format\n\n  return result;\n}\n/**\n * Calculate the step increment for each piece of the hexadecimal color code\n */\n\n\nfunction stepCalc(st, cStart, cEnd) {\n  var steps = st;\n  var step = [(cEnd.r - cStart.r) / steps, // Calc step amount for red value\n  (cEnd.g - cStart.g) / steps, // Calc step amount for green value\n  (cEnd.b - cStart.b) / steps];\n  return step;\n}",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/services/color/color_palette.ts"],"names":["Color","r","g","b","collection","text","createHex","colorPalette","hexStart","hexEnd","len","isHex","colorArray","hexPalette","count","startHex","endHex","step","stepCalc","i","Error","value","test","rgbValues","result","val","piece","base","k","Math","round","toString","length","toUpperCase","st","cStart","cEnd","steps"],"mappings":";;;;;;;;;AACA;;;;;;AAEA;;;IAGMA,K,GAIJ,eAAmBC,CAAnB,EAAqCC,CAArC,EAAuDC,CAAvD,EAAkE;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAChE,OAAKC,UAAL,GAAkB,CAACH,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAlB;AACA,OAAKE,IAAL,GAAYC,SAAS,CAAC,KAAKF,UAAN,CAArB;AACD,C;AAGH;;;;;;;;;;;AAUO,SAASG,YAAT,CACLC,QADK,EAELC,MAFK,EAIL;AAAA,MADAC,GACA,uEADc,EACd;;AACA,MAAIC,KAAK,CAACH,QAAD,CAAL,IAAmBG,KAAK,CAACF,MAAD,CAA5B,EAAsC;AACpC,QAAMG,UAAmB,GAAG,EAA5B;AACA,QAAMC,UAAoB,GAAG,EAA7B;AACA,QAAMC,KAAK,GAAGJ,GAAG,GAAG,CAApB;AACA,QAAMK,QAAQ,GAAG,0BAASP,QAAT,CAAjB,CAJoC,CAIC;;AACrC,QAAMQ,MAAM,GAAG,0BAASP,MAAT,CAAf,CALoC,CAKH;;AACjCG,IAAAA,UAAU,CAAC,CAAD,CAAV,GAAgB,IAAIZ,KAAJ,CAAUe,QAAQ,CAAC,CAAD,CAAlB,EAAuBA,QAAQ,CAAC,CAAD,CAA/B,EAAoCA,QAAQ,CAAC,CAAD,CAA5C,CAAhB,CANoC,CAM8B;;AAClEH,IAAAA,UAAU,CAACE,KAAD,CAAV,GAAoB,IAAId,KAAJ,CAAUgB,MAAM,CAAC,CAAD,CAAhB,EAAqBA,MAAM,CAAC,CAAD,CAA3B,EAAgCA,MAAM,CAAC,CAAD,CAAtC,CAApB,CAPoC,CAO4B;;AAChE,QAAMC,IAAI,GAAGC,QAAQ,CAACJ,KAAD,EAAQF,UAAU,CAAC,CAAD,CAAlB,EAAuBA,UAAU,CAACE,KAAD,CAAjC,CAArB,CARoC,CAQ4B;AAChE;;AACAD,IAAAA,UAAU,CAAC,CAAD,CAAV,GAAgBD,UAAU,CAAC,CAAD,CAAV,CAAcP,IAA9B,CAVoC,CAUA;;AACpC,SAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAApB,EAA2BK,CAAC,EAA5B,EAAgC;AAC9B;AACA,UAAMlB,EAAC,GAAGW,UAAU,CAAC,CAAD,CAAV,CAAcX,CAAd,GAAkBgB,IAAI,CAAC,CAAD,CAAJ,GAAUE,CAAtC;;AACA,UAAMjB,EAAC,GAAGU,UAAU,CAAC,CAAD,CAAV,CAAcV,CAAd,GAAkBe,IAAI,CAAC,CAAD,CAAJ,GAAUE,CAAtC;;AACA,UAAMhB,EAAC,GAAGS,UAAU,CAAC,CAAD,CAAV,CAAcT,CAAd,GAAkBc,IAAI,CAAC,CAAD,CAAJ,GAAUE,CAAtC;;AACAP,MAAAA,UAAU,CAACO,CAAD,CAAV,GAAgB,IAAInB,KAAJ,CAAUC,EAAV,EAAaC,EAAb,EAAgBC,EAAhB,CAAhB;AACAU,MAAAA,UAAU,CAACM,CAAD,CAAV,GAAgBP,UAAU,CAACO,CAAD,CAAV,CAAcd,IAA9B;AACD,KAlBmC,CAkBlC;;;AACFQ,IAAAA,UAAU,CAACC,KAAD,CAAV,GAAoBF,UAAU,CAACE,KAAD,CAAV,CAAkBT,IAAtC,CAnBoC,CAmBQ;;AAE5C,WAAOQ,UAAP;AACD,GAtBD,MAsBO;AACL,UAAM,IAAIO,KAAJ,CAAU,2CAAV,CAAN;AACD;AACF;AAED;;;;;AAGA,SAAST,KAAT,CAAeU,KAAf,EAAuC;AACrC,SAAO,sCAAsCC,IAAtC,CAA2CD,KAA3C,CAAP;AACD;AAED;;;;;AAGA,SAASf,SAAT,CAAmBiB,SAAnB,EAA8C;AAC5C,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,KAAJ;AACA,MAAMC,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BH,IAAAA,GAAG,GAAGI,IAAI,CAACC,KAAL,CAAWP,SAAS,CAACK,CAAD,CAApB,CAAN;AACAF,IAAAA,KAAK,GAAGD,GAAG,CAACM,QAAJ,CAAaJ,IAAb,CAAR,CAF0B,CAEE;;AAC5B,QAAID,KAAK,CAACM,MAAN,GAAe,CAAnB,EAAsB;AACpBN,MAAAA,KAAK,cAAOA,KAAP,CAAL;AACD;;AACDF,IAAAA,MAAM,GAAGA,MAAM,GAAGE,KAAlB;AACD;;AACDF,EAAAA,MAAM,cAAOA,MAAM,CAACS,WAAP,EAAP,CAAN,CAb4C,CAaP;;AACrC,SAAOT,MAAP;AACD;AAED;;;;;AAGA,SAASN,QAAT,CAAkBgB,EAAlB,EAA8BC,MAA9B,EAA6CC,IAA7C,EAAkE;AAChE,MAAMC,KAAK,GAAGH,EAAd;AACA,MAAMjB,IAAY,GAAG,CACnB,CAACmB,IAAI,CAACnC,CAAL,GAASkC,MAAM,CAAClC,CAAjB,IAAsBoC,KADH,EACU;AAC7B,GAACD,IAAI,CAAClC,CAAL,GAASiC,MAAM,CAACjC,CAAjB,IAAsBmC,KAFH,EAEU;AAC7B,GAACD,IAAI,CAACjC,CAAL,GAASgC,MAAM,CAAChC,CAAjB,IAAsBkC,KAHH,CAArB;AAMA,SAAOpB,IAAP;AACD","sourcesContent":["import { rgbDef } from './color_types';\nimport { hexToRgb } from './hex_to_rgb';\n\n/**\n * Create the color object for manipulation by other functions\n */\nclass Color {\n  collection: rgbDef;\n  text: string;\n\n  constructor(public r: number, public g: number, public b: number) {\n    this.collection = [r, g, b];\n    this.text = createHex(this.collection);\n  }\n}\n\n/**\n * This function takes a color palette name and returns an array of hex color\n * codes for use in UI elements such as charts.\n *\n * @param {string} hexStart The beginning hexadecimal color code\n * @param {string} hexEnd The ending hexadecimal color code\n * @param {number} len The number of colors in the resulting array (default 10)\n * @returns {Array} Returns an array of hexadecimal color codes\n */\n\nexport function colorPalette(\n  hexStart: string,\n  hexEnd: string,\n  len: number = 10\n) {\n  if (isHex(hexStart) && isHex(hexEnd)) {\n    const colorArray: Color[] = [];\n    const hexPalette: string[] = [];\n    const count = len - 1;\n    const startHex = hexToRgb(hexStart); // get RGB equivalent values as array\n    const endHex = hexToRgb(hexEnd); // get RGB equivalent values as array\n    colorArray[0] = new Color(startHex[0], startHex[1], startHex[2]); // create first color obj\n    colorArray[count] = new Color(endHex[0], endHex[1], endHex[2]); // create last color obj\n    const step = stepCalc(count, colorArray[0], colorArray[count]); // create array of step increments\n    // build the color palette array\n    hexPalette[0] = colorArray[0].text; // set the first color in the array\n    for (let i = 1; i < count; i++) {\n      // set the intermediate colors in the array\n      const r = colorArray[0].r + step[0] * i;\n      const g = colorArray[0].g + step[1] * i;\n      const b = colorArray[0].b + step[2] * i;\n      colorArray[i] = new Color(r, g, b);\n      hexPalette[i] = colorArray[i].text;\n    } // all the colors in between\n    hexPalette[count] = colorArray[count].text; // set the last color in the array\n\n    return hexPalette;\n  } else {\n    throw new Error('Please provide two valid hex color codes.');\n  }\n}\n\n/**\n * Check if argument is a valid 3 or 6 character hexadecimal color code\n */\nfunction isHex(value: string): boolean {\n  return /^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(value);\n}\n\n/**\n * Calculate and construct the hexadecimal color code from RGB values\n */\nfunction createHex(rgbValues: rgbDef): string {\n  let result = '';\n  let val = 0;\n  let piece;\n  const base = 16;\n  for (let k = 0; k < 3; k++) {\n    val = Math.round(rgbValues[k]);\n    piece = val.toString(base); // Converts to radix 16 based value (0-9, A-F)\n    if (piece.length < 2) {\n      piece = `0${piece}`;\n    }\n    result = result + piece;\n  }\n  result = `#${result.toUpperCase()}`; // Return in #RRGGBB format\n  return result;\n}\n\n/**\n * Calculate the step increment for each piece of the hexadecimal color code\n */\nfunction stepCalc(st: number, cStart: Color, cEnd: Color): rgbDef {\n  const steps = st;\n  const step: rgbDef = [\n    (cEnd.r - cStart.r) / steps, // Calc step amount for red value\n    (cEnd.g - cStart.g) / steps, // Calc step amount for green value\n    (cEnd.b - cStart.b) / steps, // Calc step amount for blue value\n  ];\n\n  return step;\n}\n"]}]}