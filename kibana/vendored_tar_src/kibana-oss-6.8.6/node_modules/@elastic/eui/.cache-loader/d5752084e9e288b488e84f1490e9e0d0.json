{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/side_nav/side_nav.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/side_nav/side_nav.js","mtime":1565204170003},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EuiSideNav = void 0;\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/es6.object.assign\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.object.set-prototype-of\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _icon = require(\"../icon\");\n\nvar _side_nav_item = require(\"./side_nav_item\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar EuiSideNav =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EuiSideNav, _Component);\n\n  function EuiSideNav() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EuiSideNav);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EuiSideNav)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"isItemOpen\", function (item) {\n      // The developer can force the item to be open.\n      if (item.forceOpen) {\n        return true;\n      } // Of course a selected item is open.\n\n\n      if (item.isSelected) {\n        return true;\n      } // The item has to be open if it has a child that's open.\n\n\n      if (item.items) {\n        return item.items.some(_this.isItemOpen);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"renderTree\", function (items) {\n      var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var renderItem = _this.props.renderItem;\n      return items.map(function (item) {\n        var id = item.id,\n            name = item.name,\n            isSelected = item.isSelected,\n            childItems = item.items,\n            icon = item.icon,\n            onClick = item.onClick,\n            href = item.href,\n            forceOpen = item.forceOpen,\n            rest = _objectWithoutProperties(item, [\"id\", \"name\", \"isSelected\", \"items\", \"icon\", \"onClick\", \"href\", \"forceOpen\"]); // Root items are always open.\n\n\n        var isOpen = depth === 0 ? true : _this.isItemOpen(item);\n        var renderedItems;\n\n        if (childItems) {\n          renderedItems = _this.renderTree(childItems, depth + 1);\n        }\n\n        return _react.default.createElement(_side_nav_item.EuiSideNavItem, _extends({\n          isOpen: isOpen,\n          isSelected: isSelected,\n          isParent: !!childItems,\n          icon: icon,\n          onClick: onClick,\n          href: href,\n          items: renderedItems,\n          key: id,\n          depth: depth,\n          renderItem: renderItem\n        }, rest), name);\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(EuiSideNav, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          items = _this$props.items,\n          toggleOpenOnMobile = _this$props.toggleOpenOnMobile,\n          isOpenOnMobile = _this$props.isOpenOnMobile,\n          mobileTitle = _this$props.mobileTitle,\n          renderItem = _this$props.renderItem,\n          rest = _objectWithoutProperties(_this$props, [\"className\", \"items\", \"toggleOpenOnMobile\", \"isOpenOnMobile\", \"mobileTitle\", \"renderItem\"]);\n\n      var classes = (0, _classnames.default)('euiSideNav', className, {\n        'euiSideNav-isOpenMobile': isOpenOnMobile\n      });\n      var nav = this.renderTree(items);\n      return _react.default.createElement(\"nav\", _extends({\n        className: classes\n      }, rest), _react.default.createElement(\"button\", {\n        type: \"button\",\n        className: \"euiSideNav__mobileToggle euiLink\",\n        onClick: toggleOpenOnMobile\n      }, _react.default.createElement(\"span\", {\n        className: \"euiSideNav__mobileWrap\"\n      }, _react.default.createElement(\"span\", {\n        className: \"euiSideNav__mobileTitle\"\n      }, mobileTitle), _react.default.createElement(_icon.EuiIcon, {\n        className: \"euiSideNav__mobileIcon\",\n        type: \"apps\",\n        size: \"m\",\n        \"aria-hidden\": \"true\"\n      }))), _react.default.createElement(\"div\", {\n        className: \"euiSideNav__content\",\n        role: \"menubar\"\n      }, nav));\n    }\n  }]);\n\n  return EuiSideNav;\n}(_react.Component);\n\nexports.EuiSideNav = EuiSideNav;\nEuiSideNav.propTypes = {\n  /**\n   * `children` are not rendered. Use `items` to specify navigation items instead.\n   */\n  children: _propTypes.default.node,\n\n  /**\n   * Class names to be merged into the final `className` property.\n   */\n  className: _propTypes.default.string,\n\n  /**\n   * When called, toggles visibility of the navigation menu at mobile responsive widths. The callback should set the `isOpenOnMobile` prop to actually toggle navigation visibility.\n   */\n  toggleOpenOnMobile: _propTypes.default.func,\n\n  /**\n   * If `true`, the navigation menu will be open at mobile device widths. Use in conjunction with the `toggleOpenOnMobile` prop.\n   */\n  isOpenOnMobile: _propTypes.default.bool,\n\n  /**\n   * A React node to render at mobile responsive widths, representing the title of this navigation menu.\n   */\n  mobileTitle: _propTypes.default.node,\n\n  /**\n   * `items` is an array of objects (navigation menu `item`s).\n   * Each `item` may contain the following properties (this is an incomplete list):\n   * `item.id` is a required value that is passed to React as the `key` for this item\n   * `item.forceOpen` is an optional boolean; if set to true it will force the item to display in an \"open\" state at all times.\n   * `item.href` is an optional string to be passed as the navigation item's `href` prop, and by default it will force rendering of the item as an `<a>`.\n   * `item.icon` is an optional React node which will be rendered as a small icon to the left of the navigation item text.\n   * `item.isSelected` is an optional boolean; if set to true it will render the item in a visible \"selected\" state, and will force all ancestor navigation items to render in an \"open\" state.\n   * `item.items` is an optional array containing additional item objects, representing nested children of this navigation item.\n   * `item.name` is a required React node representing the text to render for this item (usually a string will suffice).\n   * `item.onClick` is an optional callback function to be passed as the navigation item's `onClick` prop, and by default it will force rendering of the item as a `<button>` instead of a link.\n   * `item.renderItem` is an optional function overriding default rendering for this navigation item — when called, it should return a React node representing a replacement navigation item.\n   */\n  items: _propTypes.default.arrayOf(_propTypes.default.shape({\n    id: _propTypes.default.oneOfType([_propTypes.default.string.isRequired, _propTypes.default.number.isRequired]).isRequired\n  }).isRequired),\n\n  /**\n   * Overrides default navigation menu item rendering. When called, it should return a React node representing a replacement navigation item.\n   */\n  renderItem: _propTypes.default.func\n};\nEuiSideNav.defaultProps = {\n  items: []\n};\nEuiSideNav.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [{\n    \"name\": \"isItemOpen\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"item\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"renderTree\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"items\",\n      \"type\": null\n    }, {\n      \"name\": \"depth\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }],\n  \"displayName\": \"EuiSideNav\",\n  \"props\": {\n    \"items\": {\n      \"defaultValue\": {\n        \"value\": \"[]\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"arrayOf\",\n        \"value\": {\n          \"name\": \"shape\",\n          \"value\": {\n            \"id\": {\n              \"name\": \"union\",\n              \"value\": [{\n                \"name\": \"string\"\n              }, {\n                \"name\": \"number\"\n              }],\n              \"required\": true\n            }\n          }\n        }\n      },\n      \"required\": false,\n      \"description\": \"`items` is an array of objects (navigation menu `item`s).\\nEach `item` may contain the following properties (this is an incomplete list):\\n`item.id` is a required value that is passed to React as the `key` for this item\\n`item.forceOpen` is an optional boolean; if set to true it will force the item to display in an \\\"open\\\" state at all times.\\n`item.href` is an optional string to be passed as the navigation item's `href` prop, and by default it will force rendering of the item as an `<a>`.\\n`item.icon` is an optional React node which will be rendered as a small icon to the left of the navigation item text.\\n`item.isSelected` is an optional boolean; if set to true it will render the item in a visible \\\"selected\\\" state, and will force all ancestor navigation items to render in an \\\"open\\\" state.\\n`item.items` is an optional array containing additional item objects, representing nested children of this navigation item.\\n`item.name` is a required React node representing the text to render for this item (usually a string will suffice).\\n`item.onClick` is an optional callback function to be passed as the navigation item's `onClick` prop, and by default it will force rendering of the item as a `<button>` instead of a link.\\n`item.renderItem` is an optional function overriding default rendering for this navigation item \\u2014 when called, it should return a React node representing a replacement navigation item.\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"`children` are not rendered. Use `items` to specify navigation items instead.\"\n    },\n    \"className\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Class names to be merged into the final `className` property.\"\n    },\n    \"toggleOpenOnMobile\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"When called, toggles visibility of the navigation menu at mobile responsive widths. The callback should set the `isOpenOnMobile` prop to actually toggle navigation visibility.\"\n    },\n    \"isOpenOnMobile\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"If `true`, the navigation menu will be open at mobile device widths. Use in conjunction with the `toggleOpenOnMobile` prop.\"\n    },\n    \"mobileTitle\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"A React node to render at mobile responsive widths, representing the title of this navigation menu.\"\n    },\n    \"renderItem\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"Overrides default navigation menu item rendering. When called, it should return a React node representing a replacement navigation item.\"\n    }\n  }\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/side_nav/side_nav.js"],"names":["EuiSideNav","item","forceOpen","isSelected","items","some","isItemOpen","depth","renderItem","props","map","id","name","childItems","icon","onClick","href","rest","isOpen","renderedItems","renderTree","className","toggleOpenOnMobile","isOpenOnMobile","mobileTitle","classes","nav","Component","propTypes","children","PropTypes","node","string","func","bool","arrayOf","shape","oneOfType","isRequired","number","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport { EuiIcon } from '../icon';\n\nimport { EuiSideNavItem } from './side_nav_item';\n\nexport class EuiSideNav extends Component {\n  isItemOpen = item => {\n    // The developer can force the item to be open.\n    if (item.forceOpen) {\n      return true;\n    }\n\n    // Of course a selected item is open.\n    if (item.isSelected) {\n      return true;\n    }\n\n    // The item has to be open if it has a child that's open.\n    if (item.items) {\n      return item.items.some(this.isItemOpen);\n    }\n  };\n\n  renderTree = (items, depth = 0) => {\n    const { renderItem } = this.props;\n\n    return items.map(item => {\n      const {\n        id,\n        name,\n        isSelected,\n        items: childItems,\n        icon,\n        onClick,\n        href,\n        forceOpen,\n        ...rest\n      } = item;\n\n      // Root items are always open.\n      const isOpen = depth === 0 ? true : this.isItemOpen(item);\n\n      let renderedItems;\n\n      if (childItems) {\n        renderedItems = this.renderTree(childItems, depth + 1);\n      }\n\n      return (\n        <EuiSideNavItem\n          isOpen={isOpen}\n          isSelected={isSelected}\n          isParent={!!childItems}\n          icon={icon}\n          onClick={onClick}\n          href={href}\n          items={renderedItems}\n          key={id}\n          depth={depth}\n          renderItem={renderItem}\n          {...rest}>\n          {name}\n        </EuiSideNavItem>\n      );\n    });\n  };\n\n  render() {\n    const {\n      className,\n      items,\n      toggleOpenOnMobile,\n      isOpenOnMobile,\n      mobileTitle,\n      // Extract this one out so it isn't passed to <nav>\n      renderItem,\n      ...rest\n    } = this.props;\n\n    const classes = classNames('euiSideNav', className, {\n      'euiSideNav-isOpenMobile': isOpenOnMobile,\n    });\n\n    const nav = this.renderTree(items);\n\n    return (\n      <nav className={classes} {...rest}>\n        {/* Hidden from view, except in mobile */}\n        <button\n          type=\"button\"\n          className=\"euiSideNav__mobileToggle euiLink\"\n          onClick={toggleOpenOnMobile}>\n          <span className=\"euiSideNav__mobileWrap\">\n            <span className=\"euiSideNav__mobileTitle\">{mobileTitle}</span>\n\n            <EuiIcon\n              className=\"euiSideNav__mobileIcon\"\n              type=\"apps\"\n              size=\"m\"\n              aria-hidden=\"true\"\n            />\n          </span>\n        </button>\n\n        {/* Hidden from view in mobile, but toggled from the button above */}\n        <div className=\"euiSideNav__content\" role=\"menubar\">\n          {nav}\n        </div>\n      </nav>\n    );\n  }\n}\n\nEuiSideNav.propTypes = {\n  /**\n   * `children` are not rendered. Use `items` to specify navigation items instead.\n   */\n  children: PropTypes.node,\n  /**\n   * Class names to be merged into the final `className` property.\n   */\n  className: PropTypes.string,\n  /**\n   * When called, toggles visibility of the navigation menu at mobile responsive widths. The callback should set the `isOpenOnMobile` prop to actually toggle navigation visibility.\n   */\n  toggleOpenOnMobile: PropTypes.func,\n  /**\n   * If `true`, the navigation menu will be open at mobile device widths. Use in conjunction with the `toggleOpenOnMobile` prop.\n   */\n  isOpenOnMobile: PropTypes.bool,\n  /**\n   * A React node to render at mobile responsive widths, representing the title of this navigation menu.\n   */\n  mobileTitle: PropTypes.node,\n  /**\n   * `items` is an array of objects (navigation menu `item`s).\n   * Each `item` may contain the following properties (this is an incomplete list):\n   * `item.id` is a required value that is passed to React as the `key` for this item\n   * `item.forceOpen` is an optional boolean; if set to true it will force the item to display in an \"open\" state at all times.\n   * `item.href` is an optional string to be passed as the navigation item's `href` prop, and by default it will force rendering of the item as an `<a>`.\n   * `item.icon` is an optional React node which will be rendered as a small icon to the left of the navigation item text.\n   * `item.isSelected` is an optional boolean; if set to true it will render the item in a visible \"selected\" state, and will force all ancestor navigation items to render in an \"open\" state.\n   * `item.items` is an optional array containing additional item objects, representing nested children of this navigation item.\n   * `item.name` is a required React node representing the text to render for this item (usually a string will suffice).\n   * `item.onClick` is an optional callback function to be passed as the navigation item's `onClick` prop, and by default it will force rendering of the item as a `<button>` instead of a link.\n   * `item.renderItem` is an optional function overriding default rendering for this navigation item — when called, it should return a React node representing a replacement navigation item.\n   */\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.oneOfType([\n        PropTypes.string.isRequired,\n        PropTypes.number.isRequired,\n      ]).isRequired,\n    }).isRequired\n  ),\n  /**\n   * Overrides default navigation menu item rendering. When called, it should return a React node representing a replacement navigation item.\n   */\n  renderItem: PropTypes.func,\n};\n\nEuiSideNav.defaultProps = {\n  items: [],\n};\n"]}]}