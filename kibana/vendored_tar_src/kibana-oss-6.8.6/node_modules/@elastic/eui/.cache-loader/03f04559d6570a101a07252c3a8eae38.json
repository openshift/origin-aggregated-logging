{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/date_picker/super_date_picker/relative_utils.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/date_picker/super_date_picker/relative_utils.js","mtime":1565204169671},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseRelativeParts = parseRelativeParts;\nexports.toRelativeStringFromParts = toRelativeStringFromParts;\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nvar _datemath = _interopRequireDefault(require(\"@elastic/datemath\"));\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _objects = require(\"../../../services/objects\");\n\nvar _predicate = require(\"../../../services/predicate\");\n\nvar _relative_options = require(\"./relative_options\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ROUND_DELIMETER = '/';\n\nfunction parseRelativeParts(value) {\n  var matches = (0, _predicate.isString)(value) && value.match(/now(([\\-\\+])([0-9]+)([smhdwMy])(\\/[smhdwMy])?)?/);\n  var isNow = matches && !matches[1];\n  var operator = matches && matches[2];\n  var count = matches && matches[3];\n  var unit = matches && matches[4];\n  var roundBy = matches && matches[5];\n\n  if (isNow) {\n    return {\n      count: 0,\n      unit: 's',\n      round: false\n    };\n  }\n\n  if (count && unit) {\n    var isRounded = roundBy ? true : false;\n    return {\n      count: parseInt(count, 10),\n      unit: operator === '+' ? \"\".concat(unit, \"+\") : unit,\n      round: isRounded,\n      roundUnit: isRounded ? roundBy.replace(ROUND_DELIMETER, '') : undefined\n    };\n  }\n\n  var results = {\n    count: 0,\n    unit: 's',\n    round: false\n  };\n\n  var duration = _moment.default.duration((0, _moment.default)().diff(_datemath.default.parse(value)));\n\n  var unitOp = '';\n\n  for (var i = 0; i < _relative_options.relativeUnitsFromLargestToSmallest.length; i++) {\n    var as = duration.as(_relative_options.relativeUnitsFromLargestToSmallest[i]);\n    if (as < 0) unitOp = '+';\n\n    if (Math.abs(as) > 1) {\n      results.count = Math.round(Math.abs(as));\n      results.unit = _relative_options.relativeUnitsFromLargestToSmallest[i] + unitOp;\n      results.round = false;\n      break;\n    }\n  }\n\n  return results;\n}\n\nfunction toRelativeStringFromParts(relativeParts) {\n  var count = (0, _objects.get)(relativeParts, 'count', 0);\n  var isRounded = (0, _objects.get)(relativeParts, 'round', false);\n\n  if (count === 0 && !isRounded) {\n    return 'now';\n  }\n\n  var matches = (0, _objects.get)(relativeParts, 'unit', 's').match(/([smhdwMy])(\\+)?/);\n  var unit = matches[1];\n  var operator = matches && matches[2] ? matches[2] : '-';\n  var round = isRounded ? \"\".concat(ROUND_DELIMETER).concat(unit) : '';\n  return \"now\".concat(operator).concat(count).concat(unit).concat(round);\n}",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/date_picker/super_date_picker/relative_utils.js"],"names":["ROUND_DELIMETER","parseRelativeParts","value","matches","match","isNow","operator","count","unit","roundBy","round","isRounded","parseInt","roundUnit","replace","undefined","results","duration","moment","diff","dateMath","parse","unitOp","i","relativeUnitsFromLargestToSmallest","length","as","Math","abs","toRelativeStringFromParts","relativeParts"],"mappings":"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","sourcesContent":["import dateMath from '@elastic/datemath';\nimport moment from 'moment';\n\nimport { get } from '../../../services/objects';\nimport { isString } from '../../../services/predicate';\nimport { relativeUnitsFromLargestToSmallest } from './relative_options';\n\nconst ROUND_DELIMETER = '/';\n\nexport function parseRelativeParts(value) {\n  const matches =\n    isString(value) &&\n    value.match(/now(([\\-\\+])([0-9]+)([smhdwMy])(\\/[smhdwMy])?)?/);\n\n  const isNow = matches && !matches[1];\n  const operator = matches && matches[2];\n  const count = matches && matches[3];\n  const unit = matches && matches[4];\n  const roundBy = matches && matches[5];\n\n  if (isNow) {\n    return { count: 0, unit: 's', round: false };\n  }\n\n  if (count && unit) {\n    const isRounded = roundBy ? true : false;\n    return {\n      count: parseInt(count, 10),\n      unit: operator === '+' ? `${unit}+` : unit,\n      round: isRounded,\n      roundUnit: isRounded ? roundBy.replace(ROUND_DELIMETER, '') : undefined,\n    };\n  }\n\n  const results = { count: 0, unit: 's', round: false };\n  const duration = moment.duration(moment().diff(dateMath.parse(value)));\n  let unitOp = '';\n  for (let i = 0; i < relativeUnitsFromLargestToSmallest.length; i++) {\n    const as = duration.as(relativeUnitsFromLargestToSmallest[i]);\n    if (as < 0) unitOp = '+';\n    if (Math.abs(as) > 1) {\n      results.count = Math.round(Math.abs(as));\n      results.unit = relativeUnitsFromLargestToSmallest[i] + unitOp;\n      results.round = false;\n      break;\n    }\n  }\n  return results;\n}\n\nexport function toRelativeStringFromParts(relativeParts) {\n  const count = get(relativeParts, 'count', 0);\n  const isRounded = get(relativeParts, 'round', false);\n\n  if (count === 0 && !isRounded) {\n    return 'now';\n  }\n\n  const matches = get(relativeParts, 'unit', 's').match(/([smhdwMy])(\\+)?/);\n  const unit = matches[1];\n  const operator = matches && matches[2] ? matches[2] : '-';\n  const round = isRounded ? `${ROUND_DELIMETER}${unit}` : '';\n\n  return `now${operator}${count}${unit}${round}`;\n}\n"]}]}