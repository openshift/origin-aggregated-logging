{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/table/table_row.tsx","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/table/table_row.tsx","mtime":1567626462191},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EuiTableRow = void 0;\n\nrequire(\"core-js/modules/es6.object.assign\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nvar EuiTableRow = function EuiTableRow(_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      isSelected = _ref.isSelected,\n      isSelectable = _ref.isSelectable,\n      hasActions = _ref.hasActions,\n      isExpandedRow = _ref.isExpandedRow,\n      isExpandable = _ref.isExpandable,\n      onClick = _ref.onClick,\n      rest = _objectWithoutProperties(_ref, [\"children\", \"className\", \"isSelected\", \"isSelectable\", \"hasActions\", \"isExpandedRow\", \"isExpandable\", \"onClick\"]);\n\n  var classes = (0, _classnames.default)('euiTableRow', className, {\n    'euiTableRow-isSelectable': isSelectable,\n    'euiTableRow-isSelected': isSelected,\n    'euiTableRow-hasActions': hasActions,\n    'euiTableRow-isExpandedRow': isExpandedRow,\n    'euiTableRow-isExpandable': isExpandable,\n    'euiTableRow-isClickable': onClick\n  });\n  return _react.default.createElement(\"tr\", _extends({\n    className: classes,\n    onClick: onClick\n  }, rest), children);\n};\n\nexports.EuiTableRow = EuiTableRow;\nEuiTableRow.propTypes = {\n  className: _propTypes.default.string,\n  \"aria-label\": _propTypes.default.string,\n  \"data-test-subj\": _propTypes.default.string,\n\n  /**\n     * Indicates if the table has a single column of checkboxes for selecting\n     * rows (affects mobile only)\n     */\n  isSelectable: _propTypes.default.bool,\n\n  /**\n     * Indicates the current row has been selected\n     */\n  isSelected: _propTypes.default.bool,\n\n  /**\n     * Indicates if the table has a dedicated column for icon-only actions\n     * (affects mobile only)\n     */\n  hasActions: _propTypes.default.bool,\n\n  /**\n     * Indicates if the row will have an expanded row\n     */\n  isExpandable: _propTypes.default.bool,\n\n  /**\n     * Indicates if the row will be the expanded row\n     */\n  isExpandedRow: _propTypes.default.bool\n};\nEuiTableRow.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"EuiTableRow\",\n  \"props\": {\n    \"className\": {\n      \"type\": {\n        \"name\": \"custom\",\n        \"raw\": \"_propTypes.default.string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"aria-label\": {\n      \"type\": {\n        \"name\": \"custom\",\n        \"raw\": \"_propTypes.default.string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"data-test-subj\": {\n      \"type\": {\n        \"name\": \"custom\",\n        \"raw\": \"_propTypes.default.string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"isSelectable\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Indicates if the table has a single column of checkboxes for selecting\\nrows (affects mobile only)\"\n    },\n    \"isSelected\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Indicates the current row has been selected\"\n    },\n    \"hasActions\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Indicates if the table has a dedicated column for icon-only actions\\n(affects mobile only)\"\n    },\n    \"isExpandable\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Indicates if the row will have an expanded row\"\n    },\n    \"isExpandedRow\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Indicates if the row will be the expanded row\"\n    }\n  }\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/table/table_row.tsx"],"names":["EuiTableRow","children","className","isSelected","isSelectable","hasActions","isExpandedRow","isExpandable","onClick","rest","classes"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;;;;;AAgCO,IAAMA,WAAqC,GAAG,SAAxCA,WAAwC,OAU/C;AAAA,MATJC,QASI,QATJA,QASI;AAAA,MARJC,SAQI,QARJA,SAQI;AAAA,MAPJC,UAOI,QAPJA,UAOI;AAAA,MANJC,YAMI,QANJA,YAMI;AAAA,MALJC,UAKI,QALJA,UAKI;AAAA,MAJJC,aAII,QAJJA,aAII;AAAA,MAHJC,YAGI,QAHJA,YAGI;AAAA,MAFJC,OAEI,QAFJA,OAEI;AAAA,MADDC,IACC;;AACJ,MAAMC,OAAO,GAAG,yBAAW,aAAX,EAA0BR,SAA1B,EAAqC;AACnD,gCAA4BE,YADuB;AAEnD,8BAA0BD,UAFyB;AAGnD,8BAA0BE,UAHyB;AAInD,iCAA6BC,aAJsB;AAKnD,gCAA4BC,YALuB;AAMnD,+BAA2BC;AANwB,GAArC,CAAhB;AASA,SACE;AAAI,IAAA,SAAS,EAAEE,OAAf;AAAwB,IAAA,OAAO,EAAEF;AAAjC,KAA8CC,IAA9C,GACGR,QADH,CADF;AAKD,CAzBM","sourcesContent":["import React from 'react';\nimport PropTypes from \"prop-types\";\nimport classNames from 'classnames';\nexport var EuiTableRow = ({\n  children,\n  className,\n  isSelected,\n  isSelectable,\n  hasActions,\n  isExpandedRow,\n  isExpandable,\n  onClick,\n  ...rest\n}) => {\n  const classes = classNames('euiTableRow', className, {\n    'euiTableRow-isSelectable': isSelectable,\n    'euiTableRow-isSelected': isSelected,\n    'euiTableRow-hasActions': hasActions,\n    'euiTableRow-isExpandedRow': isExpandedRow,\n    'euiTableRow-isExpandable': isExpandable,\n    'euiTableRow-isClickable': onClick\n  });\n  return <tr className={classes} onClick={onClick} {...rest}>\n      {children}\n    </tr>;\n};\nEuiTableRow.propTypes = {\n  className: _propTypes.default.string,\n  \"aria-label\": _propTypes.default.string,\n  \"data-test-subj\": _propTypes.default.string,\n\n  /**\n     * Indicates if the table has a single column of checkboxes for selecting\n     * rows (affects mobile only)\n     */\n  isSelectable: PropTypes.bool,\n\n  /**\n     * Indicates the current row has been selected\n     */\n  isSelected: PropTypes.bool,\n\n  /**\n     * Indicates if the table has a dedicated column for icon-only actions\n     * (affects mobile only)\n     */\n  hasActions: PropTypes.bool,\n\n  /**\n     * Indicates if the row will have an expanded row\n     */\n  isExpandable: PropTypes.bool,\n\n  /**\n     * Indicates if the row will be the expanded row\n     */\n  isExpandedRow: PropTypes.bool\n};"]}]}