{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/datagrid/data_grid_body.tsx","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/datagrid/data_grid_body.tsx","mtime":1567538888983},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EuiDataGridBody = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _data_grid_data_row = require(\"./data_grid_data_row\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nvar EuiDataGridBody = function EuiDataGridBody(props) {\n  var columnWidths = props.columnWidths,\n      columns = props.columns,\n      focusedCell = props.focusedCell,\n      onCellFocus = props.onCellFocus,\n      rowCount = props.rowCount,\n      renderCellValue = props.renderCellValue,\n      pagination = props.pagination,\n      isGridNavigationEnabled = props.isGridNavigationEnabled,\n      interactiveCellId = props.interactiveCellId;\n  var startRow = pagination ? pagination.pageIndex * pagination.pageSize : 0;\n  var endRow = pagination ? (pagination.pageIndex + 1) * pagination.pageSize : rowCount;\n  endRow = Math.min(endRow, rowCount);\n  var rows = (0, _react.useMemo)(function () {\n    var rows = [];\n\n    for (var i = startRow; i < endRow; i++) {\n      rows.push(_react.default.createElement(_data_grid_data_row.EuiDataGridDataRow, {\n        key: i,\n        columns: columns,\n        columnWidths: columnWidths,\n        focusedCell: focusedCell,\n        onCellFocus: onCellFocus,\n        renderCellValue: renderCellValue,\n        rowIndex: i,\n        isGridNavigationEnabled: isGridNavigationEnabled,\n        interactiveCellId: interactiveCellId\n      }));\n    }\n\n    return rows;\n  }, [columns, columnWidths, endRow, focusedCell, onCellFocus, renderCellValue, startRow, isGridNavigationEnabled, interactiveCellId]);\n  return _react.default.createElement(_react.Fragment, null, rows);\n};\n\nexports.EuiDataGridBody = EuiDataGridBody;\nEuiDataGridBody.propTypes = {\n  columnWidths: _propTypes.default.shape({}).isRequired,\n  columns: _propTypes.default.arrayOf(_propTypes.default.shape({\n    id: _propTypes.default.string.isRequired\n  }).isRequired).isRequired,\n  focusedCell: _propTypes.default.any.isRequired,\n  onCellFocus: _propTypes.default.any.isRequired,\n  rowCount: _propTypes.default.number.isRequired,\n  renderCellValue: _propTypes.default.any.isRequired,\n  pagination: _propTypes.default.shape({\n    pageIndex: _propTypes.default.number.isRequired,\n    pageSize: _propTypes.default.number.isRequired,\n    pageSizeOptions: _propTypes.default.arrayOf(_propTypes.default.number.isRequired).isRequired,\n    onChangeItemsPerPage: _propTypes.default.func.isRequired,\n    onChangePage: _propTypes.default.func.isRequired\n  }),\n  isGridNavigationEnabled: _propTypes.default.any.isRequired,\n  interactiveCellId: _propTypes.default.any.isRequired\n};\nEuiDataGridBody.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"EuiDataGridBody\",\n  \"props\": {\n    \"columnWidths\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {}\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"columns\": {\n      \"type\": {\n        \"name\": \"arrayOf\",\n        \"value\": {\n          \"name\": \"shape\",\n          \"value\": {\n            \"id\": {\n              \"name\": \"string\",\n              \"required\": true\n            }\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"focusedCell\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"onCellFocus\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"rowCount\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"renderCellValue\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"pagination\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {\n          \"pageIndex\": {\n            \"name\": \"number\",\n            \"required\": true\n          },\n          \"pageSize\": {\n            \"name\": \"number\",\n            \"required\": true\n          },\n          \"pageSizeOptions\": {\n            \"name\": \"arrayOf\",\n            \"value\": {\n              \"name\": \"number\"\n            },\n            \"required\": true\n          },\n          \"onChangeItemsPerPage\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"onChangePage\": {\n            \"name\": \"func\",\n            \"required\": true\n          }\n        }\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"isGridNavigationEnabled\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"interactiveCellId\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/datagrid/data_grid_body.tsx"],"names":["EuiDataGridBody","props","columnWidths","columns","focusedCell","onCellFocus","rowCount","renderCellValue","pagination","isGridNavigationEnabled","interactiveCellId","startRow","pageIndex","pageSize","endRow","Math","min","rows","i","push"],"mappings":";;;;;;;AAAA;;;;AAOA;;;;;;AAiBO,IAAMA,eAEZ,GAAG,SAFSA,eAET,CAAAC,KAAK,EAAI;AAAA,MAETC,YAFS,GAWPD,KAXO,CAETC,YAFS;AAAA,MAGTC,OAHS,GAWPF,KAXO,CAGTE,OAHS;AAAA,MAITC,WAJS,GAWPH,KAXO,CAITG,WAJS;AAAA,MAKTC,WALS,GAWPJ,KAXO,CAKTI,WALS;AAAA,MAMTC,QANS,GAWPL,KAXO,CAMTK,QANS;AAAA,MAOTC,eAPS,GAWPN,KAXO,CAOTM,eAPS;AAAA,MAQTC,UARS,GAWPP,KAXO,CAQTO,UARS;AAAA,MASTC,uBATS,GAWPR,KAXO,CASTQ,uBATS;AAAA,MAUTC,iBAVS,GAWPT,KAXO,CAUTS,iBAVS;AAaX,MAAMC,QAAQ,GAAGH,UAAU,GAAGA,UAAU,CAACI,SAAX,GAAuBJ,UAAU,CAACK,QAArC,GAAgD,CAA3E;AACA,MAAIC,MAAM,GAAGN,UAAU,GACnB,CAACA,UAAU,CAACI,SAAX,GAAuB,CAAxB,IAA6BJ,UAAU,CAACK,QADrB,GAEnBP,QAFJ;AAGAQ,EAAAA,MAAM,GAAGC,IAAI,CAACC,GAAL,CAASF,MAAT,EAAiBR,QAAjB,CAAT;AAEA,MAAMW,IAAI,GAAG,oBAAQ,YAAM;AACzB,QAAMA,IAAI,GAAG,EAAb;;AACA,SAAK,IAAIC,CAAC,GAAGP,QAAb,EAAuBO,CAAC,GAAGJ,MAA3B,EAAmCI,CAAC,EAApC,EAAwC;AACtCD,MAAAA,IAAI,CAACE,IAAL,CACE,6BAAC,sCAAD;AACE,QAAA,GAAG,EAAED,CADP;AAEE,QAAA,OAAO,EAAEf,OAFX;AAGE,QAAA,YAAY,EAAED,YAHhB;AAIE,QAAA,WAAW,EAAEE,WAJf;AAKE,QAAA,WAAW,EAAEC,WALf;AAME,QAAA,eAAe,EAAEE,eANnB;AAOE,QAAA,QAAQ,EAAEW,CAPZ;AAQE,QAAA,uBAAuB,EAAET,uBAR3B;AASE,QAAA,iBAAiB,EAAEC;AATrB,QADF;AAaD;;AAED,WAAOO,IAAP;AACD,GAnBY,EAmBV,CACDd,OADC,EAEDD,YAFC,EAGDY,MAHC,EAIDV,WAJC,EAKDC,WALC,EAMDE,eANC,EAODI,QAPC,EAQDF,uBARC,EASDC,iBATC,CAnBU,CAAb;AA+BA,SAAO,6BAAC,eAAD,QAAWO,IAAX,CAAP;AACD,CArDM","sourcesContent":["import React, { Fragment, useMemo } from 'react';\nimport PropTypes from \"prop-types\";\nimport { EuiDataGridDataRow } from './data_grid_data_row';\nexport var EuiDataGridBody = props => {\n  const {\n    columnWidths,\n    columns,\n    focusedCell,\n    onCellFocus,\n    rowCount,\n    renderCellValue,\n    pagination,\n    isGridNavigationEnabled,\n    interactiveCellId\n  } = props;\n  const startRow = pagination ? pagination.pageIndex * pagination.pageSize : 0;\n  let endRow = pagination ? (pagination.pageIndex + 1) * pagination.pageSize : rowCount;\n  endRow = Math.min(endRow, rowCount);\n  const rows = useMemo(() => {\n    const rows = [];\n\n    for (let i = startRow; i < endRow; i++) {\n      rows.push(<EuiDataGridDataRow key={i} columns={columns} columnWidths={columnWidths} focusedCell={focusedCell} onCellFocus={onCellFocus} renderCellValue={renderCellValue} rowIndex={i} isGridNavigationEnabled={isGridNavigationEnabled} interactiveCellId={interactiveCellId} />);\n    }\n\n    return rows;\n  }, [columns, columnWidths, endRow, focusedCell, onCellFocus, renderCellValue, startRow, isGridNavigationEnabled, interactiveCellId]);\n  return <Fragment>{rows}</Fragment>;\n};\nEuiDataGridBody.propTypes = {\n  columnWidths: PropTypes.shape({}).isRequired,\n  columns: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired\n  }).isRequired).isRequired,\n  focusedCell: PropTypes.any.isRequired,\n  onCellFocus: PropTypes.any.isRequired,\n  rowCount: PropTypes.number.isRequired,\n  renderCellValue: PropTypes.any.isRequired,\n  pagination: PropTypes.shape({\n    pageIndex: PropTypes.number.isRequired,\n    pageSize: PropTypes.number.isRequired,\n    pageSizeOptions: PropTypes.arrayOf(PropTypes.number.isRequired).isRequired,\n    onChangeItemsPerPage: PropTypes.func.isRequired,\n    onChangePage: PropTypes.func.isRequired\n  }),\n  isGridNavigationEnabled: PropTypes.any.isRequired,\n  interactiveCellId: PropTypes.any.isRequired\n};"]}]}