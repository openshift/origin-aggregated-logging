{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/panel/panel.tsx","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/panel/panel.tsx","mtime":1567626462178},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EuiPanel = exports.SIZES = void 0;\n\nrequire(\"core-js/modules/es6.object.assign\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _beta_badge = require(\"../badge/beta_badge\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nvar paddingSizeToClassNameMap = {\n  none: null,\n  s: 'euiPanel--paddingSmall',\n  m: 'euiPanel--paddingMedium',\n  l: 'euiPanel--paddingLarge'\n};\nvar SIZES = Object.keys(paddingSizeToClassNameMap);\nexports.SIZES = SIZES;\n\nvar EuiPanel = function EuiPanel(_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      _ref$paddingSize = _ref.paddingSize,\n      paddingSize = _ref$paddingSize === void 0 ? 'm' : _ref$paddingSize,\n      _ref$hasShadow = _ref.hasShadow,\n      hasShadow = _ref$hasShadow === void 0 ? false : _ref$hasShadow,\n      _ref$grow = _ref.grow,\n      grow = _ref$grow === void 0 ? true : _ref$grow,\n      panelRef = _ref.panelRef,\n      onClick = _ref.onClick,\n      betaBadgeLabel = _ref.betaBadgeLabel,\n      betaBadgeTooltipContent = _ref.betaBadgeTooltipContent,\n      betaBadgeTitle = _ref.betaBadgeTitle,\n      rest = _objectWithoutProperties(_ref, [\"children\", \"className\", \"paddingSize\", \"hasShadow\", \"grow\", \"panelRef\", \"onClick\", \"betaBadgeLabel\", \"betaBadgeTooltipContent\", \"betaBadgeTitle\"]);\n\n  var classes = (0, _classnames.default)('euiPanel', paddingSize ? paddingSizeToClassNameMap[paddingSize] : null, {\n    'euiPanel--shadow': hasShadow,\n    'euiPanel--flexGrowZero': !grow,\n    'euiPanel--isClickable': onClick,\n    'euiPanel--hasBetaBadge': betaBadgeLabel\n  }, className);\n  var optionalBetaBadge;\n\n  if (betaBadgeLabel) {\n    optionalBetaBadge = _react.default.createElement(\"span\", {\n      className: \"euiPanel__betaBadgeWrapper\"\n    }, _react.default.createElement(_beta_badge.EuiBetaBadge, {\n      label: betaBadgeLabel,\n      title: betaBadgeTitle,\n      tooltipContent: betaBadgeTooltipContent,\n      className: \"euiPanel__betaBadge\"\n    }));\n  }\n\n  if (onClick) {\n    return _react.default.createElement(\"button\", _extends({\n      ref: panelRef,\n      className: classes,\n      onClick: onClick\n    }, rest), optionalBetaBadge, children);\n  }\n\n  return (// ts-ignore seems to be some div / button confusion here\n    _react.default.createElement(\"div\", _extends({\n      ref: panelRef,\n      className: classes\n    }, rest), optionalBetaBadge, children)\n  );\n};\n\nexports.EuiPanel = EuiPanel;\nEuiPanel.propTypes = {\n  className: _propTypes.default.string,\n  \"aria-label\": _propTypes.default.string,\n  \"data-test-subj\": _propTypes.default.string,\n\n  /**\n     * If active, adds a deeper shadow to the panel\n     */\n  hasShadow: _propTypes.default.bool,\n\n  /**\n     * Padding applied to the panel\n     */\n  paddingSize: _propTypes.default.oneOf([\"none\", \"s\", \"m\", \"l\"]),\n\n  /**\n     * When true the panel will grow to match `EuiFlexItem`\n     */\n  grow: _propTypes.default.bool,\n  panelRef: _propTypes.default.any,\n\n  /**\n     * Add a badge to the panel to label it as \"Beta\" or other non-GA state\n     */\n  betaBadgeLabel: _propTypes.default.string,\n\n  /**\n     * Add a description to the beta badge (will appear in a tooltip)\n     */\n  betaBadgeTooltipContent: _propTypes.default.node,\n\n  /**\n     * Optional title will be supplied as tooltip title or title attribute otherwise the label will be used\n     */\n  betaBadgeTitle: _propTypes.default.string,\n  onClick: _propTypes.default.func\n};\nEuiPanel.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"EuiPanel\",\n  \"props\": {\n    \"paddingSize\": {\n      \"defaultValue\": {\n        \"value\": \"'m'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"none\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"s\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"m\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"l\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Padding applied to the panel\"\n    },\n    \"hasShadow\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"If active, adds a deeper shadow to the panel\"\n    },\n    \"grow\": {\n      \"defaultValue\": {\n        \"value\": \"true\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"When true the panel will grow to match `EuiFlexItem`\"\n    },\n    \"className\": {\n      \"type\": {\n        \"name\": \"custom\",\n        \"raw\": \"_propTypes.default.string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"aria-label\": {\n      \"type\": {\n        \"name\": \"custom\",\n        \"raw\": \"_propTypes.default.string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"data-test-subj\": {\n      \"type\": {\n        \"name\": \"custom\",\n        \"raw\": \"_propTypes.default.string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"panelRef\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"betaBadgeLabel\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Add a badge to the panel to label it as \\\"Beta\\\" or other non-GA state\"\n    },\n    \"betaBadgeTooltipContent\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Add a description to the beta badge (will appear in a tooltip)\"\n    },\n    \"betaBadgeTitle\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Optional title will be supplied as tooltip title or title attribute otherwise the label will be used\"\n    },\n    \"onClick\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/panel/panel.tsx"],"names":["paddingSizeToClassNameMap","none","s","m","l","SIZES","Object","keys","EuiPanel","children","className","paddingSize","hasShadow","grow","panelRef","onClick","betaBadgeLabel","betaBadgeTooltipContent","betaBadgeTitle","rest","classes","optionalBetaBadge"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AAQA;;AAGA;;;;;;;;;;AA4CA,IAAMA,yBAAyB,GAAG;AAChCC,EAAAA,IAAI,EAAE,IAD0B;AAEhCC,EAAAA,CAAC,EAAE,wBAF6B;AAGhCC,EAAAA,CAAC,EAAE,yBAH6B;AAIhCC,EAAAA,CAAC,EAAE;AAJ6B,CAAlC;AAOO,IAAMC,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYP,yBAAZ,CAAd;;;AAEA,IAAMQ,QAAkC,GAAG,SAArCA,QAAqC,OAY5C;AAAA,MAXJC,QAWI,QAXJA,QAWI;AAAA,MAVJC,SAUI,QAVJA,SAUI;AAAA,8BATJC,WASI;AAAA,MATJA,WASI,iCATU,GASV;AAAA,4BARJC,SAQI;AAAA,MARJA,SAQI,+BARQ,KAQR;AAAA,uBAPJC,IAOI;AAAA,MAPJA,IAOI,0BAPG,IAOH;AAAA,MANJC,QAMI,QANJA,QAMI;AAAA,MALJC,OAKI,QALJA,OAKI;AAAA,MAJJC,cAII,QAJJA,cAII;AAAA,MAHJC,uBAGI,QAHJA,uBAGI;AAAA,MAFJC,cAEI,QAFJA,cAEI;AAAA,MADDC,IACC;;AACJ,MAAMC,OAAO,GAAG,yBACd,UADc,EAEdT,WAAW,GAAGX,yBAAyB,CAACW,WAAD,CAA5B,GAA4C,IAFzC,EAGd;AACE,wBAAoBC,SADtB;AAEE,8BAA0B,CAACC,IAF7B;AAGE,6BAAyBE,OAH3B;AAIE,8BAA0BC;AAJ5B,GAHc,EASdN,SATc,CAAhB;AAYA,MAAIW,iBAAJ;;AACA,MAAIL,cAAJ,EAAoB;AAClBK,IAAAA,iBAAiB,GACf;AAAM,MAAA,SAAS,EAAC;AAAhB,OACE,6BAAC,wBAAD;AACE,MAAA,KAAK,EAAEL,cADT;AAEE,MAAA,KAAK,EAAEE,cAFT;AAGE,MAAA,cAAc,EAAED,uBAHlB;AAIE,MAAA,SAAS,EAAC;AAJZ,MADF,CADF;AAUD;;AAED,MAAIF,OAAJ,EAAa;AACX,WACE;AACE,MAAA,GAAG,EAAED,QADP;AAEE,MAAA,SAAS,EAAEM,OAFb;AAGE,MAAA,OAAO,EAAEL;AAHX,OAIMI,IAJN,GAKGE,iBALH,EAMGZ,QANH,CADF;AAUD;;AAED,SACE;AACA;AAAK,MAAA,GAAG,EAAEK,QAAV;AAAoB,MAAA,SAAS,EAAEM;AAA/B,OAA4CD,IAA5C,GACGE,iBADH,EAEGZ,QAFH;AAFF;AAOD,CA3DM","sourcesContent":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.keys\";\nimport PropTypes from \"prop-types\";\nimport React from 'react';\nimport classNames from 'classnames';\nimport { EuiBetaBadge } from '../badge/beta_badge';\nvar paddingSizeToClassNameMap = {\n  none: null,\n  s: 'euiPanel--paddingSmall',\n  m: 'euiPanel--paddingMedium',\n  l: 'euiPanel--paddingLarge'\n};\nexport var SIZES = Object.keys(paddingSizeToClassNameMap);\nexport var EuiPanel = ({\n  children,\n  className,\n  paddingSize = 'm',\n  hasShadow = false,\n  grow = true,\n  panelRef,\n  onClick,\n  betaBadgeLabel,\n  betaBadgeTooltipContent,\n  betaBadgeTitle,\n  ...rest\n}) => {\n  const classes = classNames('euiPanel', paddingSize ? paddingSizeToClassNameMap[paddingSize] : null, {\n    'euiPanel--shadow': hasShadow,\n    'euiPanel--flexGrowZero': !grow,\n    'euiPanel--isClickable': onClick,\n    'euiPanel--hasBetaBadge': betaBadgeLabel\n  }, className);\n  let optionalBetaBadge;\n\n  if (betaBadgeLabel) {\n    optionalBetaBadge = <span className=\"euiPanel__betaBadgeWrapper\">\n        <EuiBetaBadge label={betaBadgeLabel} title={betaBadgeTitle} tooltipContent={betaBadgeTooltipContent} className=\"euiPanel__betaBadge\" />\n      </span>;\n  }\n\n  if (onClick) {\n    return <button ref={panelRef} className={classes} onClick={onClick} {...rest}>\n        {optionalBetaBadge}\n        {children}\n      </button>;\n  }\n\n  return (// ts-ignore seems to be some div / button confusion here\n    <div ref={panelRef} className={classes} {...rest}>\n      {optionalBetaBadge}\n      {children}\n    </div>\n  );\n};\nEuiPanel.propTypes = {\n  className: _propTypes.default.string,\n  \"aria-label\": _propTypes.default.string,\n  \"data-test-subj\": _propTypes.default.string,\n\n  /**\n     * If active, adds a deeper shadow to the panel\n     */\n  hasShadow: PropTypes.bool,\n\n  /**\n     * Padding applied to the panel\n     */\n  paddingSize: PropTypes.oneOf([\"none\", \"s\", \"m\", \"l\"]),\n\n  /**\n     * When true the panel will grow to match `EuiFlexItem`\n     */\n  grow: PropTypes.bool,\n  panelRef: PropTypes.any,\n\n  /**\n     * Add a badge to the panel to label it as \"Beta\" or other non-GA state\n     */\n  betaBadgeLabel: PropTypes.string,\n\n  /**\n     * Add a description to the beta badge (will appear in a tooltip)\n     */\n  betaBadgeTooltipContent: PropTypes.node,\n\n  /**\n     * Optional title will be supplied as tooltip title or title attribute otherwise the label will be used\n     */\n  betaBadgeTitle: PropTypes.string,\n  onClick: PropTypes.func\n};"]}]}