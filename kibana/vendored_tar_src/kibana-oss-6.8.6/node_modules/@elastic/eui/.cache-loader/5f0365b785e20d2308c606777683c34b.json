{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/form/range/range_levels.tsx","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/form/range/range_levels.tsx","mtime":1565204169740},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EuiRangeLevels = exports.LEVEL_COLORS = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar LEVEL_COLORS = ['primary', 'success', 'warning', 'danger'];\nexports.LEVEL_COLORS = LEVEL_COLORS;\n\nvar EuiRangeLevels = function EuiRangeLevels(_ref) {\n  var _ref$levels = _ref.levels,\n      levels = _ref$levels === void 0 ? [] : _ref$levels,\n      max = _ref.max,\n      min = _ref.min,\n      showTicks = _ref.showTicks;\n\n  var validateLevelIsInRange = function validateLevelIsInRange(level) {\n    if (level.min < min) {\n      throw new Error(\"The level min of \".concat(level.min, \" is lower than the min value of \").concat(min, \".\"));\n    }\n\n    if (level.max > max) {\n      throw new Error(\"The level max of \".concat(level.max, \" is higher than the max value of \").concat(max, \".\"));\n    }\n  };\n\n  var classes = (0, _classnames.default)('euiRangeLevels', {\n    'euiRangeLevels--hasTicks': showTicks\n  });\n  return _react.default.createElement(\"div\", {\n    className: classes\n  }, levels.map(function (level, index) {\n    validateLevelIsInRange(level);\n    var range = level.max - level.min;\n    var width = range / (max - min) * 100;\n    return _react.default.createElement(\"span\", {\n      key: index,\n      style: {\n        width: \"\".concat(width, \"%\")\n      },\n      className: \"euiRangeLevel euiRangeLevel--\".concat(level.color)\n    });\n  }));\n};\n\nexports.EuiRangeLevels = EuiRangeLevels;\nEuiRangeLevels.propTypes = {\n  levels: _propTypes.default.arrayOf(_propTypes.default.shape({\n    min: _propTypes.default.number.isRequired,\n    max: _propTypes.default.number.isRequired,\n    color: _propTypes.default.oneOf([\"primary\", \"success\", \"warning\", \"danger\"]).isRequired\n  }).isRequired),\n  max: _propTypes.default.number.isRequired,\n  min: _propTypes.default.number.isRequired,\n  showTicks: _propTypes.default.bool\n};\nEuiRangeLevels.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"EuiRangeLevels\",\n  \"props\": {\n    \"levels\": {\n      \"defaultValue\": {\n        \"value\": \"[]\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"arrayOf\",\n        \"value\": {\n          \"name\": \"shape\",\n          \"value\": {\n            \"min\": {\n              \"name\": \"number\",\n              \"required\": true\n            },\n            \"max\": {\n              \"name\": \"number\",\n              \"required\": true\n            },\n            \"color\": {\n              \"name\": \"enum\",\n              \"value\": [{\n                \"value\": \"\\\"primary\\\"\",\n                \"computed\": false\n              }, {\n                \"value\": \"\\\"success\\\"\",\n                \"computed\": false\n              }, {\n                \"value\": \"\\\"warning\\\"\",\n                \"computed\": false\n              }, {\n                \"value\": \"\\\"danger\\\"\",\n                \"computed\": false\n              }],\n              \"required\": true\n            }\n          }\n        }\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"max\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"min\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"showTicks\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/form/range/range_levels.tsx"],"names":["LEVEL_COLORS","EuiRangeLevels","levels","max","min","showTicks","validateLevelIsInRange","level","Error","classes","map","index","range","width","color"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AAIO,IAAMA,YAAkC,GAAG,CAChD,SADgD,EAEhD,SAFgD,EAGhD,SAHgD,EAIhD,QAJgD,CAA3C;;;AAoBA,IAAMC,cAAsD,GAAG,SAAzDA,cAAyD,OAKhE;AAAA,yBAJJC,MAII;AAAA,MAJJA,MAII,4BAJK,EAIL;AAAA,MAHJC,GAGI,QAHJA,GAGI;AAAA,MAFJC,GAEI,QAFJA,GAEI;AAAA,MADJC,SACI,QADJA,SACI;;AACJ,MAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,KAAD,EAA0B;AACvD,QAAIA,KAAK,CAACH,GAAN,GAAYA,GAAhB,EAAqB;AACnB,YAAM,IAAII,KAAJ,4BACgBD,KAAK,CAACH,GADtB,6CAC4DA,GAD5D,OAAN;AAGD;;AACD,QAAIG,KAAK,CAACJ,GAAN,GAAYA,GAAhB,EAAqB;AACnB,YAAM,IAAIK,KAAJ,4BACgBD,KAAK,CAACJ,GADtB,8CAC6DA,GAD7D,OAAN;AAGD;AACF,GAXD;;AAaA,MAAMM,OAAO,GAAG,yBAAW,gBAAX,EAA6B;AAC3C,gCAA4BJ;AADe,GAA7B,CAAhB;AAIA,SACE;AAAK,IAAA,SAAS,EAAEI;AAAhB,KACGP,MAAM,CAACQ,GAAP,CAAW,UAACH,KAAD,EAAQI,KAAR,EAAkB;AAC5BL,IAAAA,sBAAsB,CAACC,KAAD,CAAtB;AACA,QAAMK,KAAK,GAAGL,KAAK,CAACJ,GAAN,GAAYI,KAAK,CAACH,GAAhC;AACA,QAAMS,KAAK,GAAID,KAAK,IAAIT,GAAG,GAAGC,GAAV,CAAN,GAAwB,GAAtC;AAEA,WACE;AACE,MAAA,GAAG,EAAEO,KADP;AAEE,MAAA,KAAK,EAAE;AAAEE,QAAAA,KAAK,YAAKA,KAAL;AAAP,OAFT;AAGE,MAAA,SAAS,yCAAkCN,KAAK,CAACO,KAAxC;AAHX,MADF;AAOD,GAZA,CADH,CADF;AAiBD,CAxCM","sourcesContent":["import React from 'react';\nimport PropTypes from \"prop-types\";\nimport classNames from 'classnames';\nexport var LEVEL_COLORS = ['primary', 'success', 'warning', 'danger'];\nexport var EuiRangeLevels = ({\n  levels = [],\n  max,\n  min,\n  showTicks\n}) => {\n  const validateLevelIsInRange = level => {\n    if (level.min < min) {\n      throw new Error(`The level min of ${level.min} is lower than the min value of ${min}.`);\n    }\n\n    if (level.max > max) {\n      throw new Error(`The level max of ${level.max} is higher than the max value of ${max}.`);\n    }\n  };\n\n  const classes = classNames('euiRangeLevels', {\n    'euiRangeLevels--hasTicks': showTicks\n  });\n  return <div className={classes}>\n      {levels.map((level, index) => {\n      validateLevelIsInRange(level);\n      const range = level.max - level.min;\n      const width = range / (max - min) * 100;\n      return <span key={index} style={{\n        width: `${width}%`\n      }} className={`euiRangeLevel euiRangeLevel--${level.color}`} />;\n    })}\n    </div>;\n};\nEuiRangeLevels.propTypes = {\n  levels: PropTypes.arrayOf(PropTypes.shape({\n    min: PropTypes.number.isRequired,\n    max: PropTypes.number.isRequired,\n    color: PropTypes.oneOf([\"primary\", \"success\", \"warning\", \"danger\"]).isRequired\n  }).isRequired),\n  max: PropTypes.number.isRequired,\n  min: PropTypes.number.isRequired,\n  showTicks: PropTypes.bool\n};"]}]}