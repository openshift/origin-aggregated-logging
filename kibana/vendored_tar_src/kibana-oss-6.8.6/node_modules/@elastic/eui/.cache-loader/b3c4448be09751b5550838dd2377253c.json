{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/overlay_mask/overlay_mask.tsx","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/overlay_mask/overlay_mask.tsx","mtime":1565204169949},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EuiOverlayMask = void 0;\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.object.set-prototype-of\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _react = require(\"react\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactDom = require(\"react-dom\");\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _common = require(\"../common\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar EuiOverlayMask =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EuiOverlayMask, _Component);\n\n  function EuiOverlayMask(props) {\n    var _this;\n\n    _classCallCheck(this, EuiOverlayMask);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EuiOverlayMask).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"overlayMaskNode\", void 0);\n\n    var _this$props = _this.props,\n        className = _this$props.className,\n        children = _this$props.children,\n        onClick = _this$props.onClick,\n        rest = _objectWithoutProperties(_this$props, [\"className\", \"children\", \"onClick\"]);\n\n    _this.overlayMaskNode = document.createElement('div');\n    _this.overlayMaskNode.className = (0, _classnames.default)('euiOverlayMask', className);\n\n    if (onClick) {\n      _this.overlayMaskNode.addEventListener('click', onClick);\n    }\n\n    (0, _common.keysOf)(rest).forEach(function (key) {\n      if (typeof rest[key] !== 'string') {\n        throw new Error(\"Unhandled property type. EuiOverlayMask property \".concat(key, \" is not a string.\"));\n      }\n\n      _this.overlayMaskNode.setAttribute(key, rest[key]);\n    });\n    document.body.appendChild(_this.overlayMaskNode);\n    return _this;\n  }\n\n  _createClass(EuiOverlayMask, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.body.classList.add('euiBody-hasOverlayMask');\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.body.classList.remove('euiBody-hasOverlayMask');\n\n      if (this.props.onClick) {\n        this.overlayMaskNode.removeEventListener('click', this.props.onClick);\n      }\n\n      document.body.removeChild(this.overlayMaskNode);\n      this.overlayMaskNode = undefined;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return (0, _reactDom.createPortal)(this.props.children, this.overlayMaskNode);\n    }\n  }]);\n\n  return EuiOverlayMask;\n}(_react.Component);\n\nexports.EuiOverlayMask = EuiOverlayMask;\nEuiOverlayMask.propTypes = {\n  className: _propTypes.default.string,\n  \"aria-label\": _propTypes.default.string,\n  \"data-test-subj\": _propTypes.default.string,\n  onClick: _propTypes.default.func,\n  children: _propTypes.default.node\n};\nEuiOverlayMask.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"EuiOverlayMask\",\n  \"props\": {\n    \"className\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"aria-label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"data-test-subj\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"onClick\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/overlay_mask/overlay_mask.tsx"],"names":["EuiOverlayMask","props","className","children","onClick","rest","overlayMaskNode","document","createElement","addEventListener","forEach","key","Error","setAttribute","body","appendChild","classList","add","remove","removeEventListener","removeChild","undefined","Component"],"mappings":";;;;;;;;;;;;;;;;;;;AAKA;;;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAcaA,c;;;;;AAGX,0BAAYC,KAAZ,EAA0B;AAAA;;AAAA;;AACxB,wFAAMA,KAAN;;AADwB;;AAAA,sBAG0B,MAAKA,KAH/B;AAAA,QAGhBC,SAHgB,eAGhBA,SAHgB;AAAA,QAGLC,QAHK,eAGLA,QAHK;AAAA,QAGKC,OAHL,eAGKA,OAHL;AAAA,QAGiBC,IAHjB;;AAKxB,UAAKC,eAAL,GAAuBC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAvB;AACA,UAAKF,eAAL,CAAqBJ,SAArB,GAAiC,yBAAW,gBAAX,EAA6BA,SAA7B,CAAjC;;AACA,QAAIE,OAAJ,EAAa;AACX,YAAKE,eAAL,CAAqBG,gBAArB,CAAsC,OAAtC,EAA+CL,OAA/C;AACD;;AACD,wBAAOC,IAAP,EAAaK,OAAb,CAAqB,UAAAC,GAAG,EAAI;AAC1B,UAAI,OAAON,IAAI,CAACM,GAAD,CAAX,KAAqB,QAAzB,EAAmC;AACjC,cAAM,IAAIC,KAAJ,4DACgDD,GADhD,uBAAN;AAGD;;AACD,YAAKL,eAAL,CAAsBO,YAAtB,CAAmCF,GAAnC,EAAwCN,IAAI,CAACM,GAAD,CAA5C;AACD,KAPD;AASAJ,IAAAA,QAAQ,CAACO,IAAT,CAAcC,WAAd,CAA0B,MAAKT,eAA/B;AAnBwB;AAoBzB;;;;wCAEmB;AAClBC,MAAAA,QAAQ,CAACO,IAAT,CAAcE,SAAd,CAAwBC,GAAxB,CAA4B,wBAA5B;AACD;;;2CAEsB;AACrBV,MAAAA,QAAQ,CAACO,IAAT,CAAcE,SAAd,CAAwBE,MAAxB,CAA+B,wBAA/B;;AAEA,UAAI,KAAKjB,KAAL,CAAWG,OAAf,EAAwB;AACtB,aAAKE,eAAL,CAAsBa,mBAAtB,CAA0C,OAA1C,EAAmD,KAAKlB,KAAL,CAAWG,OAA9D;AACD;;AACDG,MAAAA,QAAQ,CAACO,IAAT,CAAcM,WAAd,CAA0B,KAAKd,eAA/B;AACA,WAAKA,eAAL,GAAuBe,SAAvB;AACD;;;6BAEQ;AACP,aAAO,4BAAa,KAAKpB,KAAL,CAAWE,QAAxB,EAAkC,KAAKG,eAAvC,CAAP;AACD;;;;EAzCiCgB,gB","sourcesContent":["/**\n * NOTE: We can't test this component because Enzyme doesn't support rendering\n * into portals.\n */\nimport { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport { createPortal } from 'react-dom';\nimport classNames from 'classnames';\nimport { keysOf } from '../common';\nexport class EuiOverlayMask extends Component {\n  constructor(props) {\n    super(props);\n    const {\n      className,\n      children,\n      onClick,\n      ...rest\n    } = this.props;\n    this.overlayMaskNode = document.createElement('div');\n    this.overlayMaskNode.className = classNames('euiOverlayMask', className);\n\n    if (onClick) {\n      this.overlayMaskNode.addEventListener('click', onClick);\n    }\n\n    keysOf(rest).forEach(key => {\n      if (typeof rest[key] !== 'string') {\n        throw new Error(`Unhandled property type. EuiOverlayMask property ${key} is not a string.`);\n      }\n\n      this.overlayMaskNode.setAttribute(key, rest[key]);\n    });\n    document.body.appendChild(this.overlayMaskNode);\n  }\n\n  componentDidMount() {\n    document.body.classList.add('euiBody-hasOverlayMask');\n  }\n\n  componentWillUnmount() {\n    document.body.classList.remove('euiBody-hasOverlayMask');\n\n    if (this.props.onClick) {\n      this.overlayMaskNode.removeEventListener('click', this.props.onClick);\n    }\n\n    document.body.removeChild(this.overlayMaskNode);\n    this.overlayMaskNode = undefined;\n  }\n\n  render() {\n    return createPortal(this.props.children, this.overlayMaskNode);\n  }\n\n}\nEuiOverlayMask.propTypes = {\n  className: PropTypes.string,\n  \"aria-label\": PropTypes.string,\n  \"data-test-subj\": PropTypes.string,\n  onClick: PropTypes.func,\n  children: PropTypes.node\n};"]}]}