{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/table/table_row_cell.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/table/table_row_cell.js","mtime":1567534071296},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EuiTableRowCell = void 0;\n\nrequire(\"core-js/modules/es6.object.assign\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _services = require(\"../../services\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nvar ALIGNMENT = [_services.LEFT_ALIGNMENT, _services.RIGHT_ALIGNMENT, _services.CENTER_ALIGNMENT];\n\nvar EuiTableRowCell = function EuiTableRowCell(_ref) {\n  var align = _ref.align,\n      children = _ref.children,\n      className = _ref.className,\n      truncateText = _ref.truncateText,\n      showOnHover = _ref.showOnHover,\n      textOnly = _ref.textOnly,\n      colSpan = _ref.colSpan,\n      hasActions = _ref.hasActions,\n      isExpander = _ref.isExpander,\n      mobileOptions = _ref.mobileOptions,\n      header = _ref.header,\n      hideForMobile = _ref.hideForMobile,\n      isMobileHeader = _ref.isMobileHeader,\n      isMobileFullWidth = _ref.isMobileFullWidth,\n      rest = _objectWithoutProperties(_ref, [\"align\", \"children\", \"className\", \"truncateText\", \"showOnHover\", \"textOnly\", \"colSpan\", \"hasActions\", \"isExpander\", \"mobileOptions\", \"header\", \"hideForMobile\", \"isMobileHeader\", \"isMobileFullWidth\"]);\n\n  var cellClasses = (0, _classnames.default)('euiTableRowCell', {\n    'euiTableRowCell--hasActions': hasActions,\n    'euiTableRowCell--isExpander': isExpander,\n    'euiTableRowCell--hideForDesktop': mobileOptions.only || isMobileHeader,\n    'euiTableRowCell--enlargeForMobile': mobileOptions.enlarge || isMobileHeader,\n    'euiTableRowCell--isMobileFullWidth': mobileOptions.fullWidth || isMobileFullWidth || isMobileHeader\n  });\n  var contentClasses = (0, _classnames.default)('euiTableCellContent', className, {\n    'euiTableCellContent--alignRight': align === _services.RIGHT_ALIGNMENT,\n    'euiTableCellContent--alignCenter': align === _services.CENTER_ALIGNMENT,\n    'euiTableCellContent--showOnHover': showOnHover,\n    'euiTableCellContent--truncateText': truncateText,\n    // We're doing this rigamarole instead of creating `euiTableCellContent--textOnly` for BWC\n    // purposes for the time-being.\n    'euiTableCellContent--overflowingContent': textOnly !== true\n  });\n  var mobileContentClasses = (0, _classnames.default)('euiTableCellContent', className, {\n    'euiTableCellContent--alignRight': mobileOptions.align === _services.RIGHT_ALIGNMENT || align === _services.RIGHT_ALIGNMENT,\n    'euiTableCellContent--alignCenter': mobileOptions.align === _services.CENTER_ALIGNMENT || align === _services.RIGHT_ALIGNMENT,\n    'euiTableCellContent--showOnHover': mobileOptions.showOnHover || showOnHover,\n    'euiTableCellContent--truncateText': mobileOptions.truncateText || truncateText,\n    // We're doing this rigamarole instead of creating `euiTableCellContent--textOnly` for BWC\n    // purposes for the time-being.\n    'euiTableCellContent--overflowingContent': mobileOptions.textOnly !== true || textOnly !== true\n  });\n  var childClasses = (0, _classnames.default)({\n    euiTableCellContent__text: textOnly === true,\n    euiTableCellContent__hoverItem: showOnHover\n  });\n\n  function modifyChildren(children) {\n    var modifiedChildren = children;\n\n    if (textOnly === true) {\n      modifiedChildren = _react.default.createElement(\"span\", {\n        className: childClasses\n      }, children);\n    } else if (_react.default.isValidElement(children)) {\n      modifiedChildren = _react.default.Children.map(children, function (child) {\n        return _react.default.cloneElement(child, {\n          className: (0, _classnames.default)(child.props.className, childClasses)\n        });\n      });\n    }\n\n    return modifiedChildren;\n  }\n\n  var childrenNode = modifyChildren(children);\n  var hideForMobileClasses = 'euiTableRowCell--hideForMobile';\n  var showForMobileClasses = 'euiTableRowCell--hideForDesktop';\n  var cellRender;\n\n  if (mobileOptions.show === false || hideForMobile) {\n    cellRender = _react.default.createElement(\"td\", _extends({\n      className: \"\".concat(cellClasses, \" \").concat(hideForMobileClasses),\n      colSpan: colSpan\n    }, rest), _react.default.createElement(\"div\", {\n      className: contentClasses\n    }, childrenNode));\n  } else {\n    cellRender = _react.default.createElement(\"td\", _extends({\n      className: cellClasses,\n      colSpan: colSpan\n    }, rest), (mobileOptions.header || header) && !isMobileHeader && _react.default.createElement(\"div\", {\n      className: \"euiTableRowCell__mobileHeader \".concat(showForMobileClasses)\n    }, mobileOptions.header || header), mobileOptions.render ? _react.default.createElement(_react.Fragment, null, _react.default.createElement(\"div\", {\n      className: \"\".concat(mobileContentClasses, \" \").concat(showForMobileClasses)\n    }, modifyChildren(mobileOptions.render)), _react.default.createElement(\"div\", {\n      className: \"\".concat(contentClasses, \" \").concat(hideForMobileClasses)\n    }, childrenNode)) : _react.default.createElement(\"div\", {\n      className: contentClasses\n    }, childrenNode));\n  }\n\n  return cellRender;\n};\n\nexports.EuiTableRowCell = EuiTableRowCell;\nvar sharedPropTypes = {\n  /**\n   * Horizontal alignment of the text in the cell\n   */\n  align: _propTypes.default.oneOf(ALIGNMENT),\n\n  /**\n   * Don't allow line breaks within cells\n   */\n  truncateText: _propTypes.default.bool,\n\n  /**\n   * Setting `textOnly` to `false` will break words unnecessarily on FF and IE.\n   * To combat this problem on FF, wrap contents with the css utility `.eui-textBreakWord`.\n   */\n  textOnly: _propTypes.default.bool,\n\n  /**\n   * _Should only be used for action cells_\n   */\n  showOnHover: _propTypes.default.bool\n};\nEuiTableRowCell.propTypes = _objectSpread({\n  children: _propTypes.default.node,\n  className: _propTypes.default.string,\n  colSpan: _propTypes.default.number\n}, sharedPropTypes, {\n  /**\n   * Indicates if the column is dedicated to icon-only actions (currently affects mobile only)\n   */\n  hasActions: _propTypes.default.bool,\n\n  /**\n   * Indicates if the column is dedicated as the expandable row toggle\n   */\n  isExpander: _propTypes.default.bool,\n\n  /**\n   * _DEPRECATED: use `mobileOptions.header`_\n   * The column's header title for use in mobile view (will be added as a data-attr)\n   */\n  header: _propTypes.default.string,\n\n  /**\n   * _DEPRECATED: use `mobileOptions.only = true & mobileOptions.header = false`_\n   * Indicates if the column was created to be the row's heading in mobile view.\n   * It won't display column's header inline and it the column will be hidden at larger screens)\n   */\n  isMobileHeader: _propTypes.default.bool,\n\n  /**\n   * _DEPRECATED: use `mobileOptions.show = false`_\n   * Indicates if the column should not show for mobile users\n   * (typically hidden because a custom mobile header utilizes the column's contents)\n   */\n  hideForMobile: _propTypes.default.bool,\n\n  /**\n   * _DEPRECATED: use `mobileOptions.fullWidth`_\n   * Allocates 100% of the width of the container in mobile view\n   * (typically cells are contained to 50%)\n   */\n  isMobileFullWidth: _propTypes.default.bool,\n\n  /**\n   * Mobile options for displaying differently at small screens\n   */\n  mobileOptions: _propTypes.default.shape(_objectSpread({\n    /**\n     * If false, will not render the cell at all for mobile\n     */\n    show: _propTypes.default.bool,\n\n    /**\n     * Only show for mobile? If true, will not render the column at all for desktop\n     */\n    only: _propTypes.default.bool,\n\n    /**\n     * Custom render/children if different from desktop\n     */\n    render: _propTypes.default.node,\n\n    /**\n     * The column's header for use in mobile view (automatically passed down when using `EuiBasicTable`).\n     * Or pass `false` to not show a header at all.\n     */\n    header: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.bool]),\n\n    /**\n     * Increase text size compared to rest of cells\n     */\n    enlarge: _propTypes.default.bool,\n\n    /**\n     * Allocates 100% of the width of the container in mobile view\n     * (typically cells are contained to 50%)\n     */\n    fullWidth: _propTypes.default.bool\n  }, sharedPropTypes))\n});\nEuiTableRowCell.defaultProps = {\n  align: _services.LEFT_ALIGNMENT,\n  textOnly: true,\n  mobileOptions: {\n    show: true\n  }\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/table/table_row_cell.js"],"names":["ALIGNMENT","LEFT_ALIGNMENT","RIGHT_ALIGNMENT","CENTER_ALIGNMENT","EuiTableRowCell","align","children","className","truncateText","showOnHover","textOnly","colSpan","hasActions","isExpander","mobileOptions","header","hideForMobile","isMobileHeader","isMobileFullWidth","rest","cellClasses","only","enlarge","fullWidth","contentClasses","mobileContentClasses","childClasses","euiTableCellContent__text","euiTableCellContent__hoverItem","modifyChildren","modifiedChildren","React","isValidElement","Children","map","child","cloneElement","props","childrenNode","hideForMobileClasses","showForMobileClasses","cellRender","show","render","sharedPropTypes","PropTypes","oneOf","bool","propTypes","node","string","number","shape","oneOfType","defaultProps"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport {\n  LEFT_ALIGNMENT,\n  RIGHT_ALIGNMENT,\n  CENTER_ALIGNMENT,\n} from '../../services';\n\nconst ALIGNMENT = [LEFT_ALIGNMENT, RIGHT_ALIGNMENT, CENTER_ALIGNMENT];\n\nexport const EuiTableRowCell = ({\n  align,\n  children,\n  className,\n  truncateText,\n  showOnHover,\n  textOnly,\n  colSpan,\n  hasActions,\n  isExpander,\n  mobileOptions,\n  // Soon to be deprecated for {...mobileOptions}\n  header,\n  hideForMobile,\n  isMobileHeader,\n  isMobileFullWidth,\n  ...rest\n}) => {\n  const cellClasses = classNames('euiTableRowCell', {\n    'euiTableRowCell--hasActions': hasActions,\n    'euiTableRowCell--isExpander': isExpander,\n    'euiTableRowCell--hideForDesktop': mobileOptions.only || isMobileHeader,\n    'euiTableRowCell--enlargeForMobile':\n      mobileOptions.enlarge || isMobileHeader,\n    'euiTableRowCell--isMobileFullWidth':\n      mobileOptions.fullWidth || isMobileFullWidth || isMobileHeader,\n  });\n\n  const contentClasses = classNames('euiTableCellContent', className, {\n    'euiTableCellContent--alignRight': align === RIGHT_ALIGNMENT,\n    'euiTableCellContent--alignCenter': align === CENTER_ALIGNMENT,\n    'euiTableCellContent--showOnHover': showOnHover,\n    'euiTableCellContent--truncateText': truncateText,\n    // We're doing this rigamarole instead of creating `euiTableCellContent--textOnly` for BWC\n    // purposes for the time-being.\n    'euiTableCellContent--overflowingContent': textOnly !== true,\n  });\n\n  const mobileContentClasses = classNames('euiTableCellContent', className, {\n    'euiTableCellContent--alignRight':\n      mobileOptions.align === RIGHT_ALIGNMENT || align === RIGHT_ALIGNMENT,\n    'euiTableCellContent--alignCenter':\n      mobileOptions.align === CENTER_ALIGNMENT || align === RIGHT_ALIGNMENT,\n    'euiTableCellContent--showOnHover':\n      mobileOptions.showOnHover || showOnHover,\n    'euiTableCellContent--truncateText':\n      mobileOptions.truncateText || truncateText,\n    // We're doing this rigamarole instead of creating `euiTableCellContent--textOnly` for BWC\n    // purposes for the time-being.\n    'euiTableCellContent--overflowingContent':\n      mobileOptions.textOnly !== true || textOnly !== true,\n  });\n\n  const childClasses = classNames({\n    euiTableCellContent__text: textOnly === true,\n    euiTableCellContent__hoverItem: showOnHover,\n  });\n\n  function modifyChildren(children) {\n    let modifiedChildren = children;\n\n    if (textOnly === true) {\n      modifiedChildren = <span className={childClasses}>{children}</span>;\n    } else if (React.isValidElement(children)) {\n      modifiedChildren = React.Children.map(children, child =>\n        React.cloneElement(child, {\n          className: classNames(child.props.className, childClasses),\n        })\n      );\n    }\n\n    return modifiedChildren;\n  }\n\n  const childrenNode = modifyChildren(children);\n\n  const hideForMobileClasses = 'euiTableRowCell--hideForMobile';\n  const showForMobileClasses = 'euiTableRowCell--hideForDesktop';\n\n  let cellRender;\n\n  if (mobileOptions.show === false || hideForMobile) {\n    cellRender = (\n      <td\n        className={`${cellClasses} ${hideForMobileClasses}`}\n        colSpan={colSpan}\n        {...rest}>\n        <div className={contentClasses}>{childrenNode}</div>\n      </td>\n    );\n  } else {\n    cellRender = (\n      <td className={cellClasses} colSpan={colSpan} {...rest}>\n        {/* Mobile-only header */}\n        {(mobileOptions.header || header) && !isMobileHeader && (\n          <div\n            className={`euiTableRowCell__mobileHeader ${showForMobileClasses}`}>\n            {mobileOptions.header || header}\n          </div>\n        )}\n\n        {/* Content depending on mobile render existing */}\n        {mobileOptions.render ? (\n          <Fragment>\n            <div className={`${mobileContentClasses} ${showForMobileClasses}`}>\n              {modifyChildren(mobileOptions.render)}\n            </div>\n            <div className={`${contentClasses} ${hideForMobileClasses}`}>\n              {childrenNode}\n            </div>\n          </Fragment>\n        ) : (\n          <div className={contentClasses}>{childrenNode}</div>\n        )}\n      </td>\n    );\n  }\n\n  return cellRender;\n};\n\nconst sharedPropTypes = {\n  /**\n   * Horizontal alignment of the text in the cell\n   */\n  align: PropTypes.oneOf(ALIGNMENT),\n  /**\n   * Don't allow line breaks within cells\n   */\n  truncateText: PropTypes.bool,\n  /**\n   * Setting `textOnly` to `false` will break words unnecessarily on FF and IE.\n   * To combat this problem on FF, wrap contents with the css utility `.eui-textBreakWord`.\n   */\n  textOnly: PropTypes.bool,\n  /**\n   * _Should only be used for action cells_\n   */\n  showOnHover: PropTypes.bool,\n};\n\nEuiTableRowCell.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  colSpan: PropTypes.number,\n  ...sharedPropTypes,\n  /**\n   * Indicates if the column is dedicated to icon-only actions (currently affects mobile only)\n   */\n  hasActions: PropTypes.bool,\n  /**\n   * Indicates if the column is dedicated as the expandable row toggle\n   */\n  isExpander: PropTypes.bool,\n  /**\n   * _DEPRECATED: use `mobileOptions.header`_\n   * The column's header title for use in mobile view (will be added as a data-attr)\n   */\n  header: PropTypes.string,\n  /**\n   * _DEPRECATED: use `mobileOptions.only = true & mobileOptions.header = false`_\n   * Indicates if the column was created to be the row's heading in mobile view.\n   * It won't display column's header inline and it the column will be hidden at larger screens)\n   */\n  isMobileHeader: PropTypes.bool,\n  /**\n   * _DEPRECATED: use `mobileOptions.show = false`_\n   * Indicates if the column should not show for mobile users\n   * (typically hidden because a custom mobile header utilizes the column's contents)\n   */\n  hideForMobile: PropTypes.bool,\n  /**\n   * _DEPRECATED: use `mobileOptions.fullWidth`_\n   * Allocates 100% of the width of the container in mobile view\n   * (typically cells are contained to 50%)\n   */\n  isMobileFullWidth: PropTypes.bool,\n  /**\n   * Mobile options for displaying differently at small screens\n   */\n  mobileOptions: PropTypes.shape({\n    /**\n     * If false, will not render the cell at all for mobile\n     */\n    show: PropTypes.bool,\n    /**\n     * Only show for mobile? If true, will not render the column at all for desktop\n     */\n    only: PropTypes.bool,\n    /**\n     * Custom render/children if different from desktop\n     */\n    render: PropTypes.node,\n    /**\n     * The column's header for use in mobile view (automatically passed down when using `EuiBasicTable`).\n     * Or pass `false` to not show a header at all.\n     */\n    header: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n    /**\n     * Increase text size compared to rest of cells\n     */\n    enlarge: PropTypes.bool,\n    /**\n     * Allocates 100% of the width of the container in mobile view\n     * (typically cells are contained to 50%)\n     */\n    fullWidth: PropTypes.bool,\n    ...sharedPropTypes,\n  }),\n};\n\nEuiTableRowCell.defaultProps = {\n  align: LEFT_ALIGNMENT,\n  textOnly: true,\n  mobileOptions: {\n    show: true,\n  },\n};\n"]}]}