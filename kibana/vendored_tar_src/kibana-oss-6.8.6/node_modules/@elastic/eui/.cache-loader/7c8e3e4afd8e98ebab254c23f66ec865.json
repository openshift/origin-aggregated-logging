{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src-docs/src/views/tables/basic/basic_section.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src-docs/src/views/tables/basic/basic_section.js","mtime":1565204169550},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.section = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _components = require(\"../../../components\");\n\nvar _services = require(\"../../../services\");\n\nvar _components2 = require(\"../../../../../src/components\");\n\nvar _props_info = require(\"./props_info\");\n\nvar _basic = require(\"./basic\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar source = require('!!raw-loader!./basic');\n\nvar html = (0, _services.renderToHtml)(_basic.Table);\nvar section = {\n  title: 'A simple BasicTable',\n  source: [{\n    type: _components.GuideSectionTypes.JS,\n    code: source\n  }, {\n    type: _components.GuideSectionTypes.HTML,\n    code: html\n  }],\n  text: _react.default.createElement(\"div\", null, _react.default.createElement(\"p\", null, _react.default.createElement(_components2.EuiCode, null, \"EuiBasicTable\"), \" is an opinionated high level component that standardizes both display and injection. At its most simple it only accepts two properties:\"), _react.default.createElement(\"ul\", null, _react.default.createElement(\"li\", null, _react.default.createElement(_components2.EuiCode, null, \"items\"), \" are an array of objects that should be displayed in the table; one item per row. The exact item data that will be rendered in each cell in these rows is determined by the\", ' ', _react.default.createElement(_components2.EuiCode, null, \"columns\"), \" property. You can define\", ' ', _react.default.createElement(_components2.EuiCode, null, \"rowProps\"), \" and \", _react.default.createElement(_components2.EuiCode, null, \"cellProps\"), \" props which can either be objects or functions that return objects. The returned objects will be applied as props to the rendered rows and row cells, respectively.\"), _react.default.createElement(\"li\", null, _react.default.createElement(_components2.EuiCode, null, \"columns\"), \" defines what columns the table has and how to extract item data to display each cell in each row.\")), _react.default.createElement(\"p\", null, \"This example shows the most basic form of the\", ' ', _react.default.createElement(_components2.EuiCode, null, \"EuiBasicTable\"), \". It is configured with the required\", ' ', _react.default.createElement(_components2.EuiCode, null, \"items\"), \" and \", _react.default.createElement(_components2.EuiCode, null, \"columns\"), \" properties. It shows how each column defines the data it needs to display per item. Some columns display the value as is (e.g. \", _react.default.createElement(_components2.EuiCode, null, \"firstName\"), ' ', \"and \", _react.default.createElement(_components2.EuiCode, null, \"lastName\"), \" fields for the user column). Other columns customize the display of the data before it is injected. This customization can be done in two (non-mutual exclusive) ways:\"), _react.default.createElement(\"ul\", null, _react.default.createElement(\"li\", null, \"Provide a hint about the type of data (e.g. the \\\"Date of Birth\\\" column indicates that the data it shows is of type\", ' ', _react.default.createElement(_components2.EuiCode, null, \"date\"), \"). Providing data type hints will cause built-in display components to be adjusted (e.g. numbers will become right aligned, just like Excel).\"), _react.default.createElement(\"li\", null, \"Provide a \", _react.default.createElement(_components2.EuiCode, null, \"render\"), \" function that given the value (and the item as a second argument) returns the React node that should be displayed as the content of the cell. This can be as simple as formatting values (e.g. the \\\"Date of Birth\\\" column) to utilizing more complex React components (e.g. the \\\"Online\\\", \\\"Github\\\", and \\\"Nationality\\\" columns as seen below).\", _react.default.createElement(\"br\", null), _react.default.createElement(\"strong\", null, \"Note:\"), \" the basic table will treat any cells that use a\", ' ', _react.default.createElement(_components2.EuiCode, null, \"render\"), \" function as being\", ' ', _react.default.createElement(_components2.EuiCode, null, \"textOnly: false\"), \". This may cause unnecessary word breaks. Apply \", _react.default.createElement(_components2.EuiCode, null, \"textOnly: true\"), \" to ensure it breaks properly.\"))),\n  props: _props_info.propsInfo,\n  demo: _react.default.createElement(_basic.Table, null)\n};\nexports.section = section;",{"version":3,"sources":["/Users/chanderprall/projects/eui/src-docs/src/views/tables/basic/basic_section.js"],"names":["source","require","html","Table","section","title","type","GuideSectionTypes","JS","code","HTML","text","props","propsInfo","demo"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,sBAAD,CAAtB;;AACA,IAAMC,IAAI,GAAG,4BAAaC,YAAb,CAAb;AAEO,IAAMC,OAAO,GAAG;AACrBC,EAAAA,KAAK,EAAE,qBADc;AAErBL,EAAAA,MAAM,EAAE,CACN;AACEM,IAAAA,IAAI,EAAEC,8BAAkBC,EAD1B;AAEEC,IAAAA,IAAI,EAAET;AAFR,GADM,EAKN;AACEM,IAAAA,IAAI,EAAEC,8BAAkBG,IAD1B;AAEED,IAAAA,IAAI,EAAEP;AAFR,GALM,CAFa;AAYrBS,EAAAA,IAAI,EACF,0CACE,wCACE,6BAAC,oBAAD,wBADF,6IADF,EAME,yCACE,yCACE,6BAAC,oBAAD,gBADF,iLAGmE,GAHnE,EAIE,6BAAC,oBAAD,kBAJF,+BAIsD,GAJtD,EAKE,6BAAC,oBAAD,mBALF,WAKkC,6BAAC,oBAAD,oBALlC,yKADF,EAWE,yCACE,6BAAC,oBAAD,kBADF,uGAXF,CANF,EAsBE,yFACgD,GADhD,EAEE,6BAAC,oBAAD,wBAFF,0CAEuE,GAFvE,EAGE,6BAAC,oBAAD,gBAHF,WAG+B,6BAAC,oBAAD,kBAH/B,sIAK6C,6BAAC,oBAAD,oBAL7C,EAK0E,GAL1E,UAMM,6BAAC,oBAAD,mBANN,4KAtBF,EAgCE,yCACE,iKAEiE,GAFjE,EAGE,6BAAC,oBAAD,eAHF,kJADF,EAQE,uDACY,6BAAC,oBAAD,iBADZ,4VAQE,wCARF,EASE,qDATF,sDASyE,GATzE,EAUE,6BAAC,oBAAD,iBAVF,wBAU8C,GAV9C,EAWE,6BAAC,oBAAD,0BAXF,sDAYgB,6BAAC,oBAAD,yBAZhB,mCARF,CAhCF,CAbmB;AAuErBC,EAAAA,KAAK,EAAEC,qBAvEc;AAwErBC,EAAAA,IAAI,EAAE,6BAAC,YAAD;AAxEe,CAAhB","sourcesContent":["import React from 'react';\nimport { GuideSectionTypes } from '../../../components';\nimport { renderToHtml } from '../../../services';\nimport { EuiCode } from '../../../../../src/components';\nimport { propsInfo } from './props_info';\n\nimport { Table } from './basic';\n\nconst source = require('!!raw-loader!./basic');\nconst html = renderToHtml(Table);\n\nexport const section = {\n  title: 'A simple BasicTable',\n  source: [\n    {\n      type: GuideSectionTypes.JS,\n      code: source,\n    },\n    {\n      type: GuideSectionTypes.HTML,\n      code: html,\n    },\n  ],\n  text: (\n    <div>\n      <p>\n        <EuiCode>EuiBasicTable</EuiCode> is an opinionated high level component\n        that standardizes both display and injection. At its most simple it only\n        accepts two properties:\n      </p>\n      <ul>\n        <li>\n          <EuiCode>items</EuiCode> are an array of objects that should be\n          displayed in the table; one item per row. The exact item data that\n          will be rendered in each cell in these rows is determined by the{' '}\n          <EuiCode>columns</EuiCode> property. You can define{' '}\n          <EuiCode>rowProps</EuiCode> and <EuiCode>cellProps</EuiCode> props\n          which can either be objects or functions that return objects. The\n          returned objects will be applied as props to the rendered rows and row\n          cells, respectively.\n        </li>\n        <li>\n          <EuiCode>columns</EuiCode> defines what columns the table has and how\n          to extract item data to display each cell in each row.\n        </li>\n      </ul>\n      <p>\n        This example shows the most basic form of the{' '}\n        <EuiCode>EuiBasicTable</EuiCode>. It is configured with the required{' '}\n        <EuiCode>items</EuiCode> and <EuiCode>columns</EuiCode> properties. It\n        shows how each column defines the data it needs to display per item.\n        Some columns display the value as is (e.g. <EuiCode>firstName</EuiCode>{' '}\n        and <EuiCode>lastName</EuiCode> fields for the user column). Other\n        columns customize the display of the data before it is injected. This\n        customization can be done in two (non-mutual exclusive) ways:\n      </p>\n      <ul>\n        <li>\n          Provide a hint about the type of data (e.g. the &quot;Date of\n          Birth&quot; column indicates that the data it shows is of type{' '}\n          <EuiCode>date</EuiCode>). Providing data type hints will cause\n          built-in display components to be adjusted (e.g. numbers will become\n          right aligned, just like Excel).\n        </li>\n        <li>\n          Provide a <EuiCode>render</EuiCode> function that given the value (and\n          the item as a second argument) returns the React node that should be\n          displayed as the content of the cell. This can be as simple as\n          formatting values (e.g. the &quot;Date of Birth&quot; column) to\n          utilizing more complex React components (e.g. the &quot;Online&quot;,\n          &quot;Github&quot;, and &quot;Nationality&quot; columns as seen\n          below).\n          <br />\n          <strong>Note:</strong> the basic table will treat any cells that use a{' '}\n          <EuiCode>render</EuiCode> function as being{' '}\n          <EuiCode>textOnly: false</EuiCode>. This may cause unnecessary word\n          breaks. Apply <EuiCode>textOnly: true</EuiCode> to ensure it breaks\n          properly.\n        </li>\n      </ul>\n    </div>\n  ),\n  props: propsInfo,\n  demo: <Table />,\n};\n"]}]}