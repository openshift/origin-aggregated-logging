{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src-docs/src/views/badge/badge_example.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src-docs/src/views/badge/badge_example.js","mtime":1565204169431},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BadgeExample = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactRouter = require(\"react-router\");\n\nvar _services = require(\"../../services\");\n\nvar _components = require(\"../../components\");\n\nvar _components2 = require(\"../../../../src/components\");\n\nvar _badge = _interopRequireDefault(require(\"./badge\"));\n\nvar _badge_with_icon = _interopRequireDefault(require(\"./badge_with_icon\"));\n\nvar _badge_button = _interopRequireDefault(require(\"./badge_button\"));\n\nvar _beta_badge = _interopRequireDefault(require(\"./beta_badge\"));\n\nvar _notification_badge = _interopRequireDefault(require(\"./notification_badge\"));\n\nvar _badge_truncate = _interopRequireDefault(require(\"./badge_truncate\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nvar badgeSource = require('!!raw-loader!./badge');\n\nvar badgeHtml = (0, _services.renderToHtml)(_badge.default);\n\nvar badgeWithIconSource = require('!!raw-loader!./badge_with_icon');\n\nvar badgeWithIconHtml = (0, _services.renderToHtml)(_badge_with_icon.default);\n\nvar badgeButtonSource = require('!!raw-loader!./badge_button');\n\nvar badgeButtonHtml = (0, _services.renderToHtml)(_badge_button.default);\n\nvar betaBadgeSource = require('!!raw-loader!./beta_badge');\n\nvar betaBadgeHtml = (0, _services.renderToHtml)(_beta_badge.default);\n\nvar notificationBadgeSource = require('!!raw-loader!./notification_badge');\n\nvar notificationBadgeHtml = (0, _services.renderToHtml)(_notification_badge.default);\n\nvar badgeTruncateSource = require('!!raw-loader!./badge_truncate');\n\nvar badgeTruncateHtml = (0, _services.renderToHtml)(_badge_truncate.default);\nvar BadgeExample = {\n  title: 'Badge',\n  sections: [{\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: badgeSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: badgeHtml\n    }],\n    text: _react.default.createElement(\"p\", null, \"Badges are used to focus on important bits of information. Although they will automatically space themselves if you use them in a repetitive fashion it is good form to wrap them using a\", ' ', _react.default.createElement(_components2.EuiCode, null, \"FlexGroup\"), \" so that they will wrap when width is constrained (as is done artificially in the example below).\"),\n    props: {\n      EuiBadge: _components2.EuiBadge\n    },\n    demo: _react.default.createElement(_badge.default, null)\n  }, {\n    title: 'Badge with Icon',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: badgeWithIconSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: badgeWithIconHtml\n    }],\n    text: _react.default.createElement(\"p\", null, \"Badges can use icons on the left and right (default) sides.\"),\n    demo: _react.default.createElement(_badge_with_icon.default, null)\n  }, {\n    title: 'Badge with onClick events',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: badgeButtonSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: badgeButtonHtml\n    }],\n    text: _react.default.createElement(\"div\", null, _react.default.createElement(\"p\", null, \"Badges can have onClick events applied to the badge itself or the icon within the badge. The later option is useful for when you might use badges in other components (like a tag system with autocomplete where you need close events).\"), _react.default.createElement(_components2.EuiCallOut, {\n      title: \"onClick with iconOnClick\"\n    }, _react.default.createElement(\"p\", null, \"When providing both these click handlers, EuiBadge must alter the contents so that it does not contain nested button tags. Please make note that if you provide props other than those explicit to EuiBadge, they will always be applied to the main\", ' ', _react.default.createElement(_components2.EuiCode, null, \"button\"), \" tag which may be inside of the outer most tag.\"))),\n    demo: _react.default.createElement(_badge_button.default, null)\n  }, {\n    title: 'Badge truncation',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: badgeTruncateSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: badgeTruncateHtml\n    }],\n    text: _react.default.createElement(_react.Fragment, null, _react.default.createElement(\"p\", null, \"Badges, like buttons, will only every be a single line of text. This means text will not wrap, but be truncated if the badge's width reaches that of its parent's.\"), _react.default.createElement(\"p\", null, \"For this reason, badges also auto-apply the inner text of the badge to the \", _react.default.createElement(_components2.EuiCode, null, \"title\"), \" attribute of the element to provide default browser tooltips with the full badge text.\")),\n    demo: _react.default.createElement(_badge_truncate.default, null)\n  }, {\n    title: 'Beta badge type',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: betaBadgeSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: betaBadgeHtml\n    }],\n    text: _react.default.createElement(\"div\", null, _react.default.createElement(\"p\", null, \"The \", _react.default.createElement(_components2.EuiCode, null, \"EuiBetaBadge\"), \" was created specifically to call out modules that are not in GA. Generally the labels used are \\\"Beta\\\" or \\\"Lab\\\". They require an extra\", ' ', _react.default.createElement(_components2.EuiCode, null, \"tooltipContent\"), \" to describe the purpose of the badge. You can pass an optional \", _react.default.createElement(_components2.EuiCode, null, \"title\"), \" prop to populate the tooltip title or html title attribute but by default it will use the \", _react.default.createElement(_components2.EuiCode, null, \"label\"), \".\"), _react.default.createElement(\"p\", null, \"If you pass in an \", _react.default.createElement(_components2.EuiCode, null, \"iconType\"), \", only the icon will be used in the badge itself and the label will be applied as the title. Only use an icon when attaching the beta badge to small components like the EuiKeyPadMenuItem.\"), _react.default.createElement(\"p\", null, \"They can also be used in conjunction with\", ' ', _react.default.createElement(_reactRouter.Link, {\n      to: \"/display/card\"\n    }, \"EuiCards\"), \" and\", ' ', _react.default.createElement(_reactRouter.Link, {\n      to: \"/navigation/key-pad-menu\"\n    }, \"EuiKeyPadMenuItems\"), \".\")),\n    props: {\n      EuiBetaBadge: _components2.EuiBetaBadge\n    },\n    demo: _react.default.createElement(_beta_badge.default, null)\n  }, {\n    title: 'Notification badge type',\n    source: [{\n      type: _components.GuideSectionTypes.JS,\n      code: notificationBadgeSource\n    }, {\n      type: _components.GuideSectionTypes.HTML,\n      code: notificationBadgeHtml\n    }],\n    text: _react.default.createElement(\"p\", null, \"Used to showcase the number of notifications, alerts or hidden selections. Typically used in\", ' ', _react.default.createElement(_reactRouter.Link, {\n      to: \"/layout/header\"\n    }, \"EuiHeader\"), \" or (eventually)\", ' ', _react.default.createElement(_reactRouter.Link, {\n      to: \"/forms/filter-group\"\n    }, \"EuiFilterButtons\"), \".\"),\n    props: {\n      EuiNotificationBadge: _components2.EuiNotificationBadge\n    },\n    demo: _react.default.createElement(_notification_badge.default, null)\n  }]\n};\nexports.BadgeExample = BadgeExample;",{"version":3,"sources":["/Users/chanderprall/projects/eui/src-docs/src/views/badge/badge_example.js"],"names":["badgeSource","require","badgeHtml","Badge","badgeWithIconSource","badgeWithIconHtml","BadgeWithIcon","badgeButtonSource","badgeButtonHtml","BadgeButton","betaBadgeSource","betaBadgeHtml","BetaBadge","notificationBadgeSource","notificationBadgeHtml","NotificationBadge","badgeTruncateSource","badgeTruncateHtml","BadgeTruncate","BadgeExample","title","sections","source","type","GuideSectionTypes","JS","code","HTML","text","props","EuiBadge","demo","EuiBetaBadge","EuiNotificationBadge"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\n\nimport { Link } from 'react-router';\n\nimport { renderToHtml } from '../../services';\n\nimport { GuideSectionTypes } from '../../components';\n\nimport {\n  EuiBadge,\n  EuiCode,\n  EuiBetaBadge,\n  EuiNotificationBadge,\n  EuiCallOut,\n} from '../../../../src/components';\n\nimport Badge from './badge';\nconst badgeSource = require('!!raw-loader!./badge');\nconst badgeHtml = renderToHtml(Badge);\n\nimport BadgeWithIcon from './badge_with_icon';\nconst badgeWithIconSource = require('!!raw-loader!./badge_with_icon');\nconst badgeWithIconHtml = renderToHtml(BadgeWithIcon);\n\nimport BadgeButton from './badge_button';\nconst badgeButtonSource = require('!!raw-loader!./badge_button');\nconst badgeButtonHtml = renderToHtml(BadgeButton);\n\nimport BetaBadge from './beta_badge';\nconst betaBadgeSource = require('!!raw-loader!./beta_badge');\nconst betaBadgeHtml = renderToHtml(BetaBadge);\n\nimport NotificationBadge from './notification_badge';\nconst notificationBadgeSource = require('!!raw-loader!./notification_badge');\nconst notificationBadgeHtml = renderToHtml(NotificationBadge);\n\nimport BadgeTruncate from './badge_truncate';\nconst badgeTruncateSource = require('!!raw-loader!./badge_truncate');\nconst badgeTruncateHtml = renderToHtml(BadgeTruncate);\n\nexport const BadgeExample = {\n  title: 'Badge',\n  sections: [\n    {\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: badgeSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: badgeHtml,\n        },\n      ],\n      text: (\n        <p>\n          Badges are used to focus on important bits of information. Although\n          they will automatically space themselves if you use them in a\n          repetitive fashion it is good form to wrap them using a{' '}\n          <EuiCode>FlexGroup</EuiCode> so that they will wrap when width is\n          constrained (as is done artificially in the example below).\n        </p>\n      ),\n      props: { EuiBadge },\n      demo: <Badge />,\n    },\n    {\n      title: 'Badge with Icon',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: badgeWithIconSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: badgeWithIconHtml,\n        },\n      ],\n      text: <p>Badges can use icons on the left and right (default) sides.</p>,\n      demo: <BadgeWithIcon />,\n    },\n    {\n      title: 'Badge with onClick events',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: badgeButtonSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: badgeButtonHtml,\n        },\n      ],\n      text: (\n        <div>\n          <p>\n            Badges can have onClick events applied to the badge itself or the\n            icon within the badge. The later option is useful for when you might\n            use badges in other components (like a tag system with autocomplete\n            where you need close events).\n          </p>\n          <EuiCallOut title=\"onClick with iconOnClick\">\n            <p>\n              When providing both these click handlers, EuiBadge must alter the\n              contents so that it does not contain nested button tags. Please\n              make note that if you provide props other than those explicit to\n              EuiBadge, they will always be applied to the main{' '}\n              <EuiCode>button</EuiCode> tag which may be inside of the outer\n              most tag.\n            </p>\n          </EuiCallOut>\n        </div>\n      ),\n      demo: <BadgeButton />,\n    },\n    {\n      title: 'Badge truncation',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: badgeTruncateSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: badgeTruncateHtml,\n        },\n      ],\n      text: (\n        <Fragment>\n          <p>\n            Badges, like buttons, will only every be a single line of text. This\n            means text will not wrap, but be truncated if the badge&apos;s width\n            reaches that of its parent&apos;s.\n          </p>\n          <p>\n            For this reason, badges also auto-apply the inner text of the badge\n            to the <EuiCode>title</EuiCode> attribute of the element to provide\n            default browser tooltips with the full badge text.\n          </p>\n        </Fragment>\n      ),\n      demo: <BadgeTruncate />,\n    },\n    {\n      title: 'Beta badge type',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: betaBadgeSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: betaBadgeHtml,\n        },\n      ],\n      text: (\n        <div>\n          <p>\n            The <EuiCode>EuiBetaBadge</EuiCode> was created specifically to call\n            out modules that are not in GA. Generally the labels used are\n            &quot;Beta&quot; or &quot;Lab&quot;. They require an extra{' '}\n            <EuiCode>tooltipContent</EuiCode> to describe the purpose of the\n            badge. You can pass an optional <EuiCode>title</EuiCode> prop to\n            populate the tooltip title or html title attribute but by default it\n            will use the <EuiCode>label</EuiCode>.\n          </p>\n          <p>\n            If you pass in an <EuiCode>iconType</EuiCode>, only the icon will be\n            used in the badge itself and the label will be applied as the title.\n            Only use an icon when attaching the beta badge to small components\n            like the EuiKeyPadMenuItem.\n          </p>\n          <p>\n            They can also be used in conjunction with{' '}\n            <Link to=\"/display/card\">EuiCards</Link> and{' '}\n            <Link to=\"/navigation/key-pad-menu\">EuiKeyPadMenuItems</Link>.\n          </p>\n        </div>\n      ),\n      props: { EuiBetaBadge },\n      demo: <BetaBadge />,\n    },\n    {\n      title: 'Notification badge type',\n      source: [\n        {\n          type: GuideSectionTypes.JS,\n          code: notificationBadgeSource,\n        },\n        {\n          type: GuideSectionTypes.HTML,\n          code: notificationBadgeHtml,\n        },\n      ],\n      text: (\n        <p>\n          Used to showcase the number of notifications, alerts or hidden\n          selections. Typically used in{' '}\n          <Link to=\"/layout/header\">EuiHeader</Link> or (eventually){' '}\n          <Link to=\"/forms/filter-group\">EuiFilterButtons</Link>.\n        </p>\n      ),\n      props: { EuiNotificationBadge },\n      demo: <NotificationBadge />,\n    },\n  ],\n};\n"]}]}