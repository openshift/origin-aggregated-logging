{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/datagrid/data_grid.tsx","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/datagrid/data_grid.tsx","mtime":1567545264628},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EuiDataGrid = void 0;\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.object.assign\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _data_grid_header_row = require(\"./data_grid_header_row\");\n\nvar _button = require(\"../button\");\n\nvar _services = require(\"../../services\");\n\nvar _data_grid_body = require(\"./data_grid_body\");\n\nvar _column_selector = require(\"./column_selector\");\n\nvar _style_selector = require(\"./style_selector\");\n\nvar _table_pagination = require(\"../table/table_pagination\");\n\nvar _focus_trap = require(\"../focus_trap\");\n\nvar _resize_observer = require(\"../observer/resize_observer\");\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n// Each gridStyle object above sets a specific CSS select to .euiGrid\nvar fontSizesToClassMap = {\n  s: 'euiDataGrid--fontSizeSmall',\n  m: '',\n  l: 'euiDataGrid--fontSizeLarge'\n};\nvar headerToClassMap = {\n  shade: 'euiDataGrid--headerShade',\n  underline: 'euiDataGrid--headerUnderline'\n};\nvar rowHoverToClassMap = {\n  highlight: 'euiDataGrid--rowHoverHighlight',\n  none: ''\n};\nvar bordersToClassMap = {\n  all: 'euiDataGrid--bordersAll',\n  horizontal: 'euiDataGrid--bordersHorizontal',\n  none: 'euiDataGrid--bordersNone'\n};\nvar cellPaddingsToClassMap = {\n  s: 'euiDataGrid--paddingSmall',\n  m: '',\n  l: 'euiDataGrid--paddingLarge'\n};\nvar ORIGIN = [0, 0];\n\nfunction computeVisibleRows(props) {\n  var pagination = props.pagination,\n      rowCount = props.rowCount;\n  var startRow = pagination ? pagination.pageIndex * pagination.pageSize : 0;\n  var endRow = pagination ? (pagination.pageIndex + 1) * pagination.pageSize : rowCount;\n  endRow = Math.min(endRow, rowCount);\n  return endRow - startRow;\n}\n\nfunction renderPagination(props) {\n  var pagination = props.pagination;\n\n  if (pagination == null) {\n    return null;\n  }\n\n  var pageIndex = pagination.pageIndex,\n      pageSize = pagination.pageSize,\n      pageSizeOptions = pagination.pageSizeOptions,\n      onChangePage = pagination.onChangePage,\n      onChangeItemsPerPage = pagination.onChangeItemsPerPage;\n  var pageCount = Math.ceil(props.rowCount / pageSize);\n  return _react.default.createElement(\"div\", {\n    className: \"euiDataGrid__pagination\"\n  }, _react.default.createElement(_table_pagination.EuiTablePagination, {\n    activePage: pageIndex,\n    itemsPerPage: pageSize,\n    itemsPerPageOptions: pageSizeOptions,\n    pageCount: pageCount,\n    onChangePage: onChangePage,\n    onChangeItemsPerPage: onChangeItemsPerPage\n  }));\n}\n\nvar EuiDataGrid = function EuiDataGrid(props) {\n  var _useState = (0, _react.useState)(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isFullScreen = _useState2[0],\n      setIsFullScreen = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      showGridControls = _useState4[0],\n      setShowGridControls = _useState4[1];\n\n  var _useState5 = (0, _react.useState)(ORIGIN),\n      _useState6 = _slicedToArray(_useState5, 2),\n      focusedCell = _useState6[0],\n      setFocusedCell = _useState6[1];\n\n  var containerRef = (0, _react.useRef)(null);\n\n  var _useState7 = (0, _react.useState)((0, _services.htmlIdGenerator)()()),\n      _useState8 = _slicedToArray(_useState7, 1),\n      interactiveCellId = _useState8[0];\n\n  var _useState9 = (0, _react.useState)({}),\n      _useState10 = _slicedToArray(_useState9, 2),\n      columnWidths = _useState10[0],\n      setColumnWidths = _useState10[1];\n\n  var setColumnWidth = function setColumnWidth(columnId, width) {\n    setColumnWidths(_objectSpread({}, columnWidths, _defineProperty({}, columnId, width)));\n  };\n\n  (0, _react.useEffect)(function () {\n    if (containerRef.current != null) {\n      var gridWidth = containerRef.current.clientWidth;\n      var columnWidth = Math.max(gridWidth / props.columns.length, 100);\n\n      var _columnWidths = props.columns.reduce(function (columnWidths, column) {\n        columnWidths[column.id] = columnWidth;\n        return columnWidths;\n      }, {});\n\n      setColumnWidths(_columnWidths);\n    } // @TODO: come back to this hook lifecycle\n\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var onResize = function onResize(_ref) {\n    var width = _ref.width;\n    setShowGridControls(width > 480);\n  };\n\n  var _useState11 = (0, _react.useState)(true),\n      _useState12 = _slicedToArray(_useState11, 2),\n      isGridNavigationEnabled = _useState12[0],\n      setIsGridNavigationEnabled = _useState12[1];\n\n  var isInteractiveCell = function isInteractiveCell(element) {\n    if (element.getAttribute('role') !== 'gridcell') {\n      return false;\n    }\n\n    return Boolean(element.querySelector(\"[\".concat(_utils.CELL_CONTENTS_ATTR, \"=\\\"true\\\"]\")));\n  };\n\n  var handleGridKeyDown = function handleGridKeyDown(e) {\n    switch (e.keyCode) {\n      case _services.keyCodes.ESCAPE:\n        e.preventDefault();\n        setIsFullScreen(false);\n        break;\n    }\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    var colCount = props.columns.length - 1;\n\n    var _focusedCell = _slicedToArray(focusedCell, 2),\n        x = _focusedCell[0],\n        y = _focusedCell[1];\n\n    var rowCount = computeVisibleRows(props);\n    var keyCode = event.keyCode,\n        target = event.target;\n\n    if (target instanceof HTMLElement && isInteractiveCell(target) && isGridNavigationEnabled && (keyCode === _services.keyCodes.ENTER || keyCode === _services.keyCodes.F2)) {\n      setIsGridNavigationEnabled(false);\n    } else if (!isGridNavigationEnabled && (keyCode === _services.keyCodes.ESCAPE || keyCode === _services.keyCodes.F2)) {\n      setIsGridNavigationEnabled(true);\n    }\n\n    if (isGridNavigationEnabled) {\n      switch (keyCode) {\n        case _services.keyCodes.DOWN:\n          if (y < rowCount) {\n            event.preventDefault();\n            setFocusedCell([x, y + 1]);\n          }\n\n          break;\n\n        case _services.keyCodes.LEFT:\n          if (x > 0) {\n            event.preventDefault();\n            setFocusedCell([x - 1, y]);\n          }\n\n          break;\n\n        case _services.keyCodes.UP:\n          // TODO sort out when a user can arrow up into the column headers\n          if (y > 0) {\n            event.preventDefault();\n            setFocusedCell([x, y - 1]);\n          }\n\n          break;\n\n        case _services.keyCodes.RIGHT:\n          if (x < colCount) {\n            event.preventDefault();\n            setFocusedCell([x + 1, y]);\n          }\n\n          break;\n      }\n    }\n  };\n\n  var columns = props.columns,\n      rowCount = props.rowCount,\n      renderCellValue = props.renderCellValue,\n      className = props.className,\n      _props$gridStyle = props.gridStyle,\n      gridStyle = _props$gridStyle === void 0 ? _style_selector.startingStyles : _props$gridStyle,\n      pagination = props.pagination,\n      rest = _objectWithoutProperties(props, [\"columns\", \"rowCount\", \"renderCellValue\", \"className\", \"gridStyle\", \"pagination\"]);\n\n  var _useColumnSelector = (0, _column_selector.useColumnSelector)(columns),\n      _useColumnSelector2 = _slicedToArray(_useColumnSelector, 2),\n      ColumnSelector = _useColumnSelector2[0],\n      visibleColumns = _useColumnSelector2[1];\n\n  var _useStyleSelector = (0, _style_selector.useStyleSelector)(),\n      _useStyleSelector2 = _slicedToArray(_useStyleSelector, 3),\n      StyleSelector = _useStyleSelector2[0],\n      gridStyles = _useStyleSelector2[1],\n      setGridStyles = _useStyleSelector2[2];\n\n  (0, _react.useEffect)(function () {\n    if (gridStyle) {\n      var oldStyles = gridStyles;\n      /*eslint-disable */\n\n      var mergedStyle = Object.assign(\n      /*eslint-enable */\n      {}, oldStyles, // @ts-ignore\n      gridStyle);\n      setGridStyles(mergedStyle);\n    } else {\n      setGridStyles(_style_selector.startingStyles);\n    } // @TODO: come back to this hook lifecycle\n\n  }, [gridStyle]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var classes = (0, _classnames.default)('euiDataGrid', fontSizesToClassMap[gridStyles.fontSize], bordersToClassMap[gridStyles.border], headerToClassMap[gridStyles.header], rowHoverToClassMap[gridStyles.rowHover], cellPaddingsToClassMap[gridStyles.cellPadding], {\n    'euiDataGrid--stripes': gridStyles.stripes\n  }, {\n    'euiDataGrid--fullScreen': isFullScreen\n  }, className); // These grid controls will only show when there is room. Check the resize observer callback\n\n  var gridControls = _react.default.createElement(_react.Fragment, null, _react.default.createElement(ColumnSelector, null), _react.default.createElement(StyleSelector, null)); // When data grid is full screen, we add a class to the body to remove the extra scrollbar\n\n\n  if (isFullScreen) {\n    document.body.classList.add('euiDataGrid__restrictBody');\n  } else {\n    document.body.classList.remove('euiDataGrid__restrictBody');\n  }\n\n  var onCellFocus = (0, _react.useCallback)(setFocusedCell, [setFocusedCell]);\n  return _react.default.createElement(_focus_trap.EuiFocusTrap, {\n    disabled: !isFullScreen,\n    style: {\n      height: '100%'\n    }\n  }, _react.default.createElement(\"div\", {\n    className: classes,\n    onKeyDown: handleGridKeyDown,\n    ref: containerRef\n  }, _react.default.createElement(\"div\", {\n    className: \"euiDataGrid__controls\"\n  }, showGridControls ? gridControls : null, _react.default.createElement(_button.EuiButtonEmpty, {\n    size: \"xs\",\n    iconType: \"fullScreen\",\n    color: \"text\",\n    className: isFullScreen ? 'euiDataGrid__controlBtn--active' : null,\n    onClick: function onClick() {\n      return setIsFullScreen(!isFullScreen);\n    },\n    onKeyDown: handleGridKeyDown\n  }, isFullScreen ? 'Exit full screen' : 'Full screen')), _react.default.createElement(_resize_observer.EuiResizeObserver, {\n    onResize: onResize\n  }, function (resizeRef) {\n    return _react.default.createElement(\"div\", _extends({\n      onKeyDown: handleKeyDown,\n      className: \"euiDataGrid__verticalScroll\",\n      ref: resizeRef\n    }, rest), _react.default.createElement(\"div\", {\n      className: \"euiDataGrid__overflow\"\n    }, _react.default.createElement(\"div\", {\n      className: \"euiDataGrid__content\",\n      role: \"grid\"\n    }, _react.default.createElement(_data_grid_header_row.EuiDataGridHeaderRow, {\n      columns: visibleColumns,\n      columnWidths: columnWidths,\n      setColumnWidth: setColumnWidth\n    }), _react.default.createElement(_data_grid_body.EuiDataGridBody, {\n      columnWidths: columnWidths,\n      columns: visibleColumns,\n      focusedCell: focusedCell,\n      onCellFocus: onCellFocus,\n      pagination: pagination,\n      renderCellValue: renderCellValue,\n      rowCount: rowCount,\n      isGridNavigationEnabled: isGridNavigationEnabled,\n      interactiveCellId: interactiveCellId\n    }))));\n  }), renderPagination(props), _react.default.createElement(\"p\", {\n    id: interactiveCellId,\n    hidden: true\n  }, \"Cell contains interactive content.\")));\n};\n\nexports.EuiDataGrid = EuiDataGrid;\nEuiDataGrid.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"EuiDataGrid\"\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/datagrid/data_grid.tsx"],"names":["fontSizesToClassMap","s","m","l","headerToClassMap","shade","underline","rowHoverToClassMap","highlight","none","bordersToClassMap","all","horizontal","cellPaddingsToClassMap","ORIGIN","computeVisibleRows","props","pagination","rowCount","startRow","pageIndex","pageSize","endRow","Math","min","renderPagination","pageSizeOptions","onChangePage","onChangeItemsPerPage","pageCount","ceil","EuiDataGrid","isFullScreen","setIsFullScreen","showGridControls","setShowGridControls","focusedCell","setFocusedCell","containerRef","interactiveCellId","columnWidths","setColumnWidths","setColumnWidth","columnId","width","current","gridWidth","clientWidth","columnWidth","max","columns","length","reduce","column","id","onResize","isGridNavigationEnabled","setIsGridNavigationEnabled","isInteractiveCell","element","getAttribute","Boolean","querySelector","CELL_CONTENTS_ATTR","handleGridKeyDown","e","keyCode","keyCodes","ESCAPE","preventDefault","handleKeyDown","event","colCount","x","y","target","HTMLElement","ENTER","F2","DOWN","LEFT","UP","RIGHT","renderCellValue","className","gridStyle","startingStyles","rest","ColumnSelector","visibleColumns","StyleSelector","gridStyles","setGridStyles","oldStyles","mergedStyle","Object","assign","classes","fontSize","border","header","rowHover","cellPadding","stripes","gridControls","document","body","classList","add","remove","onCellFocus","height","resizeRef"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useEffect, useRef, Fragment } from 'react';\nimport classNames from 'classnames';\nimport { EuiDataGridHeaderRow } from './data_grid_header_row'; // @ts-ignore-next-line\n\nimport { EuiButtonEmpty } from '../button';\nimport { keyCodes, htmlIdGenerator } from '../../services';\nimport { EuiDataGridBody } from './data_grid_body';\nimport { useColumnSelector } from './column_selector';\nimport { useStyleSelector, startingStyles } from './style_selector'; // @ts-ignore-next-line\n\nimport { EuiTablePagination } from '../table/table_pagination'; // @ts-ignore-next-line\n\nimport { EuiFocusTrap } from '../focus_trap';\nimport { EuiResizeObserver } from '../observer/resize_observer';\nimport { CELL_CONTENTS_ATTR } from './utils'; // Each gridStyle object above sets a specific CSS select to .euiGrid\n\nvar fontSizesToClassMap = {\n  s: 'euiDataGrid--fontSizeSmall',\n  m: '',\n  l: 'euiDataGrid--fontSizeLarge'\n};\nvar headerToClassMap = {\n  shade: 'euiDataGrid--headerShade',\n  underline: 'euiDataGrid--headerUnderline'\n};\nvar rowHoverToClassMap = {\n  highlight: 'euiDataGrid--rowHoverHighlight',\n  none: ''\n};\nvar bordersToClassMap = {\n  all: 'euiDataGrid--bordersAll',\n  horizontal: 'euiDataGrid--bordersHorizontal',\n  none: 'euiDataGrid--bordersNone'\n};\nvar cellPaddingsToClassMap = {\n  s: 'euiDataGrid--paddingSmall',\n  m: '',\n  l: 'euiDataGrid--paddingLarge'\n};\nvar ORIGIN = [0, 0];\n\nfunction computeVisibleRows(props) {\n  var pagination = props.pagination,\n      rowCount = props.rowCount;\n  var startRow = pagination ? pagination.pageIndex * pagination.pageSize : 0;\n  var endRow = pagination ? (pagination.pageIndex + 1) * pagination.pageSize : rowCount;\n  endRow = Math.min(endRow, rowCount);\n  return endRow - startRow;\n}\n\nfunction renderPagination(props) {\n  var pagination = props.pagination;\n\n  if (pagination == null) {\n    return null;\n  }\n\n  var pageIndex = pagination.pageIndex,\n      pageSize = pagination.pageSize,\n      pageSizeOptions = pagination.pageSizeOptions,\n      onChangePage = pagination.onChangePage,\n      onChangeItemsPerPage = pagination.onChangeItemsPerPage;\n  var pageCount = Math.ceil(props.rowCount / pageSize);\n  return React.createElement(\"div\", {\n    className: \"euiDataGrid__pagination\"\n  }, React.createElement(EuiTablePagination, {\n    activePage: pageIndex,\n    itemsPerPage: pageSize,\n    itemsPerPageOptions: pageSizeOptions,\n    pageCount: pageCount,\n    onChangePage: onChangePage,\n    onChangeItemsPerPage: onChangeItemsPerPage\n  }));\n}\n\nexport var EuiDataGrid = props => {\n  const [isFullScreen, setIsFullScreen] = useState(false);\n  const [showGridControls, setShowGridControls] = useState(true);\n  const [focusedCell, setFocusedCell] = useState(ORIGIN);\n  const containerRef = useRef(null);\n  const [interactiveCellId] = useState(htmlIdGenerator()());\n  const [columnWidths, setColumnWidths] = useState({});\n\n  const setColumnWidth = (columnId, width) => {\n    setColumnWidths({ ...columnWidths,\n      [columnId]: width\n    });\n  };\n\n  useEffect(() => {\n    if (containerRef.current != null) {\n      const gridWidth = containerRef.current.clientWidth;\n      const columnWidth = Math.max(gridWidth / props.columns.length, 100);\n      const columnWidths = props.columns.reduce((columnWidths, column) => {\n        columnWidths[column.id] = columnWidth;\n        return columnWidths;\n      }, {});\n      setColumnWidths(columnWidths);\n    } // @TODO: come back to this hook lifecycle\n\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const onResize = ({\n    width\n  }) => {\n    setShowGridControls(width > 480);\n  };\n\n  const [isGridNavigationEnabled, setIsGridNavigationEnabled] = useState(true);\n\n  const isInteractiveCell = element => {\n    if (element.getAttribute('role') !== 'gridcell') {\n      return false;\n    }\n\n    return Boolean(element.querySelector(`[${CELL_CONTENTS_ATTR}=\"true\"]`));\n  };\n\n  const handleGridKeyDown = e => {\n    switch (e.keyCode) {\n      case keyCodes.ESCAPE:\n        e.preventDefault();\n        setIsFullScreen(false);\n        break;\n    }\n  };\n\n  const handleKeyDown = event => {\n    const colCount = props.columns.length - 1;\n    const [x, y] = focusedCell;\n    const rowCount = computeVisibleRows(props);\n    const {\n      keyCode,\n      target\n    } = event;\n\n    if (target instanceof HTMLElement && isInteractiveCell(target) && isGridNavigationEnabled && (keyCode === keyCodes.ENTER || keyCode === keyCodes.F2)) {\n      setIsGridNavigationEnabled(false);\n    } else if (!isGridNavigationEnabled && (keyCode === keyCodes.ESCAPE || keyCode === keyCodes.F2)) {\n      setIsGridNavigationEnabled(true);\n    }\n\n    if (isGridNavigationEnabled) {\n      switch (keyCode) {\n        case keyCodes.DOWN:\n          if (y < rowCount) {\n            event.preventDefault();\n            setFocusedCell([x, y + 1]);\n          }\n\n          break;\n\n        case keyCodes.LEFT:\n          if (x > 0) {\n            event.preventDefault();\n            setFocusedCell([x - 1, y]);\n          }\n\n          break;\n\n        case keyCodes.UP:\n          // TODO sort out when a user can arrow up into the column headers\n          if (y > 0) {\n            event.preventDefault();\n            setFocusedCell([x, y - 1]);\n          }\n\n          break;\n\n        case keyCodes.RIGHT:\n          if (x < colCount) {\n            event.preventDefault();\n            setFocusedCell([x + 1, y]);\n          }\n\n          break;\n      }\n    }\n  };\n\n  const {\n    columns,\n    rowCount,\n    renderCellValue,\n    className,\n    gridStyle = startingStyles,\n    pagination,\n    ...rest\n  } = props;\n  const [ColumnSelector, visibleColumns] = useColumnSelector(columns);\n  const [StyleSelector, gridStyles, setGridStyles] = useStyleSelector();\n  useEffect(() => {\n    if (gridStyle) {\n      const oldStyles = gridStyles;\n      /*eslint-disable */\n\n      const mergedStyle = Object.assign(\n      /*eslint-enable */\n      {}, oldStyles, // @ts-ignore\n      gridStyle);\n      setGridStyles(mergedStyle);\n    } else {\n      setGridStyles(startingStyles);\n    } // @TODO: come back to this hook lifecycle\n\n  }, [gridStyle]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const classes = classNames('euiDataGrid', fontSizesToClassMap[gridStyles.fontSize], bordersToClassMap[gridStyles.border], headerToClassMap[gridStyles.header], rowHoverToClassMap[gridStyles.rowHover], cellPaddingsToClassMap[gridStyles.cellPadding], {\n    'euiDataGrid--stripes': gridStyles.stripes\n  }, {\n    'euiDataGrid--fullScreen': isFullScreen\n  }, className); // These grid controls will only show when there is room. Check the resize observer callback\n\n  const gridControls = <Fragment>\n      <ColumnSelector />\n      <StyleSelector />\n    </Fragment>; // When data grid is full screen, we add a class to the body to remove the extra scrollbar\n\n  if (isFullScreen) {\n    document.body.classList.add('euiDataGrid__restrictBody');\n  } else {\n    document.body.classList.remove('euiDataGrid__restrictBody');\n  }\n\n  const onCellFocus = useCallback(setFocusedCell, [setFocusedCell]);\n  return <EuiFocusTrap disabled={!isFullScreen} style={{\n    height: '100%'\n  }}>\n      <div className={classes} onKeyDown={handleGridKeyDown} ref={containerRef}>\n        <div className=\"euiDataGrid__controls\">\n          {showGridControls ? gridControls : null}\n          <EuiButtonEmpty size=\"xs\" iconType=\"fullScreen\" color=\"text\" className={isFullScreen ? 'euiDataGrid__controlBtn--active' : null} onClick={() => setIsFullScreen(!isFullScreen)} onKeyDown={handleGridKeyDown}>\n            {isFullScreen ? 'Exit full screen' : 'Full screen'}\n          </EuiButtonEmpty>\n        </div>\n        {\n        /* Unsure why this element causes errors as focus follows spec */\n      }\n        {\n        /* eslint-disable jsx-a11y/interactive-supports-focus */\n      }\n        <EuiResizeObserver onResize={onResize}>\n          {resizeRef => <div onKeyDown={handleKeyDown} className=\"euiDataGrid__verticalScroll\" ref={resizeRef} {...rest}>\n              <div className=\"euiDataGrid__overflow\">\n                <div className=\"euiDataGrid__content\" role=\"grid\">\n                  <EuiDataGridHeaderRow columns={visibleColumns} columnWidths={columnWidths} setColumnWidth={setColumnWidth} />\n                  <EuiDataGridBody columnWidths={columnWidths} columns={visibleColumns} focusedCell={focusedCell} onCellFocus={onCellFocus} pagination={pagination} renderCellValue={renderCellValue} rowCount={rowCount} isGridNavigationEnabled={isGridNavigationEnabled} interactiveCellId={interactiveCellId} />\n                </div>\n              </div>\n            </div>}\n        </EuiResizeObserver>\n\n        {renderPagination(props)}\n        <p id={interactiveCellId} hidden>\n          Cell contains interactive content.\n          {\n          /* TODO: if no keyboard shortcuts panel gets built, add keyboard shortcut info here */\n        }\n        </p>\n      </div>\n    </EuiFocusTrap>;\n};"]}]}