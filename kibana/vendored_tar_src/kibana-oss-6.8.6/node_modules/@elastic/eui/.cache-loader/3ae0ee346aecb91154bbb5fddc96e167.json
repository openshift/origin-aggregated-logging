{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/table/table_row_cell.tsx","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/table/table_row_cell.tsx","mtime":1567626462192},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EuiTableRowCell = void 0;\n\nrequire(\"core-js/modules/es6.object.assign\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _services = require(\"../../services\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nvar EuiTableRowCell = function EuiTableRowCell(_ref) {\n  var _ref$align = _ref.align,\n      align = _ref$align === void 0 ? _services.LEFT_ALIGNMENT : _ref$align,\n      children = _ref.children,\n      className = _ref.className,\n      truncateText = _ref.truncateText,\n      showOnHover = _ref.showOnHover,\n      _ref$textOnly = _ref.textOnly,\n      textOnly = _ref$textOnly === void 0 ? true : _ref$textOnly,\n      colSpan = _ref.colSpan,\n      hasActions = _ref.hasActions,\n      isExpander = _ref.isExpander,\n      _ref$mobileOptions = _ref.mobileOptions,\n      mobileOptions = _ref$mobileOptions === void 0 ? {\n    show: true\n  } : _ref$mobileOptions,\n      header = _ref.header,\n      hideForMobile = _ref.hideForMobile,\n      isMobileHeader = _ref.isMobileHeader,\n      isMobileFullWidth = _ref.isMobileFullWidth,\n      rest = _objectWithoutProperties(_ref, [\"align\", \"children\", \"className\", \"truncateText\", \"showOnHover\", \"textOnly\", \"colSpan\", \"hasActions\", \"isExpander\", \"mobileOptions\", \"header\", \"hideForMobile\", \"isMobileHeader\", \"isMobileFullWidth\"]);\n\n  var cellClasses = (0, _classnames.default)('euiTableRowCell', {\n    'euiTableRowCell--hasActions': hasActions,\n    'euiTableRowCell--isExpander': isExpander,\n    'euiTableRowCell--hideForDesktop': mobileOptions.only || isMobileHeader,\n    'euiTableRowCell--enlargeForMobile': mobileOptions.enlarge || isMobileHeader,\n    'euiTableRowCell--isMobileFullWidth': mobileOptions.fullWidth || isMobileFullWidth || isMobileHeader\n  });\n  var contentClasses = (0, _classnames.default)('euiTableCellContent', className, {\n    'euiTableCellContent--alignRight': align === _services.RIGHT_ALIGNMENT,\n    'euiTableCellContent--alignCenter': align === _services.CENTER_ALIGNMENT,\n    'euiTableCellContent--showOnHover': showOnHover,\n    'euiTableCellContent--truncateText': truncateText,\n    // We're doing this rigamarole instead of creating `euiTableCellContent--textOnly` for BWC\n    // purposes for the time-being.\n    'euiTableCellContent--overflowingContent': textOnly !== true\n  });\n  var mobileContentClasses = (0, _classnames.default)('euiTableCellContent', className, {\n    'euiTableCellContent--alignRight': mobileOptions.align === _services.RIGHT_ALIGNMENT || align === _services.RIGHT_ALIGNMENT,\n    'euiTableCellContent--alignCenter': mobileOptions.align === _services.CENTER_ALIGNMENT || align === _services.RIGHT_ALIGNMENT,\n    'euiTableCellContent--showOnHover': mobileOptions.showOnHover || showOnHover,\n    'euiTableCellContent--truncateText': mobileOptions.truncateText || truncateText,\n    // We're doing this rigamarole instead of creating `euiTableCellContent--textOnly` for BWC\n    // purposes for the time-being.\n    'euiTableCellContent--overflowingContent': mobileOptions.textOnly !== true || textOnly !== true\n  });\n  var childClasses = (0, _classnames.default)({\n    euiTableCellContent__text: textOnly === true,\n    euiTableCellContent__hoverItem: showOnHover\n  });\n\n  function modifyChildren(children) {\n    var modifiedChildren = children;\n\n    if (textOnly === true) {\n      modifiedChildren = _react.default.createElement(\"span\", {\n        className: childClasses\n      }, children);\n    } else if (_react.default.isValidElement(children)) {\n      modifiedChildren = _react.default.Children.map(children, function (child) {\n        return _react.default.cloneElement(child, {\n          className: (0, _classnames.default)(child.props.className, childClasses)\n        });\n      });\n    }\n\n    return modifiedChildren;\n  }\n\n  var childrenNode = modifyChildren(children);\n  var hideForMobileClasses = 'euiTableRowCell--hideForMobile';\n  var showForMobileClasses = 'euiTableRowCell--hideForDesktop';\n  var cellRender;\n\n  if (mobileOptions.show === false || hideForMobile) {\n    cellRender = _react.default.createElement(\"td\", _extends({\n      className: \"\".concat(cellClasses, \" \").concat(hideForMobileClasses),\n      colSpan: colSpan\n    }, rest), _react.default.createElement(\"div\", {\n      className: contentClasses\n    }, childrenNode));\n  } else {\n    cellRender = _react.default.createElement(\"td\", _extends({\n      className: cellClasses,\n      colSpan: colSpan\n    }, rest), (mobileOptions.header || header) && !isMobileHeader && _react.default.createElement(\"div\", {\n      className: \"euiTableRowCell__mobileHeader \".concat(showForMobileClasses)\n    }, mobileOptions.header || header), mobileOptions.render ? _react.default.createElement(_react.Fragment, null, _react.default.createElement(\"div\", {\n      className: \"\".concat(mobileContentClasses, \" \").concat(showForMobileClasses)\n    }, modifyChildren(mobileOptions.render)), _react.default.createElement(\"div\", {\n      className: \"\".concat(contentClasses, \" \").concat(hideForMobileClasses)\n    }, childrenNode)) : _react.default.createElement(\"div\", {\n      className: contentClasses\n    }, childrenNode));\n  }\n\n  return cellRender;\n};\n\nexports.EuiTableRowCell = EuiTableRowCell;\nEuiTableRowCell.propTypes = {\n  className: _propTypes.default.string,\n  \"aria-label\": _propTypes.default.string,\n  \"data-test-subj\": _propTypes.default.string,\n  align: _propTypes.default.oneOf([\"left\", \"right\", \"center\"]),\n\n  /**\n     * Don't allow line breaks within cells\n     */\n  showOnHover: _propTypes.default.bool,\n\n  /**\n     * Setting `textOnly` to `false` will break words unnecessarily on FF and\n     * IE.  To combat this problem on FF, wrap contents with the css utility\n     * `.eui-textBreakWord`.\n     */\n  textOnly: _propTypes.default.bool,\n\n  /**\n     * _Should only be used for action cells_\n     */\n  truncateText: _propTypes.default.bool,\n\n  /**\n     * Indicates if the column is dedicated to icon-only actions (currently\n     * affects mobile only)\n     */\n  hasActions: _propTypes.default.bool,\n\n  /**\n     * _DEPRECATED: use `mobileOptions.header`_\n     * The column's header title for use in mobile view (will be added as a\n     * data-attr)\n     */\n  header: _propTypes.default.string,\n\n  /**\n     * _DEPRECATED: use `mobileOptions.show = false`_\n     * Indicates if the column should not show for mobile users (typically\n     * hidden because a custom mobile header utilizes the column's contents)\n     */\n  hideForMobile: _propTypes.default.bool,\n\n  /**\n     * Indicates if the column is dedicated as the expandable row toggle\n     */\n  isExpander: _propTypes.default.bool,\n\n  /**\n     * _DEPRECATED: use `mobileOptions.fullWidth`_\n     * Allocates 100% of the width of the container in mobile view\n     * (typically cells are contained to 50%)\n     */\n  isMobileFullWidth: _propTypes.default.bool,\n\n  /**\n     * _DEPRECATED: use `mobileOptions.only = true & mobileOptions.header = * false`_\n     * Indicates if the column was created to be the row's heading in mobile\n     * view.  It won't display column's header inline and it the column will\n     * be hidden at larger screens)\n     */\n  isMobileHeader: _propTypes.default.bool,\n\n  /**\n     * Mobile options for displaying differently at small screens\n     */\n  mobileOptions: _propTypes.default.shape({\n    /**\n       * If false, will not render the cell at all for mobile\n       */\n    show: _propTypes.default.bool,\n\n    /**\n       * Only show for mobile? If true, will not render the column at all for desktop\n       */\n    only: _propTypes.default.bool,\n\n    /**\n       * Custom render/children if different from desktop\n       */\n    render: _propTypes.default.node,\n\n    /**\n       * The column's header for use in mobile view (automatically passed down\n       * when using `EuiBasicTable`).\n       * Or pass `false` to not show a header at all.\n       */\n    header: _propTypes.default.oneOfType([_propTypes.default.node.isRequired, _propTypes.default.bool.isRequired]),\n\n    /**\n       * Increase text size compared to rest of cells\n       */\n    enlarge: _propTypes.default.bool,\n\n    /**\n       * Allocates 100% of the width of the container in mobile view\n       * (typically cells are contained to 50%)\n       */\n    fullWidth: _propTypes.default.bool,\n\n    /**\n       * Horizontal alignment of the text in the cell\n       */\n    align: _propTypes.default.oneOf([\"left\", \"right\", \"center\"]),\n\n    /**\n       * Don't allow line breaks within cells\n       */\n    showOnHover: _propTypes.default.bool,\n\n    /**\n       * Setting `textOnly` to `false` will break words unnecessarily on FF and\n       * IE.  To combat this problem on FF, wrap contents with the css utility\n       * `.eui-textBreakWord`.\n       */\n    textOnly: _propTypes.default.bool,\n\n    /**\n       * _Should only be used for action cells_\n       */\n    truncateText: _propTypes.default.bool\n  })\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/table/table_row_cell.tsx"],"names":["EuiTableRowCell","align","LEFT_ALIGNMENT","children","className","truncateText","showOnHover","textOnly","colSpan","hasActions","isExpander","mobileOptions","show","header","hideForMobile","isMobileHeader","isMobileFullWidth","rest","cellClasses","only","enlarge","fullWidth","contentClasses","RIGHT_ALIGNMENT","CENTER_ALIGNMENT","mobileContentClasses","childClasses","euiTableCellContent__text","euiTableCellContent__hoverItem","modifyChildren","modifiedChildren","React","isValidElement","Children","map","child","cloneElement","props","childrenNode","hideForMobileClasses","showForMobileClasses","cellRender","render"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport PropTypes from \"prop-types\";\nimport classNames from 'classnames';\nimport { LEFT_ALIGNMENT, RIGHT_ALIGNMENT, CENTER_ALIGNMENT } from '../../services';\nexport var EuiTableRowCell = ({\n  align = LEFT_ALIGNMENT,\n  children,\n  className,\n  truncateText,\n  showOnHover,\n  textOnly = true,\n  colSpan,\n  hasActions,\n  isExpander,\n  mobileOptions = {\n    show: true\n  },\n  // Soon to be deprecated for {...mobileOptions}\n  header,\n  hideForMobile,\n  isMobileHeader,\n  isMobileFullWidth,\n  ...rest\n}) => {\n  const cellClasses = classNames('euiTableRowCell', {\n    'euiTableRowCell--hasActions': hasActions,\n    'euiTableRowCell--isExpander': isExpander,\n    'euiTableRowCell--hideForDesktop': mobileOptions.only || isMobileHeader,\n    'euiTableRowCell--enlargeForMobile': mobileOptions.enlarge || isMobileHeader,\n    'euiTableRowCell--isMobileFullWidth': mobileOptions.fullWidth || isMobileFullWidth || isMobileHeader\n  });\n  const contentClasses = classNames('euiTableCellContent', className, {\n    'euiTableCellContent--alignRight': align === RIGHT_ALIGNMENT,\n    'euiTableCellContent--alignCenter': align === CENTER_ALIGNMENT,\n    'euiTableCellContent--showOnHover': showOnHover,\n    'euiTableCellContent--truncateText': truncateText,\n    // We're doing this rigamarole instead of creating `euiTableCellContent--textOnly` for BWC\n    // purposes for the time-being.\n    'euiTableCellContent--overflowingContent': textOnly !== true\n  });\n  const mobileContentClasses = classNames('euiTableCellContent', className, {\n    'euiTableCellContent--alignRight': mobileOptions.align === RIGHT_ALIGNMENT || align === RIGHT_ALIGNMENT,\n    'euiTableCellContent--alignCenter': mobileOptions.align === CENTER_ALIGNMENT || align === RIGHT_ALIGNMENT,\n    'euiTableCellContent--showOnHover': mobileOptions.showOnHover || showOnHover,\n    'euiTableCellContent--truncateText': mobileOptions.truncateText || truncateText,\n    // We're doing this rigamarole instead of creating `euiTableCellContent--textOnly` for BWC\n    // purposes for the time-being.\n    'euiTableCellContent--overflowingContent': mobileOptions.textOnly !== true || textOnly !== true\n  });\n  const childClasses = classNames({\n    euiTableCellContent__text: textOnly === true,\n    euiTableCellContent__hoverItem: showOnHover\n  });\n\n  function modifyChildren(children) {\n    let modifiedChildren = children;\n\n    if (textOnly === true) {\n      modifiedChildren = <span className={childClasses}>{children}</span>;\n    } else if (React.isValidElement(children)) {\n      modifiedChildren = React.Children.map(children, child => React.cloneElement(child, {\n        className: classNames(child.props.className, childClasses)\n      }));\n    }\n\n    return modifiedChildren;\n  }\n\n  const childrenNode = modifyChildren(children);\n  const hideForMobileClasses = 'euiTableRowCell--hideForMobile';\n  const showForMobileClasses = 'euiTableRowCell--hideForDesktop';\n  let cellRender;\n\n  if (mobileOptions.show === false || hideForMobile) {\n    cellRender = <td className={`${cellClasses} ${hideForMobileClasses}`} colSpan={colSpan} {...rest}>\n        <div className={contentClasses}>{childrenNode}</div>\n      </td>;\n  } else {\n    cellRender = <td className={cellClasses} colSpan={colSpan} {...rest}>\n        {\n        /* Mobile-only header */\n      }\n        {(mobileOptions.header || header) && !isMobileHeader && <div className={`euiTableRowCell__mobileHeader ${showForMobileClasses}`}>\n            {mobileOptions.header || header}\n          </div>}\n\n        {\n        /* Content depending on mobile render existing */\n      }\n        {mobileOptions.render ? <Fragment>\n            <div className={`${mobileContentClasses} ${showForMobileClasses}`}>\n              {modifyChildren(mobileOptions.render)}\n            </div>\n            <div className={`${contentClasses} ${hideForMobileClasses}`}>\n              {childrenNode}\n            </div>\n          </Fragment> : <div className={contentClasses}>{childrenNode}</div>}\n      </td>;\n  }\n\n  return cellRender;\n};\nEuiTableRowCell.propTypes = {\n  className: _propTypes.default.string,\n  \"aria-label\": _propTypes.default.string,\n  \"data-test-subj\": _propTypes.default.string,\n  align: PropTypes.oneOf([\"left\", \"right\", \"center\"]),\n\n  /**\n     * Don't allow line breaks within cells\n     */\n  showOnHover: PropTypes.bool,\n\n  /**\n     * Setting `textOnly` to `false` will break words unnecessarily on FF and\n     * IE.  To combat this problem on FF, wrap contents with the css utility\n     * `.eui-textBreakWord`.\n     */\n  textOnly: PropTypes.bool,\n\n  /**\n     * _Should only be used for action cells_\n     */\n  truncateText: PropTypes.bool,\n\n  /**\n     * Indicates if the column is dedicated to icon-only actions (currently\n     * affects mobile only)\n     */\n  hasActions: PropTypes.bool,\n\n  /**\n     * _DEPRECATED: use `mobileOptions.header`_\n     * The column's header title for use in mobile view (will be added as a\n     * data-attr)\n     */\n  header: PropTypes.string,\n\n  /**\n     * _DEPRECATED: use `mobileOptions.show = false`_\n     * Indicates if the column should not show for mobile users (typically\n     * hidden because a custom mobile header utilizes the column's contents)\n     */\n  hideForMobile: PropTypes.bool,\n\n  /**\n     * Indicates if the column is dedicated as the expandable row toggle\n     */\n  isExpander: PropTypes.bool,\n\n  /**\n     * _DEPRECATED: use `mobileOptions.fullWidth`_\n     * Allocates 100% of the width of the container in mobile view\n     * (typically cells are contained to 50%)\n     */\n  isMobileFullWidth: PropTypes.bool,\n\n  /**\n     * _DEPRECATED: use `mobileOptions.only = true & mobileOptions.header = * false`_\n     * Indicates if the column was created to be the row's heading in mobile\n     * view.  It won't display column's header inline and it the column will\n     * be hidden at larger screens)\n     */\n  isMobileHeader: PropTypes.bool,\n\n  /**\n     * Mobile options for displaying differently at small screens\n     */\n  mobileOptions: PropTypes.shape({\n    /**\n       * If false, will not render the cell at all for mobile\n       */\n    show: PropTypes.bool,\n\n    /**\n       * Only show for mobile? If true, will not render the column at all for desktop\n       */\n    only: PropTypes.bool,\n\n    /**\n       * Custom render/children if different from desktop\n       */\n    render: PropTypes.node,\n\n    /**\n       * The column's header for use in mobile view (automatically passed down\n       * when using `EuiBasicTable`).\n       * Or pass `false` to not show a header at all.\n       */\n    header: PropTypes.oneOfType([PropTypes.node.isRequired, PropTypes.bool.isRequired]),\n\n    /**\n       * Increase text size compared to rest of cells\n       */\n    enlarge: PropTypes.bool,\n\n    /**\n       * Allocates 100% of the width of the container in mobile view\n       * (typically cells are contained to 50%)\n       */\n    fullWidth: PropTypes.bool,\n\n    /**\n       * Horizontal alignment of the text in the cell\n       */\n    align: PropTypes.oneOf([\"left\", \"right\", \"center\"]),\n\n    /**\n       * Don't allow line breaks within cells\n       */\n    showOnHover: PropTypes.bool,\n\n    /**\n       * Setting `textOnly` to `false` will break words unnecessarily on FF and\n       * IE.  To combat this problem on FF, wrap contents with the css utility\n       * `.eui-textBreakWord`.\n       */\n    textOnly: PropTypes.bool,\n\n    /**\n       * _Should only be used for action cells_\n       */\n    truncateText: PropTypes.bool\n  })\n};"]}]}