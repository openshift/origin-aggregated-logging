{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/accessibility/keyboard_accessible.ts","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/accessibility/keyboard_accessible.ts","mtime":1565204169586},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EuiKeyboardAccessible = void 0;\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.object.set-prototype-of\");\n\nvar _react = require(\"react\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _services = require(\"../../services\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar EuiKeyboardAccessible =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EuiKeyboardAccessible, _Component);\n\n  function EuiKeyboardAccessible() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EuiKeyboardAccessible);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EuiKeyboardAccessible)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onKeyDown\", function (e) {\n      // Prevent a scroll from occurring if the user has hit space.\n      if (e.keyCode === _services.keyCodes.SPACE) {\n        e.preventDefault();\n      }\n\n      if (_this.props.children.props.onKeyDown) {\n        _this.props.children.props.onKeyDown(e);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onKeyUp\", function (e) {\n      // Support keyboard accessibility by emulating mouse click on ENTER or SPACE keypress.\n      if (e.keyCode === _services.keyCodes.ENTER || e.keyCode === _services.keyCodes.SPACE) {\n        // Delegate to the click handler on the element.\n        _this.props.children.props.onClick(e);\n      }\n\n      if (_this.props.children.props.onKeyUp) {\n        _this.props.children.props.onKeyUp(e);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"applyKeyboardAccessibility\", function (child) {\n      // Add attributes required for accessibility unless they are already specified.\n      var props = _objectSpread({\n        tabIndex: '0',\n        role: 'button'\n      }, child.props, {\n        onKeyDown: _this.onKeyDown,\n        onKeyUp: _this.onKeyUp\n      });\n\n      return (0, _react.cloneElement)(child, props);\n    });\n\n    return _this;\n  }\n\n  _createClass(EuiKeyboardAccessible, [{\n    key: \"render\",\n    value: function render() {\n      return this.applyKeyboardAccessibility(this.props.children);\n    }\n  }]);\n\n  return EuiKeyboardAccessible;\n}(_react.Component); // @ts-ignore defining this as a static on EuiKeyboardAccessible breaks the\n// tests\n\n\nexports.EuiKeyboardAccessible = EuiKeyboardAccessible;\nEuiKeyboardAccessible.propTypes = {\n  children: _propTypes.default.element.isRequired\n};\nEuiKeyboardAccessible.propTypes = {\n  children: keyboardInaccessibleElement\n};\n\nfunction keyboardInaccessibleElement(props, propName, componentName) {\n  var child = props.children;\n\n  if (!child) {\n    throw new Error(\"\".concat(componentName, \" needs to wrap an element with which the user interacts.\"));\n  } // The whole point of this component is to hack in functionality that native buttons provide\n  // by default.\n\n\n  if (child.type === 'button') {\n    throw new Error(\"\".concat(componentName, \" doesn't need to be used on a button.\"));\n  }\n\n  if (child.type === 'a' && child.props.href !== undefined) {\n    throw new Error(\"\".concat(componentName, \" doesn't need to be used on a link if it has a href attribute.\"));\n  } // We're emulating a click action, so we should already have a regular click handler defined.\n\n\n  if (!child.props.onClick) {\n    throw new Error(\"\".concat(componentName, \" needs to wrap an element which has an onClick prop assigned.\"));\n  }\n\n  if (typeof child.props.onClick !== 'function') {\n    throw new Error(\"\".concat(componentName, \"'s child's onClick prop needs to be a function.\"));\n  }\n}\n\nEuiKeyboardAccessible.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [{\n    \"name\": \"onKeyDown\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"e\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"onKeyUp\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"e\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"applyKeyboardAccessibility\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"child\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }],\n  \"displayName\": \"EuiKeyboardAccessible\",\n  \"props\": {\n    \"children\": {\n      \"type\": {\n        \"name\": \"element\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/accessibility/keyboard_accessible.ts"],"names":["EuiKeyboardAccessible","e","keyCode","keyCodes","SPACE","preventDefault","props","children","onKeyDown","ENTER","onClick","onKeyUp","child","tabIndex","role","applyKeyboardAccessibility","Component","propTypes","keyboardInaccessibleElement","propName","componentName","Error","type","href","undefined"],"mappings":";;;;;;;;;;;;;;;;;;;AAsBA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;IAMaA,qB;;;;;;;;;;;;;;;;;;wFACC,UAACC,CAAD,EAA2B;AACrC;AACA,UAAIA,CAAC,CAACC,OAAF,KAAcC,mBAASC,KAA3B,EAAkC;AAChCH,QAAAA,CAAC,CAACI,cAAF;AACD;;AAED,UAAI,MAAKC,KAAL,CAAWC,QAAX,CAAoBD,KAApB,CAA0BE,SAA9B,EAAyC;AACvC,cAAKF,KAAL,CAAWC,QAAX,CAAoBD,KAApB,CAA0BE,SAA1B,CAAoCP,CAApC;AACD;AACF,K;;sFAES,UAACA,CAAD,EAA2B;AACnC;AACA,UAAIA,CAAC,CAACC,OAAF,KAAcC,mBAASM,KAAvB,IAAgCR,CAAC,CAACC,OAAF,KAAcC,mBAASC,KAA3D,EAAkE;AAChE;AACA,cAAKE,KAAL,CAAWC,QAAX,CAAoBD,KAApB,CAA0BI,OAA1B,CAAkCT,CAAlC;AACD;;AAED,UAAI,MAAKK,KAAL,CAAWC,QAAX,CAAoBD,KAApB,CAA0BK,OAA9B,EAAuC;AACrC,cAAKL,KAAL,CAAWC,QAAX,CAAoBD,KAApB,CAA0BK,OAA1B,CAAkCV,CAAlC;AACD;AACF,K;;yGAE4B,UAACW,KAAD,EAA8B;AACzD;AACA,UAAMN,KAAK;AACTO,QAAAA,QAAQ,EAAE,GADD;AAETC,QAAAA,IAAI,EAAE;AAFG,SAGNF,KAAK,CAACN,KAHA;AAITE,QAAAA,SAAS,EAAE,MAAKA,SAJP;AAKTG,QAAAA,OAAO,EAAE,MAAKA;AALL,QAAX;;AAQA,aAAO,yBAAaC,KAAb,EAAoBN,KAApB,CAAP;AACD,K;;;;;;;6BAEQ;AACP,aAAO,KAAKS,0BAAL,CAAgC,KAAKT,KAAL,CAAWC,QAA3C,CAAP;AACD;;;;EAvCwCS,gB,GA0C3C;AACA;;;;;;;AACAhB,qBAAqB,CAACiB,SAAtB,GAAkC;AAChCV,EAAAA,QAAQ,EAAEW;AADsB,CAAlC;;AAIA,SAASA,2BAAT,CACEZ,KADF,EAEEa,QAFF,EAGEC,aAHF,EAIE;AACA,MAAMR,KAAK,GAAGN,KAAK,CAACC,QAApB;;AAEA,MAAI,CAACK,KAAL,EAAY;AACV,UAAM,IAAIS,KAAJ,WACDD,aADC,8DAAN;AAGD,GAPD,CASA;AACA;;;AACA,MAAIR,KAAK,CAACU,IAAN,KAAe,QAAnB,EAA6B;AAC3B,UAAM,IAAID,KAAJ,WAAaD,aAAb,2CAAN;AACD;;AAED,MAAIR,KAAK,CAACU,IAAN,KAAe,GAAf,IAAsBV,KAAK,CAACN,KAAN,CAAYiB,IAAZ,KAAqBC,SAA/C,EAA0D;AACxD,UAAM,IAAIH,KAAJ,WACDD,aADC,oEAAN;AAGD,GAnBD,CAqBA;;;AACA,MAAI,CAACR,KAAK,CAACN,KAAN,CAAYI,OAAjB,EAA0B;AACxB,UAAM,IAAIW,KAAJ,WACDD,aADC,mEAAN;AAGD;;AAED,MAAI,OAAOR,KAAK,CAACN,KAAN,CAAYI,OAAnB,KAA+B,UAAnC,EAA+C;AAC7C,UAAM,IAAIW,KAAJ,WACDD,aADC,qDAAN;AAGD;AACF","sourcesContent":["/**\n * Interactive elements must be able to receive focus.\n *\n * Ideally, this means using elements that are natively keyboard accessible (<a href=\"\">,\n * <input type=\"button\">, or <button>). Note that links should be used when navigating and buttons\n * should be used when performing an action on the page.\n *\n * If, however, you need to use elements that aren't natively keyboard accessible (for example, <div>,\n * <p>, or <a> without the href attribute), then you need to allow them to receive focus and to\n * respond to keyboard input. The workaround is to:\n *\n *   - Give the element tabindex=\"0\" so that it can receive keyboard focus.\n *   - Add a JavaScript onkeyup event handler that triggers element functionality if the Enter key\n *     is pressed while the element is focused. This is necessary because some browsers do not trigger\n *    onclick events for such elements when activated via the keyboard.\n *   - If the item is meant to function as a button, the onkeyup event handler should also detect the\n *     Spacebar in addition to the Enter key, and the element should be given role=\"button\".\n *\n * Wrap any such elements that aren't natively keyboard accessible in this component to automatically\n * apply the above workaround to them.\n */\nimport { Component, cloneElement } from 'react';\nimport PropTypes from \"prop-types\";\nimport { keyCodes } from '../../services';\nexport class EuiKeyboardAccessible extends Component {\n  onKeyDown = e => {\n    // Prevent a scroll from occurring if the user has hit space.\n    if (e.keyCode === keyCodes.SPACE) {\n      e.preventDefault();\n    }\n\n    if (this.props.children.props.onKeyDown) {\n      this.props.children.props.onKeyDown(e);\n    }\n  };\n  onKeyUp = e => {\n    // Support keyboard accessibility by emulating mouse click on ENTER or SPACE keypress.\n    if (e.keyCode === keyCodes.ENTER || e.keyCode === keyCodes.SPACE) {\n      // Delegate to the click handler on the element.\n      this.props.children.props.onClick(e);\n    }\n\n    if (this.props.children.props.onKeyUp) {\n      this.props.children.props.onKeyUp(e);\n    }\n  };\n  applyKeyboardAccessibility = child => {\n    // Add attributes required for accessibility unless they are already specified.\n    const props = {\n      tabIndex: '0',\n      role: 'button',\n      ...child.props,\n      onKeyDown: this.onKeyDown,\n      onKeyUp: this.onKeyUp\n    };\n    return cloneElement(child, props);\n  };\n\n  render() {\n    return this.applyKeyboardAccessibility(this.props.children);\n  }\n\n} // @ts-ignore defining this as a static on EuiKeyboardAccessible breaks the\n// tests\n\nEuiKeyboardAccessible.propTypes = {\n  children: PropTypes.element.isRequired\n};\nEuiKeyboardAccessible.propTypes = {\n  children: keyboardInaccessibleElement\n};\n\nfunction keyboardInaccessibleElement(props, propName, componentName) {\n  const child = props.children;\n\n  if (!child) {\n    throw new Error(`${componentName} needs to wrap an element with which the user interacts.`);\n  } // The whole point of this component is to hack in functionality that native buttons provide\n  // by default.\n\n\n  if (child.type === 'button') {\n    throw new Error(`${componentName} doesn't need to be used on a button.`);\n  }\n\n  if (child.type === 'a' && child.props.href !== undefined) {\n    throw new Error(`${componentName} doesn't need to be used on a link if it has a href attribute.`);\n  } // We're emulating a click action, so we should already have a regular click handler defined.\n\n\n  if (!child.props.onClick) {\n    throw new Error(`${componentName} needs to wrap an element which has an onClick prop assigned.`);\n  }\n\n  if (typeof child.props.onClick !== 'function') {\n    throw new Error(`${componentName}'s child's onClick prop needs to be a function.`);\n  }\n}"]}]}