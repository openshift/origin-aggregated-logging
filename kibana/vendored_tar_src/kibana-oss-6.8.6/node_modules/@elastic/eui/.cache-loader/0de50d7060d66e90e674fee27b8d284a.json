{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src-docs/src/views/drag_and_drop/drag_and_drop_clone.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src-docs/src/views/drag_and_drop/drag_and_drop_clone.js","mtime":1565204169463},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.string.iterator\");\n\nrequire(\"core-js/modules/es6.array.from\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _components = require(\"../../../../src/components\");\n\nvar _drag_and_drop = require(\"../../../../src/components/drag_and_drop\");\n\nvar _helper = require(\"./helper\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar _default = function _default() {\n  var _useState = (0, _react.useState)(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isItemRemovable = _useState2[0],\n      setIsItemRemovable = _useState2[1];\n\n  var _useState3 = (0, _react.useState)((0, _helper.makeList)(3)),\n      _useState4 = _slicedToArray(_useState3, 2),\n      list1 = _useState4[0],\n      setList1 = _useState4[1];\n\n  var _useState5 = (0, _react.useState)([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      list2 = _useState6[0],\n      setList2 = _useState6[1];\n\n  var lists = {\n    DROPPABLE_AREA_COPY_1: list1,\n    DROPPABLE_AREA_COPY_2: list2\n  };\n  var actions = {\n    DROPPABLE_AREA_COPY_1: setList1,\n    DROPPABLE_AREA_COPY_2: setList2\n  };\n\n  var remove = function remove(droppableId, index) {\n    var list = Array.from(lists[droppableId]);\n    list.splice(index, 1);\n    actions[droppableId](list);\n  };\n\n  var onDragUpdate = function onDragUpdate(_ref) {\n    var source = _ref.source,\n        destination = _ref.destination;\n    var shouldRemove = !destination && source.droppableId === 'DROPPABLE_AREA_COPY_2';\n    setIsItemRemovable(shouldRemove);\n  };\n\n  var onDragEnd = function onDragEnd(_ref2) {\n    var source = _ref2.source,\n        destination = _ref2.destination;\n\n    if (source && destination) {\n      if (source.droppableId === destination.droppableId) {\n        var items = (0, _drag_and_drop.reorder)(lists[destination.droppableId], source.index, destination.index);\n        actions[destination.droppableId](items);\n      } else {\n        var sourceId = source.droppableId;\n        var destinationId = destination.droppableId;\n        var result = (0, _drag_and_drop.copy)(lists[sourceId], lists[destinationId], source, destination, {\n          property: 'id',\n          modifier: _helper.makeId\n        });\n        actions[sourceId](result[sourceId]);\n        actions[destinationId](result[destinationId]);\n      }\n    } else if (!destination && source.droppableId === 'DROPPABLE_AREA_COPY_2') {\n      remove(source.droppableId, source.index);\n    }\n  };\n\n  return _react.default.createElement(_components.EuiDragDropContext, {\n    onDragEnd: onDragEnd,\n    onDragUpdate: onDragUpdate\n  }, _react.default.createElement(_components.EuiFlexGroup, null, _react.default.createElement(_components.EuiFlexItem, {\n    style: {\n      width: '50%'\n    }\n  }, _react.default.createElement(_components.EuiDroppable, {\n    droppableId: \"DROPPABLE_AREA_COPY_1\",\n    cloneDraggables: true,\n    spacing: \"l\",\n    grow: true\n  }, list1.map(function (_ref3, idx) {\n    var content = _ref3.content,\n        id = _ref3.id;\n    return _react.default.createElement(_components.EuiDraggable, {\n      key: id,\n      index: idx,\n      draggableId: id,\n      spacing: \"l\"\n    }, _react.default.createElement(_components.EuiPanel, null, content));\n  }))), _react.default.createElement(_components.EuiFlexItem, {\n    style: {\n      width: '50%'\n    }\n  }, _react.default.createElement(_components.EuiDroppable, {\n    droppableId: \"DROPPABLE_AREA_COPY_2\",\n    withPanel: true,\n    grow: true\n  }, list2.length ? list2.map(function (_ref4, idx) {\n    var content = _ref4.content,\n        id = _ref4.id;\n    return _react.default.createElement(_components.EuiDraggable, {\n      key: id,\n      index: idx,\n      draggableId: id,\n      spacing: \"l\",\n      isRemovable: isItemRemovable\n    }, _react.default.createElement(_components.EuiPanel, null, _react.default.createElement(_components.EuiFlexGroup, {\n      gutterSize: \"none\",\n      alignItems: \"center\"\n    }, _react.default.createElement(_components.EuiFlexItem, null, content), _react.default.createElement(_components.EuiFlexItem, {\n      grow: false\n    }, isItemRemovable ? _react.default.createElement(_components.EuiIcon, {\n      type: \"trash\",\n      color: \"danger\"\n    }) : _react.default.createElement(_components.EuiButtonIcon, {\n      iconType: \"cross\",\n      \"aria-label\": \"Remove\",\n      onClick: function onClick() {\n        return remove('DROPPABLE_AREA_COPY_2', idx);\n      }\n    })))));\n  }) : _react.default.createElement(_components.EuiFlexGroup, {\n    alignItems: \"center\",\n    justifyContent: \"spaceAround\",\n    gutterSize: \"none\",\n    style: {\n      height: '100%'\n    }\n  }, _react.default.createElement(_components.EuiFlexItem, {\n    grow: false\n  }, \"Drop Items Here\"))))));\n};\n\nexports.default = _default;\nmodule.exports = exports.default;",{"version":3,"sources":["/Users/chanderprall/projects/eui/src-docs/src/views/drag_and_drop/drag_and_drop_clone.js"],"names":["isItemRemovable","setIsItemRemovable","list1","setList1","list2","setList2","lists","DROPPABLE_AREA_COPY_1","DROPPABLE_AREA_COPY_2","actions","remove","droppableId","index","list","Array","from","splice","onDragUpdate","source","destination","shouldRemove","onDragEnd","items","sourceId","destinationId","result","property","modifier","makeId","width","map","idx","content","id","length","height"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AAWA;;AAEA;;;;;;;;;;;;eAEe,oBAAM;AAAA,kBAC2B,qBAAS,KAAT,CAD3B;AAAA;AAAA,MACZA,eADY;AAAA,MACKC,kBADL;;AAAA,mBAEO,qBAAS,sBAAS,CAAT,CAAT,CAFP;AAAA;AAAA,MAEZC,KAFY;AAAA,MAELC,QAFK;;AAAA,mBAGO,qBAAS,EAAT,CAHP;AAAA;AAAA,MAGZC,KAHY;AAAA,MAGLC,QAHK;;AAInB,MAAMC,KAAK,GAAG;AAAEC,IAAAA,qBAAqB,EAAEL,KAAzB;AAAgCM,IAAAA,qBAAqB,EAAEJ;AAAvD,GAAd;AACA,MAAMK,OAAO,GAAG;AACdF,IAAAA,qBAAqB,EAAEJ,QADT;AAEdK,IAAAA,qBAAqB,EAAEH;AAFT,GAAhB;;AAIA,MAAMK,MAAM,GAAG,SAATA,MAAS,CAACC,WAAD,EAAcC,KAAd,EAAwB;AACrC,QAAMC,IAAI,GAAGC,KAAK,CAACC,IAAN,CAAWT,KAAK,CAACK,WAAD,CAAhB,CAAb;AACAE,IAAAA,IAAI,CAACG,MAAL,CAAYJ,KAAZ,EAAmB,CAAnB;AAEAH,IAAAA,OAAO,CAACE,WAAD,CAAP,CAAqBE,IAArB;AACD,GALD;;AAMA,MAAMI,YAAY,GAAG,SAAfA,YAAe,OAA6B;AAAA,QAA1BC,MAA0B,QAA1BA,MAA0B;AAAA,QAAlBC,WAAkB,QAAlBA,WAAkB;AAChD,QAAMC,YAAY,GAChB,CAACD,WAAD,IAAgBD,MAAM,CAACP,WAAP,KAAuB,uBADzC;AAEAV,IAAAA,kBAAkB,CAACmB,YAAD,CAAlB;AACD,GAJD;;AAKA,MAAMC,SAAS,GAAG,SAAZA,SAAY,QAA6B;AAAA,QAA1BH,MAA0B,SAA1BA,MAA0B;AAAA,QAAlBC,WAAkB,SAAlBA,WAAkB;;AAC7C,QAAID,MAAM,IAAIC,WAAd,EAA2B;AACzB,UAAID,MAAM,CAACP,WAAP,KAAuBQ,WAAW,CAACR,WAAvC,EAAoD;AAClD,YAAMW,KAAK,GAAG,4BACZhB,KAAK,CAACa,WAAW,CAACR,WAAb,CADO,EAEZO,MAAM,CAACN,KAFK,EAGZO,WAAW,CAACP,KAHA,CAAd;AAMAH,QAAAA,OAAO,CAACU,WAAW,CAACR,WAAb,CAAP,CAAiCW,KAAjC;AACD,OARD,MAQO;AACL,YAAMC,QAAQ,GAAGL,MAAM,CAACP,WAAxB;AACA,YAAMa,aAAa,GAAGL,WAAW,CAACR,WAAlC;AACA,YAAMc,MAAM,GAAG,yBACbnB,KAAK,CAACiB,QAAD,CADQ,EAEbjB,KAAK,CAACkB,aAAD,CAFQ,EAGbN,MAHa,EAIbC,WAJa,EAKb;AACEO,UAAAA,QAAQ,EAAE,IADZ;AAEEC,UAAAA,QAAQ,EAAEC;AAFZ,SALa,CAAf;AAWAnB,QAAAA,OAAO,CAACc,QAAD,CAAP,CAAkBE,MAAM,CAACF,QAAD,CAAxB;AACAd,QAAAA,OAAO,CAACe,aAAD,CAAP,CAAuBC,MAAM,CAACD,aAAD,CAA7B;AACD;AACF,KA1BD,MA0BO,IAAI,CAACL,WAAD,IAAgBD,MAAM,CAACP,WAAP,KAAuB,uBAA3C,EAAoE;AACzED,MAAAA,MAAM,CAACQ,MAAM,CAACP,WAAR,EAAqBO,MAAM,CAACN,KAA5B,CAAN;AACD;AACF,GA9BD;;AA+BA,SACE,6BAAC,8BAAD;AAAoB,IAAA,SAAS,EAAES,SAA/B;AAA0C,IAAA,YAAY,EAAEJ;AAAxD,KACE,6BAAC,wBAAD,QACE,6BAAC,uBAAD;AAAa,IAAA,KAAK,EAAE;AAAEY,MAAAA,KAAK,EAAE;AAAT;AAApB,KACE,6BAAC,wBAAD;AACE,IAAA,WAAW,EAAC,uBADd;AAEE,IAAA,eAAe,EAAE,IAFnB;AAGE,IAAA,OAAO,EAAC,GAHV;AAIE,IAAA,IAAI;AAJN,KAKG3B,KAAK,CAAC4B,GAAN,CAAU,iBAAkBC,GAAlB;AAAA,QAAGC,OAAH,SAAGA,OAAH;AAAA,QAAYC,EAAZ,SAAYA,EAAZ;AAAA,WACT,6BAAC,wBAAD;AAAc,MAAA,GAAG,EAAEA,EAAnB;AAAuB,MAAA,KAAK,EAAEF,GAA9B;AAAmC,MAAA,WAAW,EAAEE,EAAhD;AAAoD,MAAA,OAAO,EAAC;AAA5D,OACE,6BAAC,oBAAD,QAAWD,OAAX,CADF,CADS;AAAA,GAAV,CALH,CADF,CADF,EAcE,6BAAC,uBAAD;AAAa,IAAA,KAAK,EAAE;AAAEH,MAAAA,KAAK,EAAE;AAAT;AAApB,KACE,6BAAC,wBAAD;AAAc,IAAA,WAAW,EAAC,uBAA1B;AAAkD,IAAA,SAAS,MAA3D;AAA4D,IAAA,IAAI;AAAhE,KACGzB,KAAK,CAAC8B,MAAN,GACC9B,KAAK,CAAC0B,GAAN,CAAU,iBAAkBC,GAAlB;AAAA,QAAGC,OAAH,SAAGA,OAAH;AAAA,QAAYC,EAAZ,SAAYA,EAAZ;AAAA,WACR,6BAAC,wBAAD;AACE,MAAA,GAAG,EAAEA,EADP;AAEE,MAAA,KAAK,EAAEF,GAFT;AAGE,MAAA,WAAW,EAAEE,EAHf;AAIE,MAAA,OAAO,EAAC,GAJV;AAKE,MAAA,WAAW,EAAEjC;AALf,OAME,6BAAC,oBAAD,QACE,6BAAC,wBAAD;AAAc,MAAA,UAAU,EAAC,MAAzB;AAAgC,MAAA,UAAU,EAAC;AAA3C,OACE,6BAAC,uBAAD,QAAcgC,OAAd,CADF,EAEE,6BAAC,uBAAD;AAAa,MAAA,IAAI,EAAE;AAAnB,OACGhC,eAAe,GACd,6BAAC,mBAAD;AAAS,MAAA,IAAI,EAAC,OAAd;AAAsB,MAAA,KAAK,EAAC;AAA5B,MADc,GAGd,6BAAC,yBAAD;AACE,MAAA,QAAQ,EAAC,OADX;AAEE,oBAAW,QAFb;AAGE,MAAA,OAAO,EAAE;AAAA,eAAMU,MAAM,CAAC,uBAAD,EAA0BqB,GAA1B,CAAZ;AAAA;AAHX,MAJJ,CAFF,CADF,CANF,CADQ;AAAA,GAAV,CADD,GA2BC,6BAAC,wBAAD;AACE,IAAA,UAAU,EAAC,QADb;AAEE,IAAA,cAAc,EAAC,aAFjB;AAGE,IAAA,UAAU,EAAC,MAHb;AAIE,IAAA,KAAK,EAAE;AAAEI,MAAAA,MAAM,EAAE;AAAV;AAJT,KAKE,6BAAC,uBAAD;AAAa,IAAA,IAAI,EAAE;AAAnB,uBALF,CA5BJ,CADF,CAdF,CADF,CADF;AA0DD,C","sourcesContent":["import React, { useState } from 'react';\nimport {\n  EuiButtonIcon,\n  EuiDragDropContext,\n  EuiFlexGroup,\n  EuiFlexItem,\n  EuiDraggable,\n  EuiDroppable,\n  EuiIcon,\n  EuiPanel,\n} from '../../../../src/components';\n\nimport { copy, reorder } from '../../../../src/components/drag_and_drop';\n\nimport { makeId, makeList } from './helper';\n\nexport default () => {\n  const [isItemRemovable, setIsItemRemovable] = useState(false);\n  const [list1, setList1] = useState(makeList(3));\n  const [list2, setList2] = useState([]);\n  const lists = { DROPPABLE_AREA_COPY_1: list1, DROPPABLE_AREA_COPY_2: list2 };\n  const actions = {\n    DROPPABLE_AREA_COPY_1: setList1,\n    DROPPABLE_AREA_COPY_2: setList2,\n  };\n  const remove = (droppableId, index) => {\n    const list = Array.from(lists[droppableId]);\n    list.splice(index, 1);\n\n    actions[droppableId](list);\n  };\n  const onDragUpdate = ({ source, destination }) => {\n    const shouldRemove =\n      !destination && source.droppableId === 'DROPPABLE_AREA_COPY_2';\n    setIsItemRemovable(shouldRemove);\n  };\n  const onDragEnd = ({ source, destination }) => {\n    if (source && destination) {\n      if (source.droppableId === destination.droppableId) {\n        const items = reorder(\n          lists[destination.droppableId],\n          source.index,\n          destination.index\n        );\n\n        actions[destination.droppableId](items);\n      } else {\n        const sourceId = source.droppableId;\n        const destinationId = destination.droppableId;\n        const result = copy(\n          lists[sourceId],\n          lists[destinationId],\n          source,\n          destination,\n          {\n            property: 'id',\n            modifier: makeId,\n          }\n        );\n\n        actions[sourceId](result[sourceId]);\n        actions[destinationId](result[destinationId]);\n      }\n    } else if (!destination && source.droppableId === 'DROPPABLE_AREA_COPY_2') {\n      remove(source.droppableId, source.index);\n    }\n  };\n  return (\n    <EuiDragDropContext onDragEnd={onDragEnd} onDragUpdate={onDragUpdate}>\n      <EuiFlexGroup>\n        <EuiFlexItem style={{ width: '50%' }}>\n          <EuiDroppable\n            droppableId=\"DROPPABLE_AREA_COPY_1\"\n            cloneDraggables={true}\n            spacing=\"l\"\n            grow>\n            {list1.map(({ content, id }, idx) => (\n              <EuiDraggable key={id} index={idx} draggableId={id} spacing=\"l\">\n                <EuiPanel>{content}</EuiPanel>\n              </EuiDraggable>\n            ))}\n          </EuiDroppable>\n        </EuiFlexItem>\n        <EuiFlexItem style={{ width: '50%' }}>\n          <EuiDroppable droppableId=\"DROPPABLE_AREA_COPY_2\" withPanel grow>\n            {list2.length ? (\n              list2.map(({ content, id }, idx) => (\n                <EuiDraggable\n                  key={id}\n                  index={idx}\n                  draggableId={id}\n                  spacing=\"l\"\n                  isRemovable={isItemRemovable}>\n                  <EuiPanel>\n                    <EuiFlexGroup gutterSize=\"none\" alignItems=\"center\">\n                      <EuiFlexItem>{content}</EuiFlexItem>\n                      <EuiFlexItem grow={false}>\n                        {isItemRemovable ? (\n                          <EuiIcon type=\"trash\" color=\"danger\" />\n                        ) : (\n                          <EuiButtonIcon\n                            iconType=\"cross\"\n                            aria-label=\"Remove\"\n                            onClick={() => remove('DROPPABLE_AREA_COPY_2', idx)}\n                          />\n                        )}\n                      </EuiFlexItem>\n                    </EuiFlexGroup>\n                  </EuiPanel>\n                </EuiDraggable>\n              ))\n            ) : (\n              <EuiFlexGroup\n                alignItems=\"center\"\n                justifyContent=\"spaceAround\"\n                gutterSize=\"none\"\n                style={{ height: '100%' }}>\n                <EuiFlexItem grow={false}>Drop Items Here</EuiFlexItem>\n              </EuiFlexGroup>\n            )}\n          </EuiDroppable>\n        </EuiFlexItem>\n      </EuiFlexGroup>\n    </EuiDragDropContext>\n  );\n};\n"]}]}