{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/date_picker/date_picker.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/date_picker/date_picker.js","mtime":1567626462143},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EuiDatePicker = exports.euiDatePickerDefaultTimeFormat = exports.euiDatePickerDefaultDateFormat = void 0;\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/es6.object.assign\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.object.set-prototype-of\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _packages = require(\"../../../packages\");\n\nvar _form_control_layout = require(\"../form/form_control_layout\");\n\nvar _validatable_control = require(\"../form/validatable_control\");\n\nvar _error_boundary = require(\"../error_boundary\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar euiDatePickerDefaultDateFormat = 'MM/DD/YYYY';\nexports.euiDatePickerDefaultDateFormat = euiDatePickerDefaultDateFormat;\nvar euiDatePickerDefaultTimeFormat = 'hh:mm A';\nexports.euiDatePickerDefaultTimeFormat = euiDatePickerDefaultTimeFormat;\n\nvar EuiDatePicker =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EuiDatePicker, _Component);\n\n  function EuiDatePicker() {\n    _classCallCheck(this, EuiDatePicker);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(EuiDatePicker).apply(this, arguments));\n  }\n\n  _createClass(EuiDatePicker, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          adjustDateOnChange = _this$props.adjustDateOnChange,\n          calendarClassName = _this$props.calendarClassName,\n          className = _this$props.className,\n          customInput = _this$props.customInput,\n          dateFormat = _this$props.dateFormat,\n          dayClassName = _this$props.dayClassName,\n          disabled = _this$props.disabled,\n          excludeDates = _this$props.excludeDates,\n          filterDates = _this$props.filterDates,\n          fullWidth = _this$props.fullWidth,\n          injectTimes = _this$props.injectTimes,\n          inline = _this$props.inline,\n          inputRef = _this$props.inputRef,\n          isInvalid = _this$props.isInvalid,\n          isLoading = _this$props.isLoading,\n          locale = _this$props.locale,\n          maxDate = _this$props.maxDate,\n          maxTime = _this$props.maxTime,\n          minDate = _this$props.minDate,\n          minTime = _this$props.minTime,\n          onChange = _this$props.onChange,\n          onClear = _this$props.onClear,\n          openToDate = _this$props.openToDate,\n          placeholder = _this$props.placeholder,\n          popperClassName = _this$props.popperClassName,\n          selected = _this$props.selected,\n          shadow = _this$props.shadow,\n          shouldCloseOnSelect = _this$props.shouldCloseOnSelect,\n          showIcon = _this$props.showIcon,\n          showTimeSelect = _this$props.showTimeSelect,\n          showTimeSelectOnly = _this$props.showTimeSelectOnly,\n          timeFormat = _this$props.timeFormat,\n          utcOffset = _this$props.utcOffset,\n          rest = _objectWithoutProperties(_this$props, [\"adjustDateOnChange\", \"calendarClassName\", \"className\", \"customInput\", \"dateFormat\", \"dayClassName\", \"disabled\", \"excludeDates\", \"filterDates\", \"fullWidth\", \"injectTimes\", \"inline\", \"inputRef\", \"isInvalid\", \"isLoading\", \"locale\", \"maxDate\", \"maxTime\", \"minDate\", \"minTime\", \"onChange\", \"onClear\", \"openToDate\", \"placeholder\", \"popperClassName\", \"selected\", \"shadow\", \"shouldCloseOnSelect\", \"showIcon\", \"showTimeSelect\", \"showTimeSelectOnly\", \"timeFormat\", \"utcOffset\"]);\n\n      var classes = (0, _classnames.default)('euiDatePicker', {\n        'euiDatePicker--shadow': shadow,\n        'euiDatePicker--inline': inline\n      });\n      var datePickerClasses = (0, _classnames.default)('euiDatePicker', 'euiFieldText', {\n        'euiFieldText--fullWidth': fullWidth,\n        'euiFieldText-isLoading': isLoading,\n        'euiFieldText--withIcon': !inline && showIcon,\n        'euiFieldText-isInvalid': isInvalid\n      }, className);\n      var optionalIcon;\n\n      if (inline || customInput || !showIcon) {\n        optionalIcon = null;\n      } else if (showTimeSelectOnly) {\n        optionalIcon = 'clock';\n      } else {\n        optionalIcon = 'calendar';\n      } // In case the consumer did not alter the default date format but wants\n      // to add the time select, we append the default time format\n\n\n      var fullDateFormat = dateFormat;\n\n      if (showTimeSelect && dateFormat === euiDatePickerDefaultDateFormat) {\n        fullDateFormat = \"\".concat(dateFormat, \" \").concat(timeFormat);\n      } // EuiDatePicker only supports a subset of props from react-datepicker. Using any of\n      // the unsupported props below will spit out an error.\n\n\n      var PropNotSupported = function PropNotSupported() {\n        throw new Error(\"You are using a prop from react-datepicker that EuiDatePicker\\n        does not support. Please check the EUI documentation for more information.\");\n      };\n\n      if ( // We don't want to show multiple months next to each other\n      this.props.monthsShown || // There is no need to show week numbers\n      this.props.showWeekNumbers || // Our css adapts to height, no need to fix it\n      this.props.fixedHeight || // We force the month / year selection UI. No need to configure it\n      this.props.dropdownMode || // Short month is uncessary. Our UI has plenty of room for full months\n      this.props.useShortMonthInDropdown || // The today button is not needed. This should always be external to the calendar\n      this.props.todayButton || // We hide the time caption, so there is no need to overwrite its text\n      this.props.timeCaption || // We always want keyboard accessibility on\n      this.props.disabledKeyboardNavigation || // This is easy enough to do. It can conflict with isLoading state\n      this.props.isClearable || // There is no reason to launch the datepicker in its own modal. Can always build these ourselves\n      this.props.withPortal) {\n        return _react.default.createElement(_error_boundary.EuiErrorBoundary, null, _react.default.createElement(PropNotSupported, null));\n      }\n\n      return _react.default.createElement(\"span\", null, _react.default.createElement(\"span\", {\n        className: classes\n      }, _react.default.createElement(_form_control_layout.EuiFormControlLayout, {\n        icon: optionalIcon,\n        fullWidth: fullWidth,\n        clear: selected && onClear ? {\n          onClick: onClear\n        } : null,\n        isLoading: isLoading\n      }, _react.default.createElement(_validatable_control.EuiValidatableControl, {\n        isInvalid: isInvalid\n      }, _react.default.createElement(_packages.ReactDatePicker, _extends({\n        adjustDateOnChange: adjustDateOnChange,\n        calendarClassName: calendarClassName,\n        className: datePickerClasses,\n        customInput: customInput,\n        dateFormat: fullDateFormat,\n        dayClassName: dayClassName,\n        disabled: disabled,\n        excludeDates: excludeDates,\n        filterDates: filterDates,\n        injectTimes: injectTimes,\n        inline: inline,\n        locale: locale,\n        maxDate: maxDate,\n        maxTime: maxTime,\n        minDate: minDate,\n        minTime: minTime,\n        onChange: onChange,\n        openToDate: openToDate,\n        placeholderText: placeholder,\n        popperClassName: popperClassName,\n        ref: inputRef,\n        selected: selected,\n        shouldCloseOnSelect: shouldCloseOnSelect,\n        showMonthDropdown: true,\n        showTimeSelect: showTimeSelect,\n        showTimeSelectOnly: showTimeSelectOnly,\n        showYearDropdown: true,\n        timeFormat: timeFormat,\n        utcOffset: utcOffset,\n        yearDropdownItemNumber: 7,\n        accessibleMode: true\n      }, rest))))));\n    }\n  }]);\n\n  return EuiDatePicker;\n}(_react.Component);\n\nexports.EuiDatePicker = EuiDatePicker;\nEuiDatePicker.propTypes = {\n  /**\n   * Whether changes to Year and Month (via dropdowns) should trigger `onChange`\n   */\n  adjustDateOnChange: _propTypes.default.bool,\n\n  /**\n   * Optional class added to the calendar portion of datepicker\n   */\n  calendarClassName: _propTypes.default.string,\n\n  /**\n   * Added to the actual input of the calendar\n   */\n  className: _propTypes.default.string,\n\n  /**\n   * Replaces the input with any node, like a button\n   */\n  customInput: _propTypes.default.node,\n\n  /**\n   * Accepts any moment format string\n   */\n  dateFormat: _propTypes.default.string,\n\n  /**\n   * Applies classes to the numbered days provided. Check docs for example.\n   */\n  dayClassName: _propTypes.default.func,\n\n  /**\n   * Array of dates allowed. Check docs for example.\n   */\n  filterDates: _propTypes.default.array,\n\n  /**\n   * Makes the input full width\n   */\n  fullWidth: _propTypes.default.bool,\n\n  /**\n   * Adds additional times to the time selector other then :30 increments\n   */\n  injectTimes: _propTypes.default.array,\n\n  /**\n   * Applies ref to the input\n   */\n  inputRef: _propTypes.default.func,\n\n  /**\n   * Provides styling to the input when invalid\n   */\n  isInvalid: _propTypes.default.bool,\n\n  /**\n   * Provides styling to the input when loading\n   */\n  isLoading: _propTypes.default.bool,\n\n  /**\n   * Switches the locale / display. \"en-us\", \"zn-ch\"...etc\n   */\n  locale: _propTypes.default.string,\n\n  /**\n   * The max date accepted (in moment format) as a selection\n   */\n  maxDate: _propTypes.default.instanceOf(_moment.default),\n\n  /**\n   * The max time accepted (in moment format) as a selection\n   */\n  maxTime: _propTypes.default.instanceOf(_moment.default),\n\n  /**\n   * The min date accepted (in moment format) as a selection\n   */\n  minDate: _propTypes.default.instanceOf(_moment.default),\n\n  /**\n   * The min time accepted (in moment format) as a selection\n   */\n  minTime: _propTypes.default.instanceOf(_moment.default),\n\n  /**\n   * What to do when the input changes\n   */\n  onChange: _propTypes.default.func,\n\n  /**\n   * What to do when the input is cleared by the x icon\n   */\n  onClear: _propTypes.default.func,\n\n  /**\n   * Opens to this date (in moment format) on first press, regardless of selection\n   */\n  openToDate: _propTypes.default.instanceOf(_moment.default),\n\n  /**\n   * Shows only when no date is selected\n   */\n  placeholder: _propTypes.default.string,\n\n  /**\n   * Class applied to the popup, when inline is false\n   */\n  popperClassName: _propTypes.default.string,\n\n  /**\n   * The selected datetime (in moment format)\n   */\n  selected: _propTypes.default.instanceOf(_moment.default),\n\n  /**\n   * Can turn the shadow off if using the inline prop\n   */\n  shadow: _propTypes.default.bool,\n\n  /**\n   * Will close the popup on selection\n   */\n  shouldCloseOnSelect: _propTypes.default.bool,\n\n  /**\n   * Show the icon in input\n   */\n  showIcon: _propTypes.default.bool,\n\n  /**\n   * Show the time selection alongside the calendar\n   */\n  showTimeSelect: _propTypes.default.bool,\n\n  /**\n   * Only show the time selector, not the calendar\n   */\n  showTimeSelectOnly: _propTypes.default.bool,\n\n  /**\n   * The format of the time within the selector, in moment notation\n   */\n  timeFormat: _propTypes.default.string\n};\nEuiDatePicker.defaultProps = {\n  adjustDateOnChange: true,\n  dateFormat: euiDatePickerDefaultDateFormat,\n  fullWidth: false,\n  isLoading: false,\n  shadow: true,\n  shouldCloseOnSelect: true,\n  showIcon: true,\n  showTimeSelect: false,\n  timeFormat: euiDatePickerDefaultTimeFormat\n};\nEuiDatePicker.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"EuiDatePicker\",\n  \"props\": {\n    \"adjustDateOnChange\": {\n      \"defaultValue\": {\n        \"value\": \"true\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Whether changes to Year and Month (via dropdowns) should trigger `onChange`\"\n    },\n    \"dateFormat\": {\n      \"defaultValue\": {\n        \"value\": \"'MM/DD/YYYY'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Accepts any moment format string\"\n    },\n    \"fullWidth\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Makes the input full width\"\n    },\n    \"isLoading\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Provides styling to the input when loading\"\n    },\n    \"shadow\": {\n      \"defaultValue\": {\n        \"value\": \"true\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Can turn the shadow off if using the inline prop\"\n    },\n    \"shouldCloseOnSelect\": {\n      \"defaultValue\": {\n        \"value\": \"true\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Will close the popup on selection\"\n    },\n    \"showIcon\": {\n      \"defaultValue\": {\n        \"value\": \"true\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Show the icon in input\"\n    },\n    \"showTimeSelect\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Show the time selection alongside the calendar\"\n    },\n    \"timeFormat\": {\n      \"defaultValue\": {\n        \"value\": \"'hh:mm A'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"The format of the time within the selector, in moment notation\"\n    },\n    \"calendarClassName\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Optional class added to the calendar portion of datepicker\"\n    },\n    \"className\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Added to the actual input of the calendar\"\n    },\n    \"customInput\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Replaces the input with any node, like a button\"\n    },\n    \"dayClassName\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"Applies classes to the numbered days provided. Check docs for example.\"\n    },\n    \"filterDates\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": false,\n      \"description\": \"Array of dates allowed. Check docs for example.\"\n    },\n    \"injectTimes\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": false,\n      \"description\": \"Adds additional times to the time selector other then :30 increments\"\n    },\n    \"inputRef\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"Applies ref to the input\"\n    },\n    \"isInvalid\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Provides styling to the input when invalid\"\n    },\n    \"locale\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Switches the locale / display. \\\"en-us\\\", \\\"zn-ch\\\"...etc\"\n    },\n    \"maxDate\": {\n      \"type\": {\n        \"name\": \"instanceOf\",\n        \"value\": \"moment\"\n      },\n      \"required\": false,\n      \"description\": \"The max date accepted (in moment format) as a selection\"\n    },\n    \"maxTime\": {\n      \"type\": {\n        \"name\": \"instanceOf\",\n        \"value\": \"moment\"\n      },\n      \"required\": false,\n      \"description\": \"The max time accepted (in moment format) as a selection\"\n    },\n    \"minDate\": {\n      \"type\": {\n        \"name\": \"instanceOf\",\n        \"value\": \"moment\"\n      },\n      \"required\": false,\n      \"description\": \"The min date accepted (in moment format) as a selection\"\n    },\n    \"minTime\": {\n      \"type\": {\n        \"name\": \"instanceOf\",\n        \"value\": \"moment\"\n      },\n      \"required\": false,\n      \"description\": \"The min time accepted (in moment format) as a selection\"\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"What to do when the input changes\"\n    },\n    \"onClear\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"What to do when the input is cleared by the x icon\"\n    },\n    \"openToDate\": {\n      \"type\": {\n        \"name\": \"instanceOf\",\n        \"value\": \"moment\"\n      },\n      \"required\": false,\n      \"description\": \"Opens to this date (in moment format) on first press, regardless of selection\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Shows only when no date is selected\"\n    },\n    \"popperClassName\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Class applied to the popup, when inline is false\"\n    },\n    \"selected\": {\n      \"type\": {\n        \"name\": \"instanceOf\",\n        \"value\": \"moment\"\n      },\n      \"required\": false,\n      \"description\": \"The selected datetime (in moment format)\"\n    },\n    \"showTimeSelectOnly\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Only show the time selector, not the calendar\"\n    }\n  }\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/date_picker/date_picker.js"],"names":["euiDatePickerDefaultDateFormat","euiDatePickerDefaultTimeFormat","EuiDatePicker","props","adjustDateOnChange","calendarClassName","className","customInput","dateFormat","dayClassName","disabled","excludeDates","filterDates","fullWidth","injectTimes","inline","inputRef","isInvalid","isLoading","locale","maxDate","maxTime","minDate","minTime","onChange","onClear","openToDate","placeholder","popperClassName","selected","shadow","shouldCloseOnSelect","showIcon","showTimeSelect","showTimeSelectOnly","timeFormat","utcOffset","rest","classes","datePickerClasses","optionalIcon","fullDateFormat","PropNotSupported","Error","monthsShown","showWeekNumbers","fixedHeight","dropdownMode","useShortMonthInDropdown","todayButton","timeCaption","disabledKeyboardNavigation","isClearable","withPortal","onClick","Component","propTypes","PropTypes","bool","string","node","func","array","instanceOf","moment","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AAEA;;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEO,IAAMA,8BAA8B,GAAG,YAAvC;;AACA,IAAMC,8BAA8B,GAAG,SAAvC;;;IAEMC,a;;;;;;;;;;;;;6BACF;AAAA,wBAoCH,KAAKC,KApCF;AAAA,UAELC,kBAFK,eAELA,kBAFK;AAAA,UAGLC,iBAHK,eAGLA,iBAHK;AAAA,UAILC,SAJK,eAILA,SAJK;AAAA,UAKLC,WALK,eAKLA,WALK;AAAA,UAMLC,UANK,eAMLA,UANK;AAAA,UAOLC,YAPK,eAOLA,YAPK;AAAA,UAQLC,QARK,eAQLA,QARK;AAAA,UASLC,YATK,eASLA,YATK;AAAA,UAULC,WAVK,eAULA,WAVK;AAAA,UAWLC,SAXK,eAWLA,SAXK;AAAA,UAYLC,WAZK,eAYLA,WAZK;AAAA,UAaLC,MAbK,eAaLA,MAbK;AAAA,UAcLC,QAdK,eAcLA,QAdK;AAAA,UAeLC,SAfK,eAeLA,SAfK;AAAA,UAgBLC,SAhBK,eAgBLA,SAhBK;AAAA,UAiBLC,MAjBK,eAiBLA,MAjBK;AAAA,UAkBLC,OAlBK,eAkBLA,OAlBK;AAAA,UAmBLC,OAnBK,eAmBLA,OAnBK;AAAA,UAoBLC,OApBK,eAoBLA,OApBK;AAAA,UAqBLC,OArBK,eAqBLA,OArBK;AAAA,UAsBLC,QAtBK,eAsBLA,QAtBK;AAAA,UAuBLC,OAvBK,eAuBLA,OAvBK;AAAA,UAwBLC,UAxBK,eAwBLA,UAxBK;AAAA,UAyBLC,WAzBK,eAyBLA,WAzBK;AAAA,UA0BLC,eA1BK,eA0BLA,eA1BK;AAAA,UA2BLC,QA3BK,eA2BLA,QA3BK;AAAA,UA4BLC,MA5BK,eA4BLA,MA5BK;AAAA,UA6BLC,mBA7BK,eA6BLA,mBA7BK;AAAA,UA8BLC,QA9BK,eA8BLA,QA9BK;AAAA,UA+BLC,cA/BK,eA+BLA,cA/BK;AAAA,UAgCLC,kBAhCK,eAgCLA,kBAhCK;AAAA,UAiCLC,UAjCK,eAiCLA,UAjCK;AAAA,UAkCLC,SAlCK,eAkCLA,SAlCK;AAAA,UAmCFC,IAnCE;;AAsCP,UAAMC,OAAO,GAAG,yBAAW,eAAX,EAA4B;AAC1C,iCAAyBR,MADiB;AAE1C,iCAAyBf;AAFiB,OAA5B,CAAhB;AAKA,UAAMwB,iBAAiB,GAAG,yBACxB,eADwB,EAExB,cAFwB,EAGxB;AACE,mCAA2B1B,SAD7B;AAEE,kCAA0BK,SAF5B;AAGE,kCAA0B,CAACH,MAAD,IAAWiB,QAHvC;AAIE,kCAA0Bf;AAJ5B,OAHwB,EASxBX,SATwB,CAA1B;AAYA,UAAIkC,YAAJ;;AACA,UAAIzB,MAAM,IAAIR,WAAV,IAAyB,CAACyB,QAA9B,EAAwC;AACtCQ,QAAAA,YAAY,GAAG,IAAf;AACD,OAFD,MAEO,IAAIN,kBAAJ,EAAwB;AAC7BM,QAAAA,YAAY,GAAG,OAAf;AACD,OAFM,MAEA;AACLA,QAAAA,YAAY,GAAG,UAAf;AACD,OA9DM,CAgEP;AACA;;;AACA,UAAIC,cAAc,GAAGjC,UAArB;;AACA,UAAIyB,cAAc,IAAIzB,UAAU,KAAKR,8BAArC,EAAqE;AACnEyC,QAAAA,cAAc,aAAMjC,UAAN,cAAoB2B,UAApB,CAAd;AACD,OArEM,CAuEP;AACA;;;AACA,UAAMO,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7B,cAAM,IAAIC,KAAJ,qJAAN;AAED,OAHD;;AAKA,WACE;AACA,WAAKxC,KAAL,CAAWyC,WAAX,IACA;AACA,WAAKzC,KAAL,CAAW0C,eAFX,IAGA;AACA,WAAK1C,KAAL,CAAW2C,WAJX,IAKA;AACA,WAAK3C,KAAL,CAAW4C,YANX,IAOA;AACA,WAAK5C,KAAL,CAAW6C,uBARX,IASA;AACA,WAAK7C,KAAL,CAAW8C,WAVX,IAWA;AACA,WAAK9C,KAAL,CAAW+C,WAZX,IAaA;AACA,WAAK/C,KAAL,CAAWgD,0BAdX,IAeA;AACA,WAAKhD,KAAL,CAAWiD,WAhBX,IAiBA;AACA,WAAKjD,KAAL,CAAWkD,UApBb,EAqBE;AACA,eACE,6BAAC,gCAAD,QACE,6BAAC,gBAAD,OADF,CADF;AAKD;;AAED,aACE,2CACE;AAAM,QAAA,SAAS,EAAEf;AAAjB,SACE,6BAAC,yCAAD;AACE,QAAA,IAAI,EAAEE,YADR;AAEE,QAAA,SAAS,EAAE3B,SAFb;AAGE,QAAA,KAAK,EAAEgB,QAAQ,IAAIJ,OAAZ,GAAsB;AAAE6B,UAAAA,OAAO,EAAE7B;AAAX,SAAtB,GAA6C,IAHtD;AAIE,QAAA,SAAS,EAAEP;AAJb,SAKE,6BAAC,0CAAD;AAAuB,QAAA,SAAS,EAAED;AAAlC,SACE,6BAAC,yBAAD;AACE,QAAA,kBAAkB,EAAEb,kBADtB;AAEE,QAAA,iBAAiB,EAAEC,iBAFrB;AAGE,QAAA,SAAS,EAAEkC,iBAHb;AAIE,QAAA,WAAW,EAAEhC,WAJf;AAKE,QAAA,UAAU,EAAEkC,cALd;AAME,QAAA,YAAY,EAAEhC,YANhB;AAOE,QAAA,QAAQ,EAAEC,QAPZ;AAQE,QAAA,YAAY,EAAEC,YARhB;AASE,QAAA,WAAW,EAAEC,WATf;AAUE,QAAA,WAAW,EAAEE,WAVf;AAWE,QAAA,MAAM,EAAEC,MAXV;AAYE,QAAA,MAAM,EAAEI,MAZV;AAaE,QAAA,OAAO,EAAEC,OAbX;AAcE,QAAA,OAAO,EAAEC,OAdX;AAeE,QAAA,OAAO,EAAEC,OAfX;AAgBE,QAAA,OAAO,EAAEC,OAhBX;AAiBE,QAAA,QAAQ,EAAEC,QAjBZ;AAkBE,QAAA,UAAU,EAAEE,UAlBd;AAmBE,QAAA,eAAe,EAAEC,WAnBnB;AAoBE,QAAA,eAAe,EAAEC,eApBnB;AAqBE,QAAA,GAAG,EAAEZ,QArBP;AAsBE,QAAA,QAAQ,EAAEa,QAtBZ;AAuBE,QAAA,mBAAmB,EAAEE,mBAvBvB;AAwBE,QAAA,iBAAiB,MAxBnB;AAyBE,QAAA,cAAc,EAAEE,cAzBlB;AA0BE,QAAA,kBAAkB,EAAEC,kBA1BtB;AA2BE,QAAA,gBAAgB,MA3BlB;AA4BE,QAAA,UAAU,EAAEC,UA5Bd;AA6BE,QAAA,SAAS,EAAEC,SA7Bb;AA8BE,QAAA,sBAAsB,EAAE,CA9B1B;AA+BE,QAAA,cAAc,EAAE;AA/BlB,SAgCMC,IAhCN,EADF,CALF,CADF,CADF,CADF;AAgDD;;;;EA5JgCkB,gB;;;AA+JnCrD,aAAa,CAACsD,SAAd,GAA0B;AACxB;;;AAGApD,EAAAA,kBAAkB,EAAEqD,mBAAUC,IAJN;;AAKxB;;;AAGArD,EAAAA,iBAAiB,EAAEoD,mBAAUE,MARL;;AAUxB;;;AAGArD,EAAAA,SAAS,EAAEmD,mBAAUE,MAbG;;AAcxB;;;AAGApD,EAAAA,WAAW,EAAEkD,mBAAUG,IAjBC;;AAkBxB;;;AAGApD,EAAAA,UAAU,EAAEiD,mBAAUE,MArBE;;AAsBxB;;;AAGAlD,EAAAA,YAAY,EAAEgD,mBAAUI,IAzBA;;AA2BxB;;;AAGAjD,EAAAA,WAAW,EAAE6C,mBAAUK,KA9BC;;AA+BxB;;;AAGAjD,EAAAA,SAAS,EAAE4C,mBAAUC,IAlCG;;AAmCxB;;;AAGA5C,EAAAA,WAAW,EAAE2C,mBAAUK,KAtCC;;AAuCxB;;;AAGA9C,EAAAA,QAAQ,EAAEyC,mBAAUI,IA1CI;;AA2CxB;;;AAGA5C,EAAAA,SAAS,EAAEwC,mBAAUC,IA9CG;;AA+CxB;;;AAGAxC,EAAAA,SAAS,EAAEuC,mBAAUC,IAlDG;;AAmDxB;;;AAGAvC,EAAAA,MAAM,EAAEsC,mBAAUE,MAtDM;;AAuDxB;;;AAGAvC,EAAAA,OAAO,EAAEqC,mBAAUM,UAAV,CAAqBC,eAArB,CA1De;;AA2DxB;;;AAGA3C,EAAAA,OAAO,EAAEoC,mBAAUM,UAAV,CAAqBC,eAArB,CA9De;;AA+DxB;;;AAGA1C,EAAAA,OAAO,EAAEmC,mBAAUM,UAAV,CAAqBC,eAArB,CAlEe;;AAmExB;;;AAGAzC,EAAAA,OAAO,EAAEkC,mBAAUM,UAAV,CAAqBC,eAArB,CAtEe;;AAuExB;;;AAGAxC,EAAAA,QAAQ,EAAEiC,mBAAUI,IA1EI;;AA2ExB;;;AAGApC,EAAAA,OAAO,EAAEgC,mBAAUI,IA9EK;;AA+ExB;;;AAGAnC,EAAAA,UAAU,EAAE+B,mBAAUM,UAAV,CAAqBC,eAArB,CAlFY;;AAmFxB;;;AAGArC,EAAAA,WAAW,EAAE8B,mBAAUE,MAtFC;;AAuFxB;;;AAGA/B,EAAAA,eAAe,EAAE6B,mBAAUE,MA1FH;;AA2FxB;;;AAGA9B,EAAAA,QAAQ,EAAE4B,mBAAUM,UAAV,CAAqBC,eAArB,CA9Fc;;AA+FxB;;;AAGAlC,EAAAA,MAAM,EAAE2B,mBAAUC,IAlGM;;AAmGxB;;;AAGA3B,EAAAA,mBAAmB,EAAE0B,mBAAUC,IAtGP;;AAuGxB;;;AAGA1B,EAAAA,QAAQ,EAAEyB,mBAAUC,IA1GI;;AA2GxB;;;AAGAzB,EAAAA,cAAc,EAAEwB,mBAAUC,IA9GF;;AA+GxB;;;AAGAxB,EAAAA,kBAAkB,EAAEuB,mBAAUC,IAlHN;;AAmHxB;;;AAGAvB,EAAAA,UAAU,EAAEsB,mBAAUE;AAtHE,CAA1B;AAyHAzD,aAAa,CAAC+D,YAAd,GAA6B;AAC3B7D,EAAAA,kBAAkB,EAAE,IADO;AAE3BI,EAAAA,UAAU,EAAER,8BAFe;AAG3Ba,EAAAA,SAAS,EAAE,KAHgB;AAI3BK,EAAAA,SAAS,EAAE,KAJgB;AAK3BY,EAAAA,MAAM,EAAE,IALmB;AAM3BC,EAAAA,mBAAmB,EAAE,IANM;AAO3BC,EAAAA,QAAQ,EAAE,IAPiB;AAQ3BC,EAAAA,cAAc,EAAE,KARW;AAS3BE,EAAAA,UAAU,EAAElC;AATe,CAA7B","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport moment from 'moment';\nimport { ReactDatePicker as DatePicker } from '../../../packages';\n\nimport { EuiFormControlLayout } from '../form/form_control_layout';\n\nimport { EuiValidatableControl } from '../form/validatable_control';\n\nimport { EuiErrorBoundary } from '../error_boundary';\n\nexport const euiDatePickerDefaultDateFormat = 'MM/DD/YYYY';\nexport const euiDatePickerDefaultTimeFormat = 'hh:mm A';\n\nexport class EuiDatePicker extends Component {\n  render() {\n    const {\n      adjustDateOnChange,\n      calendarClassName,\n      className,\n      customInput,\n      dateFormat,\n      dayClassName,\n      disabled,\n      excludeDates,\n      filterDates,\n      fullWidth,\n      injectTimes,\n      inline,\n      inputRef,\n      isInvalid,\n      isLoading,\n      locale,\n      maxDate,\n      maxTime,\n      minDate,\n      minTime,\n      onChange,\n      onClear,\n      openToDate,\n      placeholder,\n      popperClassName,\n      selected,\n      shadow,\n      shouldCloseOnSelect,\n      showIcon,\n      showTimeSelect,\n      showTimeSelectOnly,\n      timeFormat,\n      utcOffset,\n      ...rest\n    } = this.props;\n\n    const classes = classNames('euiDatePicker', {\n      'euiDatePicker--shadow': shadow,\n      'euiDatePicker--inline': inline,\n    });\n\n    const datePickerClasses = classNames(\n      'euiDatePicker',\n      'euiFieldText',\n      {\n        'euiFieldText--fullWidth': fullWidth,\n        'euiFieldText-isLoading': isLoading,\n        'euiFieldText--withIcon': !inline && showIcon,\n        'euiFieldText-isInvalid': isInvalid,\n      },\n      className\n    );\n\n    let optionalIcon;\n    if (inline || customInput || !showIcon) {\n      optionalIcon = null;\n    } else if (showTimeSelectOnly) {\n      optionalIcon = 'clock';\n    } else {\n      optionalIcon = 'calendar';\n    }\n\n    // In case the consumer did not alter the default date format but wants\n    // to add the time select, we append the default time format\n    let fullDateFormat = dateFormat;\n    if (showTimeSelect && dateFormat === euiDatePickerDefaultDateFormat) {\n      fullDateFormat = `${dateFormat} ${timeFormat}`;\n    }\n\n    // EuiDatePicker only supports a subset of props from react-datepicker. Using any of\n    // the unsupported props below will spit out an error.\n    const PropNotSupported = () => {\n      throw new Error(`You are using a prop from react-datepicker that EuiDatePicker\n        does not support. Please check the EUI documentation for more information.`);\n    };\n\n    if (\n      // We don't want to show multiple months next to each other\n      this.props.monthsShown ||\n      // There is no need to show week numbers\n      this.props.showWeekNumbers ||\n      // Our css adapts to height, no need to fix it\n      this.props.fixedHeight ||\n      // We force the month / year selection UI. No need to configure it\n      this.props.dropdownMode ||\n      // Short month is uncessary. Our UI has plenty of room for full months\n      this.props.useShortMonthInDropdown ||\n      // The today button is not needed. This should always be external to the calendar\n      this.props.todayButton ||\n      // We hide the time caption, so there is no need to overwrite its text\n      this.props.timeCaption ||\n      // We always want keyboard accessibility on\n      this.props.disabledKeyboardNavigation ||\n      // This is easy enough to do. It can conflict with isLoading state\n      this.props.isClearable ||\n      // There is no reason to launch the datepicker in its own modal. Can always build these ourselves\n      this.props.withPortal\n    ) {\n      return (\n        <EuiErrorBoundary>\n          <PropNotSupported />\n        </EuiErrorBoundary>\n      );\n    }\n\n    return (\n      <span>\n        <span className={classes}>\n          <EuiFormControlLayout\n            icon={optionalIcon}\n            fullWidth={fullWidth}\n            clear={selected && onClear ? { onClick: onClear } : null}\n            isLoading={isLoading}>\n            <EuiValidatableControl isInvalid={isInvalid}>\n              <DatePicker\n                adjustDateOnChange={adjustDateOnChange}\n                calendarClassName={calendarClassName}\n                className={datePickerClasses}\n                customInput={customInput}\n                dateFormat={fullDateFormat}\n                dayClassName={dayClassName}\n                disabled={disabled}\n                excludeDates={excludeDates}\n                filterDates={filterDates}\n                injectTimes={injectTimes}\n                inline={inline}\n                locale={locale}\n                maxDate={maxDate}\n                maxTime={maxTime}\n                minDate={minDate}\n                minTime={minTime}\n                onChange={onChange}\n                openToDate={openToDate}\n                placeholderText={placeholder}\n                popperClassName={popperClassName}\n                ref={inputRef}\n                selected={selected}\n                shouldCloseOnSelect={shouldCloseOnSelect}\n                showMonthDropdown\n                showTimeSelect={showTimeSelect}\n                showTimeSelectOnly={showTimeSelectOnly}\n                showYearDropdown\n                timeFormat={timeFormat}\n                utcOffset={utcOffset}\n                yearDropdownItemNumber={7}\n                accessibleMode={true}\n                {...rest}\n              />\n            </EuiValidatableControl>\n          </EuiFormControlLayout>\n        </span>\n      </span>\n    );\n  }\n}\n\nEuiDatePicker.propTypes = {\n  /**\n   * Whether changes to Year and Month (via dropdowns) should trigger `onChange`\n   */\n  adjustDateOnChange: PropTypes.bool,\n  /**\n   * Optional class added to the calendar portion of datepicker\n   */\n  calendarClassName: PropTypes.string,\n\n  /**\n   * Added to the actual input of the calendar\n   */\n  className: PropTypes.string,\n  /**\n   * Replaces the input with any node, like a button\n   */\n  customInput: PropTypes.node,\n  /**\n   * Accepts any moment format string\n   */\n  dateFormat: PropTypes.string,\n  /**\n   * Applies classes to the numbered days provided. Check docs for example.\n   */\n  dayClassName: PropTypes.func,\n\n  /**\n   * Array of dates allowed. Check docs for example.\n   */\n  filterDates: PropTypes.array,\n  /**\n   * Makes the input full width\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * Adds additional times to the time selector other then :30 increments\n   */\n  injectTimes: PropTypes.array,\n  /**\n   * Applies ref to the input\n   */\n  inputRef: PropTypes.func,\n  /**\n   * Provides styling to the input when invalid\n   */\n  isInvalid: PropTypes.bool,\n  /**\n   * Provides styling to the input when loading\n   */\n  isLoading: PropTypes.bool,\n  /**\n   * Switches the locale / display. \"en-us\", \"zn-ch\"...etc\n   */\n  locale: PropTypes.string,\n  /**\n   * The max date accepted (in moment format) as a selection\n   */\n  maxDate: PropTypes.instanceOf(moment),\n  /**\n   * The max time accepted (in moment format) as a selection\n   */\n  maxTime: PropTypes.instanceOf(moment),\n  /**\n   * The min date accepted (in moment format) as a selection\n   */\n  minDate: PropTypes.instanceOf(moment),\n  /**\n   * The min time accepted (in moment format) as a selection\n   */\n  minTime: PropTypes.instanceOf(moment),\n  /**\n   * What to do when the input changes\n   */\n  onChange: PropTypes.func,\n  /**\n   * What to do when the input is cleared by the x icon\n   */\n  onClear: PropTypes.func,\n  /**\n   * Opens to this date (in moment format) on first press, regardless of selection\n   */\n  openToDate: PropTypes.instanceOf(moment),\n  /**\n   * Shows only when no date is selected\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Class applied to the popup, when inline is false\n   */\n  popperClassName: PropTypes.string,\n  /**\n   * The selected datetime (in moment format)\n   */\n  selected: PropTypes.instanceOf(moment),\n  /**\n   * Can turn the shadow off if using the inline prop\n   */\n  shadow: PropTypes.bool,\n  /**\n   * Will close the popup on selection\n   */\n  shouldCloseOnSelect: PropTypes.bool,\n  /**\n   * Show the icon in input\n   */\n  showIcon: PropTypes.bool,\n  /**\n   * Show the time selection alongside the calendar\n   */\n  showTimeSelect: PropTypes.bool,\n  /**\n   * Only show the time selector, not the calendar\n   */\n  showTimeSelectOnly: PropTypes.bool,\n  /**\n   * The format of the time within the selector, in moment notation\n   */\n  timeFormat: PropTypes.string,\n};\n\nEuiDatePicker.defaultProps = {\n  adjustDateOnChange: true,\n  dateFormat: euiDatePickerDefaultDateFormat,\n  fullWidth: false,\n  isLoading: false,\n  shadow: true,\n  shouldCloseOnSelect: true,\n  showIcon: true,\n  showTimeSelect: false,\n  timeFormat: euiDatePickerDefaultTimeFormat,\n};\n"]}]}