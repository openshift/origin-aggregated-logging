{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/components/combo_box/combo_box_input/combo_box_input.js","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/components/combo_box/combo_box_input/combo_box_input.js","mtime":1565204169643},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EuiComboBoxInput = void 0;\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/es6.object.assign\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.object.set-prototype-of\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactInputAutosize = _interopRequireDefault(require(\"react-input-autosize\"));\n\nvar _accessibility = require(\"../../accessibility\");\n\nvar _form = require(\"../../form\");\n\nvar _combo_box_pill = require(\"./combo_box_pill\");\n\nvar _services = require(\"../../../services\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar makeId = (0, _services.htmlIdGenerator)();\n\nvar EuiComboBoxInput =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EuiComboBoxInput, _Component);\n\n  function EuiComboBoxInput(props) {\n    var _this;\n\n    _classCallCheck(this, EuiComboBoxInput);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EuiComboBoxInput).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"updatePosition\", function () {\n      // Wait a beat for the DOM to update, since we depend on DOM elements' bounds.\n      requestAnimationFrame(function () {\n        _this.props.updatePosition();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onFocus\", function () {\n      _this.props.onFocus();\n\n      _this.setState({\n        hasFocus: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onBlur\", function () {\n      if (_this.props.onBlur) {\n        _this.props.onBlur();\n      }\n\n      _this.setState({\n        hasFocus: false\n      });\n    });\n\n    _this.state = {\n      hasFocus: false\n    };\n    return _this;\n  }\n\n  _createClass(EuiComboBoxInput, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var searchValue = prevProps.searchValue; // We need to update the position of everything if the user enters enough input to change\n      // the size of the input.\n\n      if (searchValue !== this.props.searchValue) {\n        this.updatePosition();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          id = _this$props.id,\n          placeholder = _this$props.placeholder,\n          selectedOptions = _this$props.selectedOptions,\n          onRemoveOption = _this$props.onRemoveOption,\n          onClick = _this$props.onClick,\n          _onChange = _this$props.onChange,\n          value = _this$props.value,\n          searchValue = _this$props.searchValue,\n          autoSizeInputRef = _this$props.autoSizeInputRef,\n          inputRef = _this$props.inputRef,\n          onClear = _this$props.onClear,\n          hasSelectedOptions = _this$props.hasSelectedOptions,\n          isListOpen = _this$props.isListOpen,\n          onOpenListClick = _this$props.onOpenListClick,\n          onCloseListClick = _this$props.onCloseListClick,\n          singleSelection = _this$props.singleSelection,\n          isDisabled = _this$props.isDisabled,\n          toggleButtonRef = _this$props.toggleButtonRef,\n          fullWidth = _this$props.fullWidth,\n          noIcon = _this$props.noIcon,\n          rootId = _this$props.rootId,\n          focusedOptionId = _this$props.focusedOptionId,\n          compressed = _this$props.compressed;\n      var pills = selectedOptions.map(function (option) {\n        var label = option.label,\n            color = option.color,\n            onClick = option.onClick,\n            rest = _objectWithoutProperties(option, [\"label\", \"color\", \"onClick\"]);\n\n        var asPlainText = singleSelection && singleSelection.asPlainText;\n        return _react.default.createElement(_combo_box_pill.EuiComboBoxPill, _extends({\n          option: option,\n          onClose: isDisabled || singleSelection || onClick ? null : onRemoveOption,\n          key: label.toLowerCase(),\n          color: color,\n          onClick: onClick,\n          onClickAriaLabel: onClick ? 'Change' : null,\n          asPlainText: asPlainText\n        }, rest), label);\n      });\n      var removeOptionMessage;\n      var removeOptionMessageId;\n\n      if (this.state.hasFocus) {\n        var readPlaceholder = placeholder ? \"\".concat(placeholder, \".\") : '';\n        var removeOptionMessageContent = \"Combo box. Selected. \".concat(searchValue ? \"\".concat(searchValue, \". Selected. \") : '').concat(selectedOptions.length ? \"\".concat(value, \". Press Backspace to delete \").concat(selectedOptions[selectedOptions.length - 1].label, \". \") : '', \"Combo box input. \").concat(readPlaceholder, \" Type some text or, to display a list of choices, press Down Arrow. \") + 'To exit the list of choices, press Escape.';\n        removeOptionMessageId = makeId(); // aria-live=\"assertive\" will read this message aloud immediately once it enters the DOM.\n        // We'll render to the DOM when the input gains focus and remove it when the input loses focus.\n        // We'll use aria-hidden to prevent default aria information from being read by the screen\n        // reader.\n\n        removeOptionMessage = _react.default.createElement(_accessibility.EuiScreenReaderOnly, null, _react.default.createElement(\"span\", {\n          \"aria-live\": \"assertive\",\n          id: removeOptionMessageId\n        }, removeOptionMessageContent));\n      }\n\n      var placeholderMessage;\n\n      if (placeholder && !selectedOptions.length && !searchValue) {\n        placeholderMessage = _react.default.createElement(\"p\", {\n          className: \"euiComboBoxPlaceholder\"\n        }, placeholder);\n      }\n\n      var clickProps = {};\n\n      if (!isDisabled && onClear && hasSelectedOptions) {\n        clickProps.clear = {\n          onClick: onClear,\n          'data-test-subj': 'comboBoxClearButton'\n        };\n      }\n\n      var icon;\n\n      if (!noIcon) {\n        icon = {\n          type: 'arrowDown',\n          side: 'right',\n          onClick: isListOpen && !isDisabled ? onCloseListClick : onOpenListClick,\n          ref: toggleButtonRef,\n          'aria-label': isListOpen ? 'Close list of options' : 'Open list of options',\n          disabled: isDisabled,\n          'data-test-subj': 'comboBoxToggleListButton'\n        };\n      }\n\n      var wrapClasses = (0, _classnames.default)('euiComboBox__inputWrap', {\n        'euiComboBox__inputWrap--compressed': compressed,\n        'euiComboBox__inputWrap--fullWidth': fullWidth,\n        'euiComboBox__inputWrap--noWrap': singleSelection,\n        'euiComboBox__inputWrap-isClearable': onClear\n      });\n      return _react.default.createElement(_form.EuiFormControlLayout, _extends({\n        icon: icon\n      }, clickProps, {\n        fullWidth: fullWidth,\n        compressed: compressed\n      }), _react.default.createElement(\"div\", {\n        className: wrapClasses,\n        onClick: onClick,\n        tabIndex: \"-1\" // becomes onBlur event's relatedTarget, otherwise relatedTarget is null when clicking on this div\n        ,\n        \"data-test-subj\": \"comboBoxInput\"\n      }, !singleSelection || !searchValue ? pills : null, placeholderMessage, _react.default.createElement(_reactInputAutosize.default, {\n        role: \"textbox\",\n        \"aria-controls\": isListOpen ? rootId('listbox') : null,\n        \"aria-activedescendant\": focusedOptionId,\n        id: id,\n        style: {\n          fontSize: 14\n        },\n        className: \"euiComboBox__input\",\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        onChange: function onChange(e) {\n          return _onChange(e.target.value);\n        },\n        value: searchValue,\n        ref: autoSizeInputRef,\n        inputRef: inputRef,\n        disabled: isDisabled,\n        \"data-test-subj\": \"comboBoxSearchInput\"\n      }), removeOptionMessage));\n    }\n  }]);\n\n  return EuiComboBoxInput;\n}(_react.Component);\n\nexports.EuiComboBoxInput = EuiComboBoxInput;\n\n_defineProperty(EuiComboBoxInput, \"propTypes\", {\n  id: _propTypes.default.string,\n  placeholder: _propTypes.default.string,\n  selectedOptions: _propTypes.default.array,\n  onRemoveOption: _propTypes.default.func,\n  onBlur: _propTypes.default.func,\n  onClick: _propTypes.default.func,\n  onFocus: _propTypes.default.func.isRequired,\n  onChange: _propTypes.default.func,\n  value: _propTypes.default.string,\n  searchValue: _propTypes.default.string,\n  autoSizeInputRef: _propTypes.default.func,\n  inputRef: _propTypes.default.func,\n  updatePosition: _propTypes.default.func.isRequired,\n  onClear: _propTypes.default.func,\n  hasSelectedOptions: _propTypes.default.bool.isRequired,\n  isListOpen: _propTypes.default.bool.isRequired,\n  noIcon: _propTypes.default.bool.isRequired,\n  onOpenListClick: _propTypes.default.func.isRequired,\n  onCloseListClick: _propTypes.default.func.isRequired,\n  singleSelection: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.shape({\n    asPlainText: _propTypes.default.bool\n  })]),\n  isDisabled: _propTypes.default.bool,\n  toggleButtonRef: _propTypes.default.func,\n  fullWidth: _propTypes.default.bool,\n  rootId: _propTypes.default.func.isRequired,\n  focusedOptionId: _propTypes.default.string,\n  compressed: _propTypes.default.bool.isRequired\n});\n\nEuiComboBoxInput.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [{\n    \"name\": \"updatePosition\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [],\n    \"returns\": null\n  }, {\n    \"name\": \"onFocus\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [],\n    \"returns\": null\n  }, {\n    \"name\": \"onBlur\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [],\n    \"returns\": null\n  }],\n  \"displayName\": \"EuiComboBoxInput\",\n  \"props\": {\n    \"id\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"selectedOptions\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"onRemoveOption\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"onBlur\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"onClick\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"onFocus\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"searchValue\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"autoSizeInputRef\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"inputRef\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"updatePosition\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"onClear\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"hasSelectedOptions\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"isListOpen\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"noIcon\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"onOpenListClick\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"onCloseListClick\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"singleSelection\": {\n      \"type\": {\n        \"name\": \"union\",\n        \"value\": [{\n          \"name\": \"bool\"\n        }, {\n          \"name\": \"shape\",\n          \"value\": {\n            \"asPlainText\": {\n              \"name\": \"bool\",\n              \"required\": false\n            }\n          }\n        }]\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"isDisabled\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"toggleButtonRef\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"fullWidth\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"rootId\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"focusedOptionId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"compressed\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/components/combo_box/combo_box_input/combo_box_input.js"],"names":["makeId","EuiComboBoxInput","props","requestAnimationFrame","updatePosition","onFocus","setState","hasFocus","onBlur","state","prevProps","searchValue","id","placeholder","selectedOptions","onRemoveOption","onClick","onChange","value","autoSizeInputRef","inputRef","onClear","hasSelectedOptions","isListOpen","onOpenListClick","onCloseListClick","singleSelection","isDisabled","toggleButtonRef","fullWidth","noIcon","rootId","focusedOptionId","compressed","pills","map","option","label","color","rest","asPlainText","toLowerCase","removeOptionMessage","removeOptionMessageId","readPlaceholder","removeOptionMessageContent","length","placeholderMessage","clickProps","clear","icon","type","side","ref","disabled","wrapClasses","fontSize","e","target","Component","PropTypes","string","array","func","isRequired","bool","oneOfType","shape"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport AutosizeInput from 'react-input-autosize';\n\nimport { EuiScreenReaderOnly } from '../../accessibility';\nimport { EuiFormControlLayout } from '../../form';\nimport { EuiComboBoxPill } from './combo_box_pill';\nimport { htmlIdGenerator } from '../../../services';\n\nconst makeId = htmlIdGenerator();\n\nexport class EuiComboBoxInput extends Component {\n  static propTypes = {\n    id: PropTypes.string,\n    placeholder: PropTypes.string,\n    selectedOptions: PropTypes.array,\n    onRemoveOption: PropTypes.func,\n    onBlur: PropTypes.func,\n    onClick: PropTypes.func,\n    onFocus: PropTypes.func.isRequired,\n    onChange: PropTypes.func,\n    value: PropTypes.string,\n    searchValue: PropTypes.string,\n    autoSizeInputRef: PropTypes.func,\n    inputRef: PropTypes.func,\n    updatePosition: PropTypes.func.isRequired,\n    onClear: PropTypes.func,\n    hasSelectedOptions: PropTypes.bool.isRequired,\n    isListOpen: PropTypes.bool.isRequired,\n    noIcon: PropTypes.bool.isRequired,\n    onOpenListClick: PropTypes.func.isRequired,\n    onCloseListClick: PropTypes.func.isRequired,\n    singleSelection: PropTypes.oneOfType([\n      PropTypes.bool,\n      PropTypes.shape({\n        asPlainText: PropTypes.bool,\n      }),\n    ]),\n    isDisabled: PropTypes.bool,\n    toggleButtonRef: PropTypes.func,\n    fullWidth: PropTypes.bool,\n    rootId: PropTypes.func.isRequired,\n    focusedOptionId: PropTypes.string,\n    compressed: PropTypes.bool.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasFocus: false,\n    };\n  }\n\n  updatePosition = () => {\n    // Wait a beat for the DOM to update, since we depend on DOM elements' bounds.\n    requestAnimationFrame(() => {\n      this.props.updatePosition();\n    });\n  };\n\n  onFocus = () => {\n    this.props.onFocus();\n    this.setState({\n      hasFocus: true,\n    });\n  };\n\n  onBlur = () => {\n    if (this.props.onBlur) {\n      this.props.onBlur();\n    }\n    this.setState({\n      hasFocus: false,\n    });\n  };\n\n  componentDidUpdate(prevProps) {\n    const { searchValue } = prevProps;\n\n    // We need to update the position of everything if the user enters enough input to change\n    // the size of the input.\n    if (searchValue !== this.props.searchValue) {\n      this.updatePosition();\n    }\n  }\n\n  render() {\n    const {\n      id,\n      placeholder,\n      selectedOptions,\n      onRemoveOption,\n      onClick,\n      onChange,\n      value,\n      searchValue,\n      autoSizeInputRef,\n      inputRef,\n      onClear,\n      hasSelectedOptions,\n      isListOpen,\n      onOpenListClick,\n      onCloseListClick,\n      singleSelection,\n      isDisabled,\n      toggleButtonRef,\n      fullWidth,\n      noIcon,\n      rootId,\n      focusedOptionId,\n      compressed,\n    } = this.props;\n\n    const pills = selectedOptions.map(option => {\n      const { label, color, onClick, ...rest } = option;\n\n      const asPlainText = singleSelection && singleSelection.asPlainText;\n\n      return (\n        <EuiComboBoxPill\n          option={option}\n          onClose={\n            isDisabled || singleSelection || onClick ? null : onRemoveOption\n          }\n          key={label.toLowerCase()}\n          color={color}\n          onClick={onClick}\n          onClickAriaLabel={onClick ? 'Change' : null}\n          asPlainText={asPlainText}\n          {...rest}>\n          {label}\n        </EuiComboBoxPill>\n      );\n    });\n\n    let removeOptionMessage;\n    let removeOptionMessageId;\n\n    if (this.state.hasFocus) {\n      const readPlaceholder = placeholder ? `${placeholder}.` : '';\n      const removeOptionMessageContent =\n        `Combo box. Selected. ${\n          searchValue ? `${searchValue}. Selected. ` : ''\n        }${\n          selectedOptions.length\n            ? `${value}. Press Backspace to delete ${\n                selectedOptions[selectedOptions.length - 1].label\n              }. `\n            : ''\n        }Combo box input. ${readPlaceholder} Type some text or, to display a list of choices, press Down Arrow. ` +\n        'To exit the list of choices, press Escape.';\n\n      removeOptionMessageId = makeId();\n\n      // aria-live=\"assertive\" will read this message aloud immediately once it enters the DOM.\n      // We'll render to the DOM when the input gains focus and remove it when the input loses focus.\n      // We'll use aria-hidden to prevent default aria information from being read by the screen\n      // reader.\n      removeOptionMessage = (\n        <EuiScreenReaderOnly>\n          <span aria-live=\"assertive\" id={removeOptionMessageId}>\n            {removeOptionMessageContent}\n          </span>\n        </EuiScreenReaderOnly>\n      );\n    }\n\n    let placeholderMessage;\n\n    if (placeholder && !selectedOptions.length && !searchValue) {\n      placeholderMessage = (\n        <p className=\"euiComboBoxPlaceholder\">{placeholder}</p>\n      );\n    }\n\n    const clickProps = {};\n\n    if (!isDisabled && onClear && hasSelectedOptions) {\n      clickProps.clear = {\n        onClick: onClear,\n        'data-test-subj': 'comboBoxClearButton',\n      };\n    }\n\n    let icon;\n    if (!noIcon) {\n      icon = {\n        type: 'arrowDown',\n        side: 'right',\n        onClick: isListOpen && !isDisabled ? onCloseListClick : onOpenListClick,\n        ref: toggleButtonRef,\n        'aria-label': isListOpen\n          ? 'Close list of options'\n          : 'Open list of options',\n        disabled: isDisabled,\n        'data-test-subj': 'comboBoxToggleListButton',\n      };\n    }\n\n    const wrapClasses = classNames('euiComboBox__inputWrap', {\n      'euiComboBox__inputWrap--compressed': compressed,\n      'euiComboBox__inputWrap--fullWidth': fullWidth,\n      'euiComboBox__inputWrap--noWrap': singleSelection,\n      'euiComboBox__inputWrap-isClearable': onClear,\n    });\n\n    return (\n      <EuiFormControlLayout\n        icon={icon}\n        {...clickProps}\n        fullWidth={fullWidth}\n        compressed={compressed}>\n        <div\n          className={wrapClasses}\n          onClick={onClick}\n          tabIndex=\"-1\" // becomes onBlur event's relatedTarget, otherwise relatedTarget is null when clicking on this div\n          data-test-subj=\"comboBoxInput\">\n          {!singleSelection || !searchValue ? pills : null}\n          {placeholderMessage}\n          <AutosizeInput\n            role=\"textbox\"\n            aria-controls={isListOpen ? rootId('listbox') : null}\n            aria-activedescendant={focusedOptionId}\n            id={id}\n            style={{ fontSize: 14 }}\n            className=\"euiComboBox__input\"\n            onFocus={this.onFocus}\n            onBlur={this.onBlur}\n            onChange={e => onChange(e.target.value)}\n            value={searchValue}\n            ref={autoSizeInputRef}\n            inputRef={inputRef}\n            disabled={isDisabled}\n            data-test-subj=\"comboBoxSearchInput\"\n          />\n          {removeOptionMessage}\n        </div>\n      </EuiFormControlLayout>\n    );\n  }\n}\n"]}]}