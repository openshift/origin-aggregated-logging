{"remainingRequest":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js!/Users/chanderprall/projects/eui/src/services/format/format_number.ts","dependencies":[{"path":"/Users/chanderprall/projects/eui/src/services/format/format_number.ts","mtime":1565204170068},{"path":"/Users/chanderprall/projects/eui/.babelrc.js","mtime":1565204168946},{"path":"/Users/chanderprall/projects/eui/node_modules/cache-loader/dist/cjs.js","mtime":1555436064329},{"path":"/Users/chanderprall/projects/eui/node_modules/babel-loader/lib/index.js","mtime":1543517280769}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatNumber = void 0;\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nvar _numeral = _interopRequireDefault(require(\"numeral\"));\n\nvar _predicate = require(\"../predicate\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar numberFormatAliases = {\n  decimal1: '0,0.0',\n  decimal2: '0,0.00',\n  decimal3: '0,0.000',\n  ordinal: '0o',\n  integer: '0,0'\n};\n\nvar formatNumber = function formatNumber(value) {\n  var numberFormatOrConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var format;\n  var nil = '';\n  var round;\n\n  if ((0, _predicate.isString)(numberFormatOrConfig)) {\n    format = numberFormatOrConfig;\n  } else {\n    format = numberFormatOrConfig.format;\n    nil = numberFormatOrConfig.nil || '';\n    round = numberFormatOrConfig.round;\n  }\n\n  if (!format) {\n    return (0, _predicate.isNil)(value) ? nil : value.toString();\n  }\n\n  var roundingFunc = round ? Math.round : Math.floor;\n  var numberFormat = numberFormatAliases[format] || format;\n  return (0, _predicate.isNil)(value) ? nil : (0, _numeral.default)(value).format(numberFormat, roundingFunc);\n};\n\nexports.formatNumber = formatNumber;",{"version":3,"sources":["/Users/chanderprall/projects/eui/src/services/format/format_number.ts"],"names":["numberFormatAliases","decimal1","decimal2","decimal3","ordinal","integer","formatNumber","value","numberFormatOrConfig","format","nil","round","toString","roundingFunc","Math","floor","numberFormat"],"mappings":";;;;;;;;;AAAA;;AACA;;;;AAEA,IAAMA,mBAAgD,GAAG;AACvDC,EAAAA,QAAQ,EAAE,OAD6C;AAEvDC,EAAAA,QAAQ,EAAE,QAF6C;AAGvDC,EAAAA,QAAQ,EAAE,SAH6C;AAIvDC,EAAAA,OAAO,EAAE,IAJ8C;AAKvDC,EAAAA,OAAO,EAAE;AAL8C,CAAzD;;AAcO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAC1BC,KAD0B,EAGvB;AAAA,MADHC,oBACG,uEAD0D,EAC1D;AACH,MAAIC,MAAJ;AACA,MAAIC,GAAG,GAAG,EAAV;AACA,MAAIC,KAAJ;;AAEA,MAAI,yBAASH,oBAAT,CAAJ,EAAoC;AAClCC,IAAAA,MAAM,GAAGD,oBAAT;AACD,GAFD,MAEO;AACLC,IAAAA,MAAM,GAAGD,oBAAoB,CAACC,MAA9B;AACAC,IAAAA,GAAG,GAAGF,oBAAoB,CAACE,GAArB,IAA4B,EAAlC;AACAC,IAAAA,KAAK,GAAGH,oBAAoB,CAACG,KAA7B;AACD;;AAED,MAAI,CAACF,MAAL,EAAa;AACX,WAAO,sBAAMF,KAAN,IAAeG,GAAf,GAAqBH,KAAK,CAAEK,QAAP,EAA5B;AACD;;AAED,MAAMC,YAAY,GAAGF,KAAK,GAAGG,IAAI,CAACH,KAAR,GAAgBG,IAAI,CAACC,KAA/C;AACA,MAAMC,YAAY,GAAGhB,mBAAmB,CAACS,MAAD,CAAnB,IAA+BA,MAApD;AACA,SAAO,sBAAMF,KAAN,IAAeG,GAAf,GAAqB,sBAAQH,KAAR,EAAeE,MAAf,CAAsBO,YAAtB,EAAoCH,YAApC,CAA5B;AACD,CAvBM","sourcesContent":["import numeral from 'numeral';\nimport { isNil, isString } from '../predicate';\n\nconst numberFormatAliases: { [alias: string]: string } = {\n  decimal1: '0,0.0',\n  decimal2: '0,0.00',\n  decimal3: '0,0.000',\n  ordinal: '0o',\n  integer: '0,0',\n};\n\ninterface FormatNumberConfig {\n  format: string;\n  nil: string;\n  round: boolean;\n}\n\nexport const formatNumber = (\n  value?: number | null,\n  numberFormatOrConfig: string | Partial<FormatNumberConfig> = {}\n) => {\n  let format;\n  let nil = '';\n  let round;\n\n  if (isString(numberFormatOrConfig)) {\n    format = numberFormatOrConfig;\n  } else {\n    format = numberFormatOrConfig.format;\n    nil = numberFormatOrConfig.nil || '';\n    round = numberFormatOrConfig.round;\n  }\n\n  if (!format) {\n    return isNil(value) ? nil : value!.toString();\n  }\n\n  const roundingFunc = round ? Math.round : Math.floor;\n  const numberFormat = numberFormatAliases[format] || format;\n  return isNil(value) ? nil : numeral(value).format(numberFormat, roundingFunc);\n};\n"]}]}