    <store>
      @type elasticsearch_dynamic
      host "#{ENV['OPS_HOST']}"
      port "#{ENV['OPS_PORT']}"
      scheme https
      index_name .operations.${record['time'].nil? ? Time.at(time).getutc.strftime(@logstash_dateformat) : Time.parse(record['time']).getutc.strftime(@logstash_dateformat)}
      user fluentd
      password changeme

      client_key "#{ENV['OPS_CLIENT_KEY']}"
      client_cert "#{ENV['OPS_CLIENT_CERT']}"
      ca_file "#{ENV['OPS_CA']}"

      type_name ${(record && record.delete('es_type')) || 'fluentd'}
      flatten_hashes_separator ${keep_fields=Hash['CEE',true,'docker',true,'file',true,'geoip',true,'hostname',true,'ident',true,'ipaddr4',true,'ipaddr6',true,'kubernetes',true,'level',true,'message',true,'offset',true,'pid',true,'pipeline_metadata',true,'rsyslog',true,'service',true,'systemd',true,'tags',true,'version',true,'time',true]; undefined = record.reject do |k,v| keep_fields.key?(k) end; record['undefined'] = undefined unless undefined.empty?; def delempty(thing) if thing.respond_to?(:delete_if) then thing.delete_if do |k,v| v.nil? || delempty(v).empty? || v.empty? end end; thing; end; record.delete_if do |k,v| undefined.key?(k) || v.nil? || delempty(v).empty? || v.empty? end; record['@timestamp'] = record.delete('time'); ""}

      flush_interval 5s
      max_retry_wait 300
      disable_retry_limit
    </store>
