<filter system.var.log**>
  type record_transformer
  enable_ruby
  <record>
    # if host == 'localhost' do a fqdn lookup
    ## we pull the hostname from the host's /etc/hostname mounted at /etc/docker-hostname to correctly identify the hostname
    hostname ${host.eql?('localhost') ? (begin; File.open('/etc/docker-hostname') { |f| f.readline }.rstrip; rescue; host; end) : host}

    # we want to correct the time here in cases where we are reading logs from a prior year.  By default Ruby will assume the current date for
    # parsing, and since syslog messages do not include the year, it will populate the year with the current year which may resolve to a future date
    # if the resolved date is in the future, we will subtract 1 from the year and use that
    time ${ (Time.at(time) > Time.now) ? (Time.new((time.year - 1), time.month, time.day, time.hour, time.min, time.sec, time.utc_offset).to_datetime.to_s) : (time.to_datetime.to_s) }


    #tag ${tag}_.operations_log
    version 1.3.0
  </record>
  remove_keys host
</filter>

<filter journal.system**>
  type record_transformer
  enable_ruby
  # keep only the fields set explicitly below - remove to see all journal fields
  renew_record
  <record>
    # if host == 'localhost' do a fqdn lookup
    ## we pull the hostname from the host's /etc/hostname mounted at /etc/docker-hostname to correctly identify the hostname
    hostname ${_HOSTNAME.eql?('localhost') ? (begin; File.open('/etc/docker-hostname') { |f| f.readline }.rstrip; rescue; _HOSTNAME; end) : _HOSTNAME}
    # if the field name begins with an uppercase letter, or might not exist, you have to use the record["FIELDNAME"] style
    time ${(record["_SOURCE_REALTIME_TIMESTAMP"] || record["__REALTIME_TIMESTAMP"]) ? Time.at((record["_SOURCE_REALTIME_TIMESTAMP"] || record["__REALTIME_TIMESTAMP"]).to_f / 1000000.0).to_datetime.rfc3339(6) : time.to_datetime.rfc3339(6)}
    # if field is optional you have to use record[name] or (name rescue nil) or something like that
    ident ${record["SYSLOG_IDENTIFIER"] || record["_COMM"]}
    message ${record["MESSAGE"]}
    version 1.3.1
  </record>
</filter>
