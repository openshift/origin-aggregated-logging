<source>
  @type secure_forward
  @label @MUX
  port "#{ENV['FORWARD_LISTEN_PORT'] || '24284'}"
  # bind 0.0.0.0 # default
  log_level "#{ENV['FORWARD_INPUT_LOG_LEVEL'] || ENV['LOG_LEVEL'] || 'warn'}"
  self_hostname "#{ENV['FORWARD_LISTEN_HOST'] || 'mux.example.com'}"
  shared_key    "#{File.open('/etc/fluent/muxkeys/shared_key') do |f| f.readline end.rstrip}"

  secure yes

  cert_path        /etc/fluent/muxkeys/cert
  private_key_path /etc/fluent/muxkeys/key
  private_key_passphrase not_used_key_is_unencrypted
</source>

<label @MUX>
  # these are usually coming as raw logs from an openshift fluentd acting
  # as a collector only
  # specifically - an openshift fluentd collector configured to use secure_forward as
  # described in https://github.com/openshift/origin-aggregated-logging/pull/264/files

  # mux hardcodes USE_JOURNAL=true to force the k8s-meta plugin to look for
  # CONTAINER_NAME instead of the tag to extract the k8s metadata - logs coming
  # from a fluentd using json-file will usually not have these fields, so add them
  <filter kubernetes.var.log.containers.**>
    @type record_transformer
    enable_ruby
    <record>
      CONTAINER_NAME ${record['CONTAINER_NAME'] || (md = /var\.log\.containers\.(?<pod_name>[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?<namespace>[^_]+)_(?<container_name>.+)-(?<docker_id>[a-z0-9]{64})\.log$/.match(tag); "k8s_" + md["container_name"] + ".0_" + md["pod_name"] + "_" + md["namespace"] + "_0_01234567")}
      CONTAINER_ID_FULL ${record['CONTAINER_ID_FULL'] || (md = /var\.log\.containers\.(?<pod_name>[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?<namespace>[^_]+)_(?<container_name>.+)-(?<docker_id>[a-z0-9]{64})\.log$/.match(tag); md["docker_id"])
    </record>
  </filter>

  # just redirect these to their standard processing/filtering
  <match journal system.var.log.messages system.var.log.messages.** kubernetes.var.log.containers.**>
    @type relabel
    @label @INGRESS
  </match>

  # Records with these tags are operations logs and have already been processed
  # and formatted by an openshift fluentd, so we can skip any additional
  # processing
  <match journal.container** journal.system>
    @type rewrite_tag_filter
    @label @INGRESS
    rewriterule1 message .+ mux.ops
  </match>

  # If we got here, then either these are k8s container logs read from the journal by
  # an openshift fluentd, or are external logs
  # If they are k8s container logs, they should have a CONTAINER_NAME field which will
  # be used by filter-pre-mux.conf.  If they are external logs, the namespace to use
  # will be encoded in either the namespace_name field, or in the tag.  The filter below
  # will set the values/tag needed in filter-pre-mux.conf.
  # If the record already has k8s metadata, there will be a kubernetes.namespace_uuid
  # field.  If not, then the record will be tagged that k8s metadata processing is needed.
  # This filter will also ensure that the record has some sort of time field.
  <filter **>
    @type record_transformer
    enable_ruby
    <record>
      mux_namespace_name ${record['namespace_name'] || (tag_parts[0] == "project" && tag_parts[1]) || ENV["MUX_UNDEFINED_NAMESPACE"] || "mux-undefined"}
      mux_need_k8s_meta ${(record['namespace_uuid'] || record.fetch('kubernetes', {})['namespace_id'].nil?) ? "true" : "false"}
      kubernetes {"namespace_name":"${record['namespace_name'] || (tag_parts[0] == 'project' && tag_parts[1]) || ENV['MUX_UNDEFINED_NAMESPACE'] || 'mux-undefined'}","namespace_id":"${record['namespace_uuid'] || record.fetch('kubernetes', {})['namespace_id']}"}
      time ${record['@timestamp'] || record['time'] || time.utc.to_datetime.rfc3339(6)}
    </record>
  </filter>

  # if the record already has k8s metadata (e.g. record forwarded from another
  # openshift or mux) then tag so that k8s meta will be skipped
  # the `mux` tag will skip all operation and app specific filtering
  # the kubernetes.mux.** tag will match the k8s-meta but no other ops and apps filtering
  # the kubernetes.mux.** tag will be processed by filter-pre-mux.conf
  # This tag was chosen because it will be processed by the k8s meta plugin, but will
  # bypass all other filtering.
  <match **>
    @type rewrite_tag_filter
    @label @INGRESS
    rewriterule1 mux_need_k8s_meta ^false$ mux
    rewriterule2 mux_namespace_name (.+) kubernetes.mux.var.log.containers.mux-mux.mux-mux_$1_mux-0123456789012345678901234567890123456789012345678901234567890123.log
  </match>
</label>
