diff --git a/fluentd/vendored_gem_src/fluent-plugin-prometheus/lib/fluent/plugin/in_prometheus_tail_monitor.rb b/fluentd/vendored_gem_src/fluent-plugin-prometheus/lib/fluent/plugin/in_prometheus_tail_monitor.rb
index dff007c7..06d1472d 100644
--- a/fluentd/vendored_gem_src/fluent-plugin-prometheus/lib/fluent/plugin/in_prometheus_tail_monitor.rb
+++ b/fluentd/vendored_gem_src/fluent-plugin-prometheus/lib/fluent/plugin/in_prometheus_tail_monitor.rb
@@ -19,6 +19,7 @@ module Fluent::Plugin
     def initialize
       super
       @registry = ::Prometheus::Client.registry
+      @prev_total_bytes_collected={}
     end
 
     def multi_workers_ready?
@@ -38,24 +39,22 @@ module Fluent::Plugin
         @base_labels[key] = expander.expand(value)
       end
 
-      if defined?(Fluent::Plugin) && defined?(Fluent::Plugin::MonitorAgentInput)
-        # from v0.14.6
-        @monitor_agent = Fluent::Plugin::MonitorAgentInput.new
-      else
-        @monitor_agent = Fluent::MonitorAgentInput.new
-      end
+      @monitor_agent = Fluent::Plugin::MonitorAgentInput.new
     end
 
     def start
       super
 
       @metrics = {
-        position: @registry.gauge(
+        position: get_gauge(
           :fluentd_tail_file_position,
           'Current position of file.'),
-        inode: @registry.gauge(
+        inode: get_gauge(
           :fluentd_tail_file_inode,
           'Current inode of file.'),
+        total_bytes_collected: get_counter(
+          :log_collected_bytes_total,
+          'logs total bytes collected by fluentd.'),
       }
       timer_execute(:in_prometheus_tail_monitor, @interval, &method(:update_monitor_info))
     end
@@ -77,19 +76,56 @@ module Fluent::Plugin
           # Access to internal variable of internal class...
           # Very fragile implementation
           pe = watcher.instance_variable_get(:@pe)
+          total_bytes_collected=watcher.instance_variable_get(:@total_bytes_collected)
           label = labels(info, watcher.path)
+          @log.info "label #{label}"
           @metrics[:inode].set(label, pe.read_inode)
           @metrics[:position].set(label, pe.read_pos)
+          if (@prev_total_bytes_collected[label] == nil) 
+            @prev_total_bytes_collected[label]=0
+          end
+          @metrics[:total_bytes_collected].increment(label, total_bytes_collected - @prev_total_bytes_collected[label])
+          @prev_total_bytes_collected[label]=total_bytes_collected
         end
       end
     end
 
     def labels(plugin_info, path)
+      #taking out dirname and .log from the full pathname e.g. /var/log/containers/xxx.log --> xxx
+      tmp = path[20..-5]
+      @log.info "tmp #{tmp}"
+      parsedpath = tmp.split("_")
+      podname = parsedpath[0]
+      namespace = parsedpath[1]
+      containername = parsedpath[2]
+
       @base_labels.merge(
         plugin_id: plugin_info["plugin_id"],
         type: plugin_info["type"],
         path: path,
+        namespace: namespace,
+        podname: podname,
+        containername: containername,
       )
     end
+
+    def get_gauge(name, docstring)
+      if @registry.exist?(name)
+        @registry.get(name)
+      else
+        @registry.gauge(name, docstring)
+      end
+    end
+
+
+    def get_counter(name, docstring)
+      if @registry.exist?(name)
+        @registry.get(name)
+      else
+        @registry.counter(name, docstring)
+      end
+    end
+
+
   end
 end
